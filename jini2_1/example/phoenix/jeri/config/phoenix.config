/* Configuration file containing entries used to configure
 * an implementation of Phoenix to use JERI for remote
 * communication.
 *
 * When using this config file on the Phoenix command line,
 * the following system properties should be set on the
 * command line:
 *
 *  -Djava.security.manager
 *  -Djava.security.policy
 *  -Djava.rmi.server.codebase
 *  -Djava.util.logging.config.file
 *  -Djava.util.logging.manager
 *  -Djava.security.debug (optional)
 *  -Dconfig      (THIS config file)
 *  -DgroupConfig (activation instantiator config file)
 *  -DserverHost  (host running phoenix)
 *  -DpersistDir  (state persistence directory, ex. /var/tmp, c:\\home\\temp)
 *  -DjiniHome    (base install directory for Jini, ex. /vob/jive, c:\\jini2_0)
 *  -DappHome     (base install directory for examples, ex. /home/tests, c:\\tests)
 *
 * Below is an example command line on unix, that starts
 * Phoenix. Carriage returns are inserted for readability:
 * 
 * > /export/home/j2sdk1.4.1_01/bin/java
 *    -Djava.security.manager=
 *    -Djava.security.policy=<jini-install-dir>/example/phoenix/jeri/policy/phoenix.policy
 *    -Djava.rmi.server.codebase=http://<hostname>:8080/phoenix-dl.jar
 *    -Djava.util.logging.manager=com.sun.jini.logging.LogManager
 *    -Djava.util.logging.config.file=<jini-install-dir>/example/common/logging/phoenix.logging
 *    -Dconfig=<jini-install-dir>/example/phoenix/jeri/config/phoenix.config
 *    -DgroupConfig=<jini-install-dir>/example/phoenix/jeri/config/phoenix-group.config
 *    -DserverHost=<hostname>
 *    -DpersistDir=/tmp/jeri-phoenix-log
 *    -DjiniHome=<jini-install-dir>
 *    -DappHome=<example-install-dir>
 *        -jar <jini-install-dir>/lib/phoenix.jar <example-install-dir>/example/phoenix/jeri/config/phoenix.config
 *
 * Note that Phoenix exports four remote objects:
 *  - registry
 *  - activation system
 *  - activator
 *  - activation monitor
 * Each such object is exported using an Exporter obtained
 * from this configuration file. Phoenix provides various
 * classes to facilitate the configuration of these exporters,
 * as shown below. 
 *
 * Each exporter configured here employs an underlying exporter that
 * uses an invocation layer factory to create a compatible proxy and
 * invocation dispatcher for the remote object being exported. That
 * invocation layer factory, used in conjunction with the underlying 
 * exporter, allows applications to customize the remote invocation
 * and dispatch behavior of the remote object being exported.
 */
import com.sun.jini.phoenix.AccessILFactory;
import com.sun.jini.phoenix.PhoenixConstants;
import com.sun.jini.phoenix.RegistrySunExporter;
import com.sun.jini.phoenix.SystemAccessILFactory;

import net.jini.jeri.BasicILFactory;
import net.jini.jeri.BasicJeriExporter;
import net.jini.jeri.tcp.TcpServerEndpoint;

com.sun.jini.phoenix {

    /* Exporter(s) -------------------------------------------------------------- */

    /* Create the exporter to use to export the registry employed
     * by Phoenix. Configure that exporter to export the registry in
     * in the following way:
     *  - export the registry on the default port (1099)
     */
    registryExporter = new RegistrySunExporter();

    /* Default rmid port is 1098. Pick a new port to avoid conflicts.
     * Then create an endpoint for Phoenix that listens on that port.
     */
    private jeriPort = 2000; //cannot be 1098
    private serverEndpoint = TcpServerEndpoint.getInstance(jeriPort);

    /* Create the exporter to use to export the activation system.
     * The exporter configured here will export the activation system
     * in the following way:
     *  - use JERI for remote communciation
     *  - when accepting network connections, use the endpoint specified
     *    above
     *  - to generate the server-side dispatcher for the activation
     *    system, and to generate the client-side invocation handler
     *    for the activation system's dynamic proxy, use the specified
     *    invocation layer factory
     *  - disable distributed garbage collection (DGC) to the activation
     *    system so that the activation system backend is strongly
     *    referenced when it is exported (the default)
     *  - while the activation system remains exported via this
     *    exporter, keep the virtual machine alive (the default)
     *  - use PhoenixConstants.ACTIVATION_SYSTEM_UUID as the object
     *    identifier for the remote object to be exported.
     */
    systemExporter = new BasicJeriExporter(serverEndpoint,
                                           new SystemAccessILFactory(),
                                           false,
                                           true,
                                           PhoenixConstants.ACTIVATION_SYSTEM_UUID);

    /* Create the exporter to use to export the activator.
     * The exporter configured here will export the activator
     * in the following way:
     *  - use JERI for remote communciation
     *  - when accepting network connections, use the endpoint
     *    specified above
     *  - to generate the server-side dispatcher for the activator,
     *    and to generate the client-side invocation handler
     *    for the activator's dynamic proxy, use the default
     *    invocation layer factory
     *  - disable distributed garbage collection (DGC) to the 
     *    activator so that the activator backend is strongly
     *    referenced when it is exported (the default)
     *  - while the activator remains exported via this
     *    exporter, keep the virtual machine alive (the default)
     *  - use PhoenixConstants.ACTIVATOR_UUID as the object
     *    identifier for the remote object to be exported.
     */
    activatorExporter = new BasicJeriExporter(serverEndpoint,
                                              new BasicILFactory(),
                                              false,
                                              true,
                                              PhoenixConstants.ACTIVATOR_UUID);

    /* Create the exporter to use to export the activation monitor.
     * The exporter configured here will export the activation monitor
     * in the following way:
     *  - use JERI for remote communciation
     *  - when accepting network connections, use the endpoint specified
     *    above
     *  - to generate the server-side dispatcher for the activation
     *    monitor, and to generate the client-side invocation handler
     *    for the activation monitor's dynamic proxy, use the specified
     *    invocation layer factory
     *  - disable distributed garbage collection (DGC) to the activation
     *    monitor so that the activation monitor backend is strongly
     *    referenced when it is exported (the default)
     *  - while the activation monitor remains exported via this
     *    exporter, keep the virtual machine alive (the default)
     *  - use a unique object identifier, chosen by the JERI runtime,
     *    for the remote object being exported
     */
    private invocationLayerFactory = new AccessILFactory();
    monitorExporter = new BasicJeriExporter(serverEndpoint, invocationLayerFactory, false, true);

    /* Phoenix spawns an activation group VM in which the activation
     * instantiator and the activatable objects it instantiates are
     * executed. That activation group instantiator (ActivationGroupImpl)
     * retrieves its configuration information from a configuration
     * source referenced by the value contained in the following item.
     */
    groupConfig = new String[] { "${groupConfig}" };

    /* Application-specific Items ----------------------------------------------- */

    /* Set the maximum time maximum time (milliseconds) to wait for group activation
     * before timing out. Give it a lot of time so that timeout failures don't
     * occur when 'java.security.debug=all' is used (30 minutes seems enough).
     */
    groupTimeout = 1800000;

    /* Substitute the -DpersistDir system property from the command line
     * for the location of the Phoenix state persistence directory.
     */
    persistenceDirectory = "${persistDir}";

}//end com.sun.jini.phoenix
