/* Configuration file containing entries used to configure 
 * an implementation of Phoenix to use JRMP for remote
 * communication.
 *
 * When using this config file on the Phoenix command line,
 * the following system properties should be set on the
 * command line:
 *
 *  -Djava.security.manager
 *  -Djava.security.policy
 *  -Djava.rmi.server.codebase
 *  -Djava.util.logging.manager
 *  -Djava.util.logging.config.file
 *  -Djava.security.debug (optional)
 *  -Dconfig      (THIS config file)
 *  -DgroupConfig (activation instantiator config file)
 *  -DserverHost  (host running phoenix)
 *  -DpersistDir  (state persistence directory, ex. /var/tmp, c:\\home\\temp)
 *  -DjiniHome    (base install directory for Jini, ex. /vob/jive, c:\\jini2_0)
 *  -DappHome     (base install directory for examples, ex. /home/tests, c:\\tests)
 *
 * Below is an example command line on unix, that starts 
 * Phoenix. Carriage returns are inserted for readability:
 * 
 * > /export/home/j2sdk1.4.1_01/bin/java
 *    -Djava.security.manager=
 *    -Djava.security.policy=<jini-install-dir>/example/phoenix/jrmp/policy/phoenix.policy
 *    -Djava.rmi.server.codebase=http://<hostname>:8080/phoenix-dl.jar
 *    -Djava.util.logging.manager=com.sun.jini.logging.LogManager
 *    -Djava.util.logging.config.file=<jini-install-dir>/example/common/logging/phoenix.logging
 *    -Dconfig=<jini-install-dir>/example/phoenix/jrmp/config/phoenix.config
 *    -DgroupConfig=<jini-install-dir>/example/phoenix/jrmp/config/phoenix-group.config
 *    -DserverHost=<hostname>
 *    -DpersistDir=/tmp/jrmp-phoenix-log
 *    -DjiniHome=<jini-install-dir>
 *    -DappHome=<example-install-dir>
 *        -jar <jini-install-dir>/lib/phoenix.jar <example-install-dir>/example/phoenix/jrmp/config/phoenix.config
 *
 * Note that Phoenix exports four remote objects:
 *  - registry
 *  - activation system
 *  - activator
 *  - activation monitor
 * Each such object is exported using an Exporter obtained
 * from this configuration file. Phoenix provides various
 * classes to facilitate the configuration of these exporters,
 * as shown below. 
 */
import com.sun.jini.phoenix.ActivatorSunJrmpExporter;
import com.sun.jini.phoenix.MonitorAccessExporter;
import com.sun.jini.phoenix.RegistrySunExporter;
import com.sun.jini.phoenix.SystemAccessExporter;

com.sun.jini.phoenix {

    /* Exporter(s) -------------------------------------------------------------- */

    /* Create the exporter to use to export the registry employed
     * by Phoenix. Configure that exporter to export the registry in
     * in the following way:
     *  - export the registry on the default port (1099)
     */
    registryExporter = new RegistrySunExporter();

    /* Create the exporter to use to export the activation system.
     * The exporter configured here wraps an instance of the interface
     * java.rmi.activation.ActivationSystem so that the remote
     * object that is exported only accepts calls from the local host.
     * 
     * The exporter configured here will export the activation system
     * in the following way:
     *  - use JRMP for remote communciation
     *  - when accepting network connections, accept calls from only
     *    local host
     */
    systemExporter = new SystemAccessExporter();

    /* Create the exporter to use to export the activator.
     * 
     * The exporter configured here will export the activator
     * in the following way:
     *  - use JRMP for remote communciation
     *  - export the remote object on the port
     *    ActivationSystem.SYSTEM_PORT
     *  - use ObjID.ACTIVATOR_ID as the object identifier for
     *    the remote object to be exported.
     */
    activatorExporter = new ActivatorSunJrmpExporter();

    /* Create the exporter to use to export the activation monitor.
     * The exporter configured here wraps an instance of the interface
     * java.rmi.activation.ActivationMonitor so that the remote
     * object that is exported only accepts calls from the local host.
     * 
     * The exporter configured here will export the activation
     * instantiator in the following way:
     *  - use JRMP for remote communciation
     *  - when accepting network connections, accept calls from only
     *    local host
     */
    monitorExporter = new MonitorAccessExporter();

    /* Phoenix spawns an activation group VM in which the activation
     * instantiator and the activatable objects it instantiates are
     * executed. That activation group instantiator (ActivationGroupImpl)
     * retrieves its configuration information from a configuration
     * source referenced by the value contained in the following item.
     */
    groupConfig = new String[] { "${groupConfig}" };

    /* Application-specific Items ----------------------------------------------- */

    /* Set the maximum time maximum time (milliseconds) to wait for group activation
     * before timing out. Give it a lot of time so that timeout failures don't
     * occur when 'java.security.debug=all' is used (30 minutes seems enough).
     */
    groupTimeout = 1800000;

    /* Substitute the -DpersistDir system property from the command line
     * for the location of the Phoenix state persistence directory.
     */
    persistenceDirectory = "${persistDir}";

}//end com.sun.jini.phoenix
