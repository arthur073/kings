/* Security policy file for the VM that executes a Phoenix that
 * is configured to use secure JERI/jsse for its remote communcation.
 */

/* Keystore containing public key certificates to use for authentication.
 *
 * NOTE: The document titled "Default Policy Implementation and Policy
 *       File Syntax" (located at the URL -
 *       http://java.sun.com/j2se/1.4/docs/guide/security/PolicyFiles.html)
 *       says that the value of the keystore entry is a URL. It can be
 *       either relative or absolute; and if it's relative, then it's
 *       relative to the location of this policy file. If the keystore
 *       location is absolute, then the 'file:' protocol identifier must
 *       be used; the 'file:' protocol identifier is not required for the
 *       relative case.
 */
keystore "file:${appHome}${/}example${/}common${/}jsse${/}truststore${/}jini-ca.truststore";

/* Code location = the platform jar file
 * Running under = any principal (or none at all)
 * Purpose       = permissions required by the platform to support
 *                 starting and stopping Phoenix. Because this is
 *                 platform code which is not downloaded, ALL
 *                 permissions are granted to this codebase.
 */
grant codebase "file:${jiniHome}${/}lib${/}jsk-platform.jar" {
    permission java.security.AllPermission "", "";
};

grant codeBase "file:${jiniHome}${/}lib${/}jsk-lib.jar" {
    permission java.security.AllPermission;
};

/* Code location = the classpath of Phoenix (phoenix.jar)
 * Running under = any principal (or none at all)
 * Purpose       = permissions required, prior to logging in, by the 
 *                 classes that execute the Phoenix deamon itself
 *
 * This section of permissions corresponds to the following design
 * principle:
 *   "Applications should do as little as possible before executing
 *    under a logged-in Subject. For example, the sort of things
 *    that should typically be allowed for a codebase that is not
 *    yet logged in are:
 *     - get a Configuration
 *     - get a LoginContext from the Configuration
 *     - perform the login
 *     - execute all further actions in a Subject.doAsPrivileged"
 *
 * Thus, the permissions below correspond to actions that the
 * application will perform, using code from its classpath, while 
 * not logged in.
 */
grant codeBase "file:${jiniHome}${/}lib${/}phoenix.jar" {

    permission java.lang.RuntimePermission "accessClassInPackage.sun.rmi.server";
    permission java.lang.RuntimePermission "accessClassInPackage.sun.rmi.transport";
    permission java.lang.RuntimePermission "accessClassInPackage.sun.util.logging.resources";
    permission java.lang.RuntimePermission "getClassLoader";
    permission java.lang.RuntimePermission "getProtectionDomain";

    permission java.io.FilePermission "${config}", "read";
    permission java.io.FilePermission "${appHome}${/}example${/}phoenix${/}jsse${/}config${/}phoenix.config", "read";

    permission javax.security.auth.AuthPermission "createLoginContext.phoenix.jaas.login";
    permission javax.security.auth.AuthPermission "doAsPrivileged";

    permission net.jini.export.ExportPermission "exportRemoteInterface.com.sun.jini.phoenix.Activator";
};

/* Code location = the classpath of Phoenix (phoenix.jar)
 * Running under = the principal identity 'phoenix'
 * Purpose       = permissions required by the classes of Phoenix
 *                 when running as a particular logged in principal
 *
 * This section of permissions corresponds to the second part of the
 * following design principle:
 *   "In policy files, principal-only grants (those without a
 *    codebase), should only be used for granting remote clients 
 *    permission to execute remote methods. For any other type of 
 *    action that is to be performed by a principal executing the
 *    application, the permission to perform that action should
 *    only be granted to principals having an associated codebase."
 *
 * Thus, the permissions below correspond to actions that the
 * application will perform, using code from its classpath, while 
 * logged in as a particular principal identity.
 */
grant codeBase "file:${jiniHome}${/}lib${/}phoenix.jar" principal "phoenix" {

    permission java.lang.reflect.ReflectPermission "suppressAccessChecks";

    permission java.lang.RuntimePermission "accessDeclaredMembers";
    permission java.lang.RuntimePermission "shutdownHooks";

    permission java.io.FilePermission "${java.home}${/}bin${/}java", "execute";
    permission java.io.FilePermission "${jiniHome}${/}-", "read";
    permission java.io.FilePermission "${jiniHome}${/}lib${/}-", "read";
    permission java.io.FilePermission "${appHome}${/}example${/}common${/}jsse${/}truststore${/}jini-ca.truststore", "read";
    permission java.io.FilePermission "${appHome}${/}-", "read";
    permission java.io.FilePermission "${persistDir}",      "read,write,delete";
    permission java.io.FilePermission "${persistDir}${/}-", "read,write,delete";

    permission java.net.SocketPermission "*",                   "resolve";
    permission java.net.SocketPermission "${serverHost}:1024-", "connect";
    permission java.net.SocketPermission "*:1024-",             "accept";

    permission java.util.PropertyPermission "java.home", "read";
    permission java.util.PropertyPermission "java.class.path", "read";
    permission java.util.PropertyPermission "sun.rmi.log.debug", "read";

    permission javax.security.auth.AuthPermission "setReadOnly";
    permission javax.security.auth.AuthPermission "doAs";
    permission javax.security.auth.AuthPermission "getSubject";

    /* This application (the "entity") receives proxies (activation
     * system and activation instantiator) on which it will make
     * secure remote calls. When making such calls on those proxies,
     * the entity will need to authenticate itself as some set of
     * local principals when the peer with which the entity is
     * communicating during those calls authenticates as some set
     * of peer principals. In order for this mutual authentication
     * to occur, a special permission must be granted to the entity.
     *
     * The permission that must be granted to the entity takes the
     * form of an AuthenticationPermission, in which the following
     * requirements must be specified:
     *  - the maximum set of principals the entity is allowed to
     *    authenticate as (the local principals)
     *  - the minimum set of principals that the peer MUST 
     *    authenticate as (the peer principals)
     *  - the action allowed ("connect", "accept", or "delegate");
     *    that is, the type of remote call (outbound or inbound) on
     *    which authentication is allowed, and whether delegation
     *    is allowed during outbound calls.
     *
     * Note that, whereas the entity can authenticate as any subset
     * of the local principals, the peer must authenticate as at
     * least the given set of peer principals (it can authenticate
     * as more than those principals), otherwise a SecurityException
     * will occur.
     *
     * When specifying the action allowed, the "connect" action grants
     * permission to authenticate when making outgoing remote calls;
     * in which case, the entity authenticates as the client, and the
     * peer authenticates as the server. The "accept" action grants
     * permission to authenticate when receiving incoming remote calls;
     * which means that the entity authenticates as the server, and the
     * peer authenticates as the client. Note that the terms 'client' 
     * and 'server', as used here, refer to the sort of connection made 
     * between the entity and the peer; for example, as when a
     * ServerSocket or a client Socket is used in such a connection.
     * Finally, the "delegate" action grants permission to authenticate
     * with (or without) delegation when making outgoing remote calls.
     * Note that if the "delegate" action is specified, the "connect"
     * action is implied and need not be specified explicitly. 
     *
     * Because the entity receives proxies during runtime, and because
     * those proxies are from possibly unknown, remote codebases, 
     * AuthenticationPermission cannot be granted to those proxies 
     * statically, in this file. AuthenticationPermission can only be
     * statically granted in this policy file to the entity itself.
     * AuthenticationPermission must be DYNAMICALLY granted - typically
     * during proxy preparation - to the proxies with which the entitiy
     * communicates. In order for the entity to be able to dynamically
     * grant a permission to a proxy, the entity must first be granted
     * the permission named 'GrantPermission'. When the entity is statically
     * granted a GrantPermission, the name of the permission that can be
     * granted dynamically must also be specified.
     *
     * Below, the first two lines statically grant AuthenticationPermission
     * to the entity itself. The third line statically grants GrantPermission
     * to the entity, specifying that the entity is allowed to dynamically
     * grant AuthenticationPermission.
     *
     * When making a remote call (outbound), the first line below allows the
     * entity to authenticate as itself to a peer that must authenticate as
     * at least the entity; that is, the application's identity - in this
     * case, "phoenix".
     *
     * When receiving an incoming remote call, the second line below
     * allows the entity to authenticate as itself to any peer; that is
     * the peer is not required to authenticate itself during the remote
     * communiation.
     *
     * The third line below indicates that the entity is allowed to
     * dynamically grant AuthenticationPermission to other entities. When
     * granted, that permission allows those other entities to authenticate

     * as the entity (in this case, "phoenix") when attempting to make a
     * remote call to a peer that has authenticated as at least the entity
     * (again, "phoenix").
     *
     * Note that the token '${{self}}' refers to the principal above -
     * "phoenix". For information on how expansion is done in policy files,
     * see the following URL:
     *
     * http://java.sun.com/j2se/1.4/docs/guide/security/PolicyFiles.html#GeneralExp
     *
     */
    permission net.jini.io.context.ContextPermission "net.jini.io.context.ClientSubject.getClientSubject";

    permission net.jini.security.AuthenticationPermission "${{self}}", "accept";
    permission net.jini.security.AuthenticationPermission "${{self}} peer ${{self}}", "connect";
    permission net.jini.security.GrantPermission "delim=| net.jini.security.AuthenticationPermission |${{self}} peer ${{self}}|, |connect|";
};

/* Code location = any code, any location
 * Running under = the principal identity 'phoenix'
 * Purpose       = permissions required by any code running under
 *                 the principal identity 'phoenix'
 *
 * This section of permissions corresponds to the first part of the
 * following design principle:
 *   "In policy files, principal-only grants (those without a
 *    codebase), should only be used for granting remote clients 
 *    permission to execute remote methods. For any other type of 
 *    action that is to be performed by a principal executing the
 *    application, the permission to perform that action should
 *    only be granted to principals having an associated codebase."
 *
 * Thus, the permissions below correspond to remote calls whose 
 * invocations are requested from a foreign VM. 
 *
 * In particular, the ActivationGroupImpl that executes code from
 * phoenix-group.jar in the service's VM, will remotely request the
 * execution of the method activeGroup in phoenix's VM. If the 
 * SystemPermission below is not granted, the execution of that
 * method will not be allowed.
 */
grant principal "phoenix" {

    permission java.io.FilePermission "${jiniHome}${/}lib${/}jsk-lib.jar", "read";

    /* Needed to start/activatate/de-activate/re-activate services
     * in the shared group VM.
     */
    permission com.sun.jini.phoenix.SystemPermission "com.sun.jini.phoenix.activeGroup";
    permission com.sun.jini.phoenix.SystemPermission "java.rmi.activation.ActivationSystem.activeGroup";
    permission com.sun.jini.phoenix.SystemPermission "java.rmi.activation.ActivationSystem.shutdown";
    permission com.sun.jini.phoenix.SystemPermission "getProxyVerifier";

    permission com.sun.jini.phoenix.MonitorPermission "*";

    /* Needed when destroying the shared group VM */
    permission com.sun.jini.phoenix.SystemPermission "unregisterGroup";
    permission com.sun.jini.phoenix.SystemPermission "unregisterObject";
};

/* Code location = any code, any location
 * Running under = the principal identity 'setup'
 * Purpose       = permissions required by any code that performs
 *                 setup tasks for the activatable object(s) that
 *                 will be registered with Phoenix
 *
 * This section of permissions corresponds to the first part of the
 * following design principle:
 *   "In policy files, principal-only grants (those without a
 *    codebase), should only be used for granting remote clients 
 *    permission to execute remote methods. For any other type of 
 *    action that is to be performed by a principal executing the
 *    application, the permission to perform that action should
 *    only be granted to principals having an associated codebase."
 *
 * Thus, the permissions below correspond to remote calls whose 
 * invocations are requested from a foreign VM. 
 *
 * In particular, code running in the setup VMs of each activatable
 * object that will be registered with Phoenix will remotely request
 * the execution - in phoenix's VM - of the various methods referenced
 * below. If the associated SystemPermissions below are not granted, 
 * the execution of the correpsonding method will not be allowed.
 *
 * Additionally, when the code in the setup VM of a particular
 * activatable object registers the object with Phoenix, it supplies
 * a set of system properties to be set on the VM - spawned by
 * Phoenix - in which the activatable object will run. The 
 * ExecOptionPermissions below correspond to the system properties
 * to be set on each such spawned VM corresponding to an activatable
 * object that will be registered with Phoenix. If those permissions
 * are not granted, then when the corresponding system property will
 * not be allowed to be set on the desired VM when it is launched
 * by Phoenix.
 */
grant principal "setup" {

    /* Remote methods to allow to be invoked */
    permission com.sun.jini.phoenix.SystemPermission "getProxyVerifier";
    permission com.sun.jini.phoenix.SystemPermission "registerGroup";
    permission com.sun.jini.phoenix.SystemPermission "registerObject";
    permission com.sun.jini.phoenix.SystemPermission "unregisterGroup";
    permission com.sun.jini.phoenix.SystemPermission "unregisterObject";

    /* System Properties to allow to be set on all VMs */

    permission com.sun.jini.phoenix.ExecOptionPermission "-classpath";
    permission com.sun.jini.phoenix.ExecOptionPermission "-cp";

    permission com.sun.jini.phoenix.ExecOptionPermission "-Djava.security.manager=";
    permission com.sun.jini.phoenix.ExecOptionPermission "-Djava.security.debug=";
    permission com.sun.jini.phoenix.ExecOptionPermission "-Djava.security.debug=none";
    permission com.sun.jini.phoenix.ExecOptionPermission "-Djava.security.debug=off";
    permission com.sun.jini.phoenix.ExecOptionPermission "-Djava.security.debug=all";
    permission com.sun.jini.phoenix.ExecOptionPermission "-Djava.security.debug=access";
    permission com.sun.jini.phoenix.ExecOptionPermission "-Djava.security.debug=failure";
    permission com.sun.jini.phoenix.ExecOptionPermission "-Djava.security.debug=policy";
    permission com.sun.jini.phoenix.ExecOptionPermission "-Djava.security.debug=access,failure";
    permission com.sun.jini.phoenix.ExecOptionPermission "-Djava.security.debug=access,policy";
    permission com.sun.jini.phoenix.ExecOptionPermission "-Djava.security.debug=policy,access";
    permission com.sun.jini.phoenix.ExecOptionPermission "-Djava.security.debug=policy,failure";
    permission com.sun.jini.phoenix.ExecOptionPermission "-Djava.security.debug=policy,access,failure";

    permission com.sun.jini.phoenix.ExecOptionPermission "-Djava.security.auth.login.config=${appHome}${/}example${/}common${/}jsse${/}login${/}setup.login";
    permission com.sun.jini.phoenix.ExecOptionPermission "-Djavax.net.ssl.trustStore=${appHome}${/}example${/}common${/}jsse${/}truststore${/}jini-ca.truststore";
    permission com.sun.jini.phoenix.ExecOptionPermission "-Djava.protocol.handler.pkgs=net.jini.url";
    permission com.sun.jini.phoenix.ExecOptionPermission "-Djava.security.properties=${appHome}${/}example${/}common${/}jsse${/}props${/}dynamic-policy.properties";
    permission com.sun.jini.phoenix.ExecOptionPermission "-Djava.security.properties=${appHome}${/}example${/}common${/}jsse${/}props${/}debug-policy.properties";
    permission com.sun.jini.phoenix.ExecOptionPermission "-Djava.util.logging.manager=com.sun.jini.logging.LogManager";
    permission com.sun.jini.phoenix.ExecOptionPermission "-Djava.util.logging.config.file=${appHome}${/}example${/}common${/}logging${/}phoenix.logging";
    permission com.sun.jini.phoenix.ExecOptionPermission "-Djava.util.logging.config.file=${appHome}${/}example${/}common${/}logging${/}jini.logging";

    permission com.sun.jini.phoenix.ExecOptionPermission "-DserverHost=${serverHost}";
    permission com.sun.jini.phoenix.ExecOptionPermission "-DjiniHome=${jiniHome}";
    permission com.sun.jini.phoenix.ExecOptionPermission "-DappHome=${appHome}";
    permission com.sun.jini.phoenix.ExecOptionPermission "-DpersistDir=${persistDir}";
    permission com.sun.jini.phoenix.ExecOptionPermission "${jiniHome}${/}lib${/}sharedvm.jar";

    permission com.sun.jini.phoenix.ExecOptionPermission "-Djava.security.policy=${jiniHome}${/}policy${/}policy.all";
    permission com.sun.jini.phoenix.ExecOptionPermission "-Djava.security.policy=${appHome}${/}example${/}sharedvm${/}jsse${/}policy${/}sharedvm.policy";

    /* System Properties for Reggie Activatable Object */
    permission com.sun.jini.phoenix.ExecOptionPermission "-DserviceConfig=${appHome}${/}example${/}reggie${/}jsse${/}config${/}activatable-reggie.config";
    permission com.sun.jini.phoenix.ExecOptionPermission "-DserviceConfig=${appHome}${/}example${/}reggie${/}jsse${/}config${/}nonactivatable-reggie.config";
    permission com.sun.jini.phoenix.ExecOptionPermission "-DserviceConfig=${appHome}${/}example${/}reggie${/}jsse${/}config${/}transient-reggie.config";
    permission com.sun.jini.phoenix.ExecOptionPermission "-DserviceClasspath=${jiniHome}${/}lib${/}reggie.jar";
    permission com.sun.jini.phoenix.ExecOptionPermission "-DserviceName=reggie";
    permission com.sun.jini.phoenix.ExecOptionPermission "-DinterfaceName=Registrar";
    permission com.sun.jini.phoenix.ExecOptionPermission "-DimplName=RegistrarImpl";
    permission com.sun.jini.phoenix.ExecOptionPermission "-DimplName=PersistentRegistrarImpl";
    permission com.sun.jini.phoenix.ExecOptionPermission "-DimplName=TransientRegistrarImpl";
    permission com.sun.jini.phoenix.ExecOptionPermission "-DpersistDir=${/}tmp${/}jsse-reggie-log";
    permission com.sun.jini.phoenix.ExecOptionPermission "-DpersistDir=${/}temp${/}jsse-reggie-log";
    permission com.sun.jini.phoenix.ExecOptionPermission "-DpersistDir=C:${/}temp${/}jsse-reggie-log";
    permission com.sun.jini.phoenix.ExecOptionPermission "-DpersistDir=D:${/}temp${/}jsse-reggie-log";
    permission com.sun.jini.phoenix.ExecOptionPermission "-DpersistDir=E:${/}temp${/}jsse-reggie-log";
    permission com.sun.jini.phoenix.ExecOptionPermission "-DpersistDir=${java.io.tmpdir}jsse-reggie-log";
    permission com.sun.jini.phoenix.ExecOptionPermission "${jiniHome}${/}lib${/}reggie.jar";
    permission com.sun.jini.phoenix.ExecOptionPermission "-Djava.security.policy=${appHome}${/}example${/}reggie${/}jsse${/}policy${/}reggie.policy";
    permission com.sun.jini.phoenix.ExecOptionPermission "-Djava.security.auth.login.config=${appHome}${/}example${/}reggie${/}jsse${/}login${/}reggie.login";
    permission com.sun.jini.phoenix.ExecOptionPermission "-Djava.rmi.server.codebase=httpmd://${serverHost}:8080/reggie-dl.jar;sha=* httpmd://${serverHost}:8080/jsk-dl.jar;sha=*";
    permission com.sun.jini.phoenix.ExecOptionPermission "-Djava.rmi.server.codebase=httpmd://${serverHost}:8081/reggie-dl.jar;sha=* httpmd://${serverHost}:8081/jsk-dl.jar;sha=*";
    permission com.sun.jini.phoenix.ExecOptionPermission "-Djava.rmi.server.codebase=httpmd://${serverHost}:8082/reggie-dl.jar;sha=* httpmd://${serverHost}:8082/jsk-dl.jar;sha=*";
    permission com.sun.jini.phoenix.ExecOptionPermission "-Djava.rmi.server.codebase=httpmd://${serverHost}:8083/reggie-dl.jar;sha=* httpmd://${serverHost}:8083/jsk-dl.jar;sha=*";
    permission com.sun.jini.phoenix.ExecOptionPermission "-Djava.rmi.server.codebase=httpmd://${serverHost}:8084/reggie-dl.jar;sha=* httpmd://${serverHost}:8084/jsk-dl.jar;sha=*";
    permission com.sun.jini.phoenix.ExecOptionPermission "-Djava.rmi.server.codebase=httpmd://${serverHost}:8085/reggie-dl.jar;sha=* httpmd://${serverHost}:8085/jsk-dl.jar;sha=*";

    /* System Properties for Mahalo Activatable Object */
    permission com.sun.jini.phoenix.ExecOptionPermission "-DserviceConfig=${appHome}${/}example${/}mahalo${/}jsse${/}config${/}activatable-mahalo.config";
    permission com.sun.jini.phoenix.ExecOptionPermission "-DserviceConfig=${appHome}${/}example${/}mahalo${/}jsse${/}config${/}nonactivatable-mahalo.config";
    permission com.sun.jini.phoenix.ExecOptionPermission "-DserviceConfig=${appHome}${/}example${/}mahalo${/}jsse${/}config${/}transient-mahalo.config";
    permission com.sun.jini.phoenix.ExecOptionPermission "-DserviceClasspath=${jiniHome}${/}lib${/}mahalo.jar";
    permission com.sun.jini.phoenix.ExecOptionPermission "-DserviceName=mahalo";
    permission com.sun.jini.phoenix.ExecOptionPermission "-DinterfaceName=TxnManager";
    permission com.sun.jini.phoenix.ExecOptionPermission "-DimplName=TxnManagerImpl";
    permission com.sun.jini.phoenix.ExecOptionPermission "-DimplName=ActivatableMahaloImpl";
    permission com.sun.jini.phoenix.ExecOptionPermission "-DimplName=NonActivatableMahaloImpl";
    permission com.sun.jini.phoenix.ExecOptionPermission "-DimplName=TransientMahaloImpl";
    permission com.sun.jini.phoenix.ExecOptionPermission "-DpersistDir=${/}tmp${/}jsse-mahalo-log";
    permission com.sun.jini.phoenix.ExecOptionPermission "-DpersistDir=${/}temp${/}jsse-mahalo-log";
    permission com.sun.jini.phoenix.ExecOptionPermission "-DpersistDir=C:${/}temp${/}jsse-mahalo-log";
    permission com.sun.jini.phoenix.ExecOptionPermission "-DpersistDir=D:${/}temp${/}jsse-mahalo-log";
    permission com.sun.jini.phoenix.ExecOptionPermission "-DpersistDir=E:${/}temp${/}jsse-mahalo-log";
    permission com.sun.jini.phoenix.ExecOptionPermission "-DpersistDir=${java.io.tmpdir}jsse-mahalo-log";
    permission com.sun.jini.phoenix.ExecOptionPermission "${jiniHome}${/}lib${/}mahalo.jar";
    permission com.sun.jini.phoenix.ExecOptionPermission "-Djava.security.policy=${appHome}${/}example${/}mahalo${/}jsse${/}policy${/}mahalo.policy";
    permission com.sun.jini.phoenix.ExecOptionPermission "-Djava.security.auth.login.config=${appHome}${/}example${/}mahalo${/}jsse${/}login${/}mahalo.login";
    permission com.sun.jini.phoenix.ExecOptionPermission "-Djava.rmi.server.codebase=httpmd://${serverHost}:8080/mahalo-dl.jar;sha=* httpmd://${serverHost}:8080/jsk-dl.jar;sha=*";
    permission com.sun.jini.phoenix.ExecOptionPermission "-Djava.rmi.server.codebase=httpmd://${serverHost}:8081/mahalo-dl.jar;sha=* httpmd://${serverHost}:8081/jsk-dl.jar;sha=*";
    permission com.sun.jini.phoenix.ExecOptionPermission "-Djava.rmi.server.codebase=httpmd://${serverHost}:8082/mahalo-dl.jar;sha=* httpmd://${serverHost}:8082/jsk-dl.jar;sha=*";
    permission com.sun.jini.phoenix.ExecOptionPermission "-Djava.rmi.server.codebase=httpmd://${serverHost}:8083/mahalo-dl.jar;sha=* httpmd://${serverHost}:8083/jsk-dl.jar;sha=*";
    permission com.sun.jini.phoenix.ExecOptionPermission "-Djava.rmi.server.codebase=httpmd://${serverHost}:8084/mahalo-dl.jar;sha=* httpmd://${serverHost}:8084/jsk-dl.jar;sha=*";
    permission com.sun.jini.phoenix.ExecOptionPermission "-Djava.rmi.server.codebase=httpmd://${serverHost}:8085/mahalo-dl.jar;sha=* httpmd://${serverHost}:8085/jsk-dl.jar;sha=*";

    /* System Properties for Fiddler Activatable Object */
    permission com.sun.jini.phoenix.ExecOptionPermission "-DserviceConfig=${appHome}${/}example${/}fiddler${/}jsse${/}config${/}activatable-fiddler.config";
    permission com.sun.jini.phoenix.ExecOptionPermission "-DserviceConfig=${appHome}${/}example${/}fiddler${/}jsse${/}config${/}nonactivatable-fiddler.config";
    permission com.sun.jini.phoenix.ExecOptionPermission "-DserviceConfig=${appHome}${/}example${/}fiddler${/}jsse${/}config${/}transient-fiddler.config";
    permission com.sun.jini.phoenix.ExecOptionPermission "-DserviceClasspath=${jiniHome}${/}lib${/}fiddler.jar";
    permission com.sun.jini.phoenix.ExecOptionPermission "-DserviceName=fiddler";
    permission com.sun.jini.phoenix.ExecOptionPermission "-DinterfaceName=Fiddler";
    permission com.sun.jini.phoenix.ExecOptionPermission "-DimplName=FiddlerImpl";
    permission com.sun.jini.phoenix.ExecOptionPermission "-DimplName=ActivatableFiddlerImpl";
    permission com.sun.jini.phoenix.ExecOptionPermission "-DimplName=NonActivatableFiddlerImpl";
    permission com.sun.jini.phoenix.ExecOptionPermission "-DimplName=TransientFiddlerImpl";
    permission com.sun.jini.phoenix.ExecOptionPermission "-DpersistDir=${/}tmp${/}jsse-fiddler-log";
    permission com.sun.jini.phoenix.ExecOptionPermission "-DpersistDir=${/}temp${/}jsse-fiddler-log";
    permission com.sun.jini.phoenix.ExecOptionPermission "-DpersistDir=C:${/}temp${/}jsse-fiddler-log";
    permission com.sun.jini.phoenix.ExecOptionPermission "-DpersistDir=D:${/}temp${/}jsse-fiddler-log";
    permission com.sun.jini.phoenix.ExecOptionPermission "-DpersistDir=E:${/}temp${/}jsse-fiddler-log";
    permission com.sun.jini.phoenix.ExecOptionPermission "-DpersistDir=${java.io.tmpdir}jsse-fiddler-log";
    permission com.sun.jini.phoenix.ExecOptionPermission "${jiniHome}${/}lib${/}fiddler.jar";
    permission com.sun.jini.phoenix.ExecOptionPermission "-Djava.security.policy=${appHome}${/}example${/}fiddler${/}jsse${/}policy${/}fiddler.policy";
    permission com.sun.jini.phoenix.ExecOptionPermission "-Djava.security.auth.login.config=${appHome}${/}example${/}fiddler${/}jsse${/}login${/}fiddler.login";
    permission com.sun.jini.phoenix.ExecOptionPermission "-Djava.rmi.server.codebase=httpmd://${serverHost}:8080/fiddler-dl.jar;sha=* httpmd://${serverHost}:8080/jsk-dl.jar;sha=*";
    permission com.sun.jini.phoenix.ExecOptionPermission "-Djava.rmi.server.codebase=httpmd://${serverHost}:8081/fiddler-dl.jar;sha=* httpmd://${serverHost}:8081/jsk-dl.jar;sha=*";
    permission com.sun.jini.phoenix.ExecOptionPermission "-Djava.rmi.server.codebase=httpmd://${serverHost}:8082/fiddler-dl.jar;sha=* httpmd://${serverHost}:8082/jsk-dl.jar;sha=*";
    permission com.sun.jini.phoenix.ExecOptionPermission "-Djava.rmi.server.codebase=httpmd://${serverHost}:8083/fiddler-dl.jar;sha=* httpmd://${serverHost}:8083/jsk-dl.jar;sha=*";
    permission com.sun.jini.phoenix.ExecOptionPermission "-Djava.rmi.server.codebase=httpmd://${serverHost}:8084/fiddler-dl.jar;sha=* httpmd://${serverHost}:8084/jsk-dl.jar;sha=*";
    permission com.sun.jini.phoenix.ExecOptionPermission "-Djava.rmi.server.codebase=httpmd://${serverHost}:8085/fiddler-dl.jar;sha=* httpmd://${serverHost}:8085/jsk-dl.jar;sha=*";

    /* System Properties for Norm Activatable Object */
    permission com.sun.jini.phoenix.ExecOptionPermission "-DserviceConfig=${appHome}${/}example${/}norm${/}jsse${/}config${/}activatable-norm.config";
    permission com.sun.jini.phoenix.ExecOptionPermission "-DserviceConfig=${appHome}${/}example${/}norm${/}jsse${/}config${/}nonactivatable-norm.config";
    permission com.sun.jini.phoenix.ExecOptionPermission "-DserviceConfig=${appHome}${/}example${/}norm${/}jsse${/}config${/}transient-norm.config";
    permission com.sun.jini.phoenix.ExecOptionPermission "-DserviceClasspath=${jiniHome}${/}lib${/}norm.jar";
    permission com.sun.jini.phoenix.ExecOptionPermission "-DserviceName=norm";
    permission com.sun.jini.phoenix.ExecOptionPermission "-DinterfaceName=NormServer";
    permission com.sun.jini.phoenix.ExecOptionPermission "-DimplName=NormServerBaseImpl";
    permission com.sun.jini.phoenix.ExecOptionPermission "-DimplName=ActivatableNormServerImpl";
    permission com.sun.jini.phoenix.ExecOptionPermission "-DimplName=PersistentNormServerImpl";
    permission com.sun.jini.phoenix.ExecOptionPermission "-DimplName=TransientNormServerImpl";
    permission com.sun.jini.phoenix.ExecOptionPermission "-DpersistDir=${/}tmp${/}jsse-norm-log";
    permission com.sun.jini.phoenix.ExecOptionPermission "-DpersistDir=${/}temp${/}jsse-norm-log";
    permission com.sun.jini.phoenix.ExecOptionPermission "-DpersistDir=C:${/}temp${/}jsse-norm-log";
    permission com.sun.jini.phoenix.ExecOptionPermission "-DpersistDir=D:${/}temp${/}jsse-norm-log";
    permission com.sun.jini.phoenix.ExecOptionPermission "-DpersistDir=E:${/}temp${/}jsse-norm-log";
    permission com.sun.jini.phoenix.ExecOptionPermission "-DpersistDir=${java.io.tmpdir}jsse-norm-log";
    permission com.sun.jini.phoenix.ExecOptionPermission "${jiniHome}${/}lib${/}norm.jar";
    permission com.sun.jini.phoenix.ExecOptionPermission "-Djava.security.policy=${appHome}${/}example${/}norm${/}jsse${/}policy${/}norm.policy";
    permission com.sun.jini.phoenix.ExecOptionPermission "-Djava.security.auth.login.config=${appHome}${/}example${/}norm${/}jsse${/}login${/}norm.login";
    permission com.sun.jini.phoenix.ExecOptionPermission "-Djava.rmi.server.codebase=httpmd://${serverHost}:8080/norm-dl.jar;sha=* httpmd://${serverHost}:8080/jsk-dl.jar;sha=*";
    permission com.sun.jini.phoenix.ExecOptionPermission "-Djava.rmi.server.codebase=httpmd://${serverHost}:8081/norm-dl.jar;sha=* httpmd://${serverHost}:8081/jsk-dl.jar;sha=*";
    permission com.sun.jini.phoenix.ExecOptionPermission "-Djava.rmi.server.codebase=httpmd://${serverHost}:8082/norm-dl.jar;sha=* httpmd://${serverHost}:8082/jsk-dl.jar;sha=*";
    permission com.sun.jini.phoenix.ExecOptionPermission "-Djava.rmi.server.codebase=httpmd://${serverHost}:8083/norm-dl.jar;sha=* httpmd://${serverHost}:8083/jsk-dl.jar;sha=*";
    permission com.sun.jini.phoenix.ExecOptionPermission "-Djava.rmi.server.codebase=httpmd://${serverHost}:8084/norm-dl.jar;sha=* httpmd://${serverHost}:8084/jsk-dl.jar;sha=*";
    permission com.sun.jini.phoenix.ExecOptionPermission "-Djava.rmi.server.codebase=httpmd://${serverHost}:8085/norm-dl.jar;sha=* httpmd://${serverHost}:8085/jsk-dl.jar;sha=*";

    /* System Properties for Mercury Activatable Object */
    permission com.sun.jini.phoenix.ExecOptionPermission "-DserviceConfig=${appHome}${/}example${/}mercury${/}jsse${/}config${/}activatable-mercury.config";
    permission com.sun.jini.phoenix.ExecOptionPermission "-DserviceConfig=${appHome}${/}example${/}mercury${/}jsse${/}config${/}nonactivatable-mercury.config";
    permission com.sun.jini.phoenix.ExecOptionPermission "-DserviceConfig=${appHome}${/}example${/}mercury${/}jsse${/}config${/}transient-mercury.config";
    permission com.sun.jini.phoenix.ExecOptionPermission "-DserviceClasspath=${jiniHome}${/}lib${/}mercury.jar";
    permission com.sun.jini.phoenix.ExecOptionPermission "-DserviceName=mercury";
    permission com.sun.jini.phoenix.ExecOptionPermission "-DinterfaceName=MailboxBackEnd";
    permission com.sun.jini.phoenix.ExecOptionPermission "-DimplName=MailboxImpl";
    permission com.sun.jini.phoenix.ExecOptionPermission "-DimplName=ActivatableMercuryImpl";
    permission com.sun.jini.phoenix.ExecOptionPermission "-DimplName=NonActivatableMercuryImpl";
    permission com.sun.jini.phoenix.ExecOptionPermission "-DimplName=TransientMercuryImpl";
    permission com.sun.jini.phoenix.ExecOptionPermission "-DpersistDir=${/}tmp${/}jsse-mercury-log";
    permission com.sun.jini.phoenix.ExecOptionPermission "-DpersistDir=${/}temp${/}jsse-mercury-log";
    permission com.sun.jini.phoenix.ExecOptionPermission "-DpersistDir=C:${/}temp${/}jsse-mercury-log";
    permission com.sun.jini.phoenix.ExecOptionPermission "-DpersistDir=D:${/}temp${/}jsse-mercury-log";
    permission com.sun.jini.phoenix.ExecOptionPermission "-DpersistDir=E:${/}temp${/}jsse-mercury-log";
    permission com.sun.jini.phoenix.ExecOptionPermission "-DpersistDir=${java.io.tmpdir}jsse-mercury-log";
    permission com.sun.jini.phoenix.ExecOptionPermission "${jiniHome}${/}lib${/}mercury.jar";
    permission com.sun.jini.phoenix.ExecOptionPermission "-Djava.security.policy=${appHome}${/}example${/}mercury${/}jsse${/}policy${/}mercury.policy";
    permission com.sun.jini.phoenix.ExecOptionPermission "-Djava.security.auth.login.config=${appHome}${/}example${/}mercury${/}jsse${/}login${/}mercury.login";
    permission com.sun.jini.phoenix.ExecOptionPermission "-Djava.rmi.server.codebase=httpmd://${serverHost}:8080/mercury-dl.jar;sha=* httpmd://${serverHost}:8080/jsk-dl.jar;sha=*";
    permission com.sun.jini.phoenix.ExecOptionPermission "-Djava.rmi.server.codebase=httpmd://${serverHost}:8081/mercury-dl.jar;sha=* httpmd://${serverHost}:8081/jsk-dl.jar;sha=*";
    permission com.sun.jini.phoenix.ExecOptionPermission "-Djava.rmi.server.codebase=httpmd://${serverHost}:8082/mercury-dl.jar;sha=* httpmd://${serverHost}:8082/jsk-dl.jar;sha=*";
    permission com.sun.jini.phoenix.ExecOptionPermission "-Djava.rmi.server.codebase=httpmd://${serverHost}:8083/mercury-dl.jar;sha=* httpmd://${serverHost}:8083/jsk-dl.jar;sha=*";
    permission com.sun.jini.phoenix.ExecOptionPermission "-Djava.rmi.server.codebase=httpmd://${serverHost}:8084/mercury-dl.jar;sha=* httpmd://${serverHost}:8084/jsk-dl.jar;sha=*";
    permission com.sun.jini.phoenix.ExecOptionPermission "-Djava.rmi.server.codebase=httpmd://${serverHost}:8085/mercury-dl.jar;sha=* httpmd://${serverHost}:8085/jsk-dl.jar;sha=*";

    /* System Properties for Outrigger Activatable Object */
    permission com.sun.jini.phoenix.ExecOptionPermission "-DserviceConfig=${appHome}${/}example${/}outrigger${/}jsse${/}config${/}activatable-outrigger.config";
    permission com.sun.jini.phoenix.ExecOptionPermission "-DserviceConfig=${appHome}${/}example${/}outrigger${/}jsse${/}config${/}nonactivatable-outrigger.config";
    permission com.sun.jini.phoenix.ExecOptionPermission "-DserviceConfig=${appHome}${/}example${/}outrigger${/}jsse${/}config${/}transient-outrigger.config";
    permission com.sun.jini.phoenix.ExecOptionPermission "-DserviceClasspath=${jiniHome}${/}lib${/}outrigger.jar";
    permission com.sun.jini.phoenix.ExecOptionPermission "-DserviceName=outrigger";
    permission com.sun.jini.phoenix.ExecOptionPermission "-DinterfaceName=OutriggerServer";
    permission com.sun.jini.phoenix.ExecOptionPermission "-DimplName=OutriggerServerImpl";
    permission com.sun.jini.phoenix.ExecOptionPermission "-DimplName=PersistentOutriggerImpl";
    permission com.sun.jini.phoenix.ExecOptionPermission "-DimplName=TransientOutriggerImpl";
    permission com.sun.jini.phoenix.ExecOptionPermission "-DpersistDir=${/}tmp${/}jsse-outrigger-log";
    permission com.sun.jini.phoenix.ExecOptionPermission "-DpersistDir=${/}temp${/}jsse-outrigger-log";
    permission com.sun.jini.phoenix.ExecOptionPermission "-DpersistDir=C:${/}temp${/}jsse-outrigger-log";
    permission com.sun.jini.phoenix.ExecOptionPermission "-DpersistDir=D:${/}temp${/}jsse-outrigger-log";
    permission com.sun.jini.phoenix.ExecOptionPermission "-DpersistDir=E:${/}temp${/}jsse-outrigger-log";
    permission com.sun.jini.phoenix.ExecOptionPermission "-DpersistDir=${java.io.tmpdir}jsse-outrigger-log";
    permission com.sun.jini.phoenix.ExecOptionPermission "${jiniHome}${/}lib${/}outrigger.jar";
    permission com.sun.jini.phoenix.ExecOptionPermission "${jiniHome}${/}lib${/}outrigger-logstore.jar";
    permission com.sun.jini.phoenix.ExecOptionPermission "-Djava.security.policy=${appHome}${/}example${/}outrigger${/}jsse${/}policy${/}outrigger.policy";
    permission com.sun.jini.phoenix.ExecOptionPermission "-Djava.security.auth.login.config=${appHome}${/}example${/}outrigger${/}jsse${/}login${/}outrigger.login";
    permission com.sun.jini.phoenix.ExecOptionPermission "-Djava.rmi.server.codebase=httpmd://${serverHost}:8080/outrigger-dl.jar;sha=* httpmd://${serverHost}:8080/jsk-dl.jar;sha=*";
    permission com.sun.jini.phoenix.ExecOptionPermission "-Djava.rmi.server.codebase=httpmd://${serverHost}:8081/outrigger-dl.jar;sha=* httpmd://${serverHost}:8081/jsk-dl.jar;sha=*";
    permission com.sun.jini.phoenix.ExecOptionPermission "-Djava.rmi.server.codebase=httpmd://${serverHost}:8082/outrigger-dl.jar;sha=* httpmd://${serverHost}:8082/jsk-dl.jar;sha=*";
    permission com.sun.jini.phoenix.ExecOptionPermission "-Djava.rmi.server.codebase=httpmd://${serverHost}:8083/outrigger-dl.jar;sha=* httpmd://${serverHost}:8083/jsk-dl.jar;sha=*";
    permission com.sun.jini.phoenix.ExecOptionPermission "-Djava.rmi.server.codebase=httpmd://${serverHost}:8084/outrigger-dl.jar;sha=* httpmd://${serverHost}:8084/jsk-dl.jar;sha=*";
    permission com.sun.jini.phoenix.ExecOptionPermission "-Djava.rmi.server.codebase=httpmd://${serverHost}:8085/outrigger-dl.jar;sha=* httpmd://${serverHost}:8085/jsk-dl.jar;sha=*";
};

/* Code location = any code, any location
 * Running under = the principal identity 'reggie', 'mahalo',
 *                 'fiddler', 'norm', 'mercury', or 'outrigger'
 * Purpose       = permissions required by the contributed services,
 *                 running under the above principal identies, in
 *                 order for each service to unregister itself with
 *                 Phoenix; typically when the service is being destroyed 
 *                 through the service's destroy() method, as specified
 *                 by the interface DestroyAdmin.
 */
grant principal "reggie" {
    permission com.sun.jini.phoenix.SystemPermission "net.jini.security.proxytrust.ProxyTrust.getProxyVerifier";
    permission com.sun.jini.phoenix.SystemPermission "java.rmi.activation.ActivationSystem.unregisterObject";
};

grant principal "mahalo" {
    permission com.sun.jini.phoenix.SystemPermission "net.jini.security.proxytrust.ProxyTrust.getProxyVerifier";
    permission com.sun.jini.phoenix.SystemPermission "java.rmi.activation.ActivationSystem.unregisterObject";
};

grant principal "fiddler" {
    permission com.sun.jini.phoenix.SystemPermission "net.jini.security.proxytrust.ProxyTrust.getProxyVerifier";
    permission com.sun.jini.phoenix.SystemPermission "java.rmi.activation.ActivationSystem.unregisterObject";
};

grant principal "norm" {
    permission com.sun.jini.phoenix.SystemPermission "net.jini.security.proxytrust.ProxyTrust.getProxyVerifier";
    permission com.sun.jini.phoenix.SystemPermission "java.rmi.activation.ActivationSystem.unregisterObject";
};

grant principal "mercury" {
    permission com.sun.jini.phoenix.SystemPermission "net.jini.security.proxytrust.ProxyTrust.getProxyVerifier";
    permission com.sun.jini.phoenix.SystemPermission "java.rmi.activation.ActivationSystem.unregisterObject";
};

grant principal "outrigger" {
    permission com.sun.jini.phoenix.SystemPermission "net.jini.security.proxytrust.ProxyTrust.getProxyVerifier";
    permission com.sun.jini.phoenix.SystemPermission "java.rmi.activation.ActivationSystem.unregisterObject";
};

/* The following set of permissions are granted to code that satisfies
 * the following:
 *  - is from any codebase
 *  - is logged in as any principal identity, or is not logged in at all. 
 * 
 * That is, the actions in this section can be performed by any
 * code, from any location. Generally, this section should allow
 * only basic permissions such as the reading of certain, 
 * standard system properties that are set on the command line
 * when starting the application. For example,
 *  -Dconfig, -DpersistDir, -DserverHost, -DjiniHome, -DappHome
 */
grant {
    permission java.util.PropertyPermission "config",       "read";
    permission java.util.PropertyPermission "groupConfig",  "read";
    permission java.util.PropertyPermission "persistDir",   "read";
    permission java.util.PropertyPermission "serverHost",   "read";
    permission java.util.PropertyPermission "phoenixPort",  "read";
    permission java.util.PropertyPermission "jiniHome",     "read";
    permission java.util.PropertyPermission "appHome",      "read";
};

