/* Configuration file containing entries used to configure 
 * an implementation of Phoenix to use secure JERI/jsse
 * for remote communication.
 *
 * When using this config file on the Phoenix command line,
 * the following system properties should be set on the
 * command line:
 *
 *  -Djava.security.manager
 *  -Djava.security.policy
 *  -Djava.rmi.server.codebase
 *  -Djava.security.auth.login.config
 *  -Djavax.net.ssl.trustStore
 *  -Djava.protocol.handler.pkgs
 *  -Djava.security.properties
 *  -Djava.util.logging.manager
 *  -Djava.util.logging.config.file
 *  -Djava.security.debug (optional)
 *  -Dconfig      (THIS config file)
 *  -DgroupConfig (activation instantiator config file)
 *  -DserverHost  (host running phoenix)
 *  -DphoenixPort (port phoenix's registry listens on)
 *  -DpersistDir  (state persistence directory, ex. /var/tmp, c:\\home\\temp)
 *  -DjiniHome    (base install directory for Jini, ex. /vob/jive, c:\\jini2_0)
 *  -DappHome     (base install directory for examples, ex. /home/tests, c:\\tests)
 *
 * Below is an example command line on unix, that starts 
 * Phoenix. Carriage returns are inserted for readability:
 * 
 * > /export/home/j2sdk1.4.1_01/bin/java
 *    -Djava.security.manager= 
 *    -Djava.security.policy=<jini-install-dir>/example/phoenix/jsse/policy/phoenix.policy
 *    -Djava.rmi.server.codebase=httpmd://<hostname>:8080/phoenix-dl.jar\;sha=<output of com.sun.jini.tool.ComputeHttpmdCodebase>
 *    -Djava.security.auth.login.config=<jini-install-dir>/example/phoenix/jsse/login/phoenix.login
 *    -Djavax.net.ssl.trustStore=<jini-install-dir>/example/common/jsse/truststore/jini-ca.truststore
 *    -Djava.protocol.handler.pkgs=net.jini.url
 *    -Djava.security.properties=<jini-install-dir>/example/common/jsse/props/dynamic-policy.properties
 *    -Djava.util.logging.manager=com.sun.jini.logging.LogManager
 *    -Djava.util.logging.config.file=<jini-install-dir>/example/common/logging/phoenix.logging
 *    -Dconfig=<jini-install-dir>/example/phoenix/jsse/config/phoenix.config
 *    -DgroupConfig=<jini-install-dir>/example/phoenix/jsse/config/phoenix-group.config
 *    -DserverHost=<hostname>
 *    -DphoenixPort=2000
 *    -DpersistDir=/tmp/jsse-phoenix-log
 *    -DjiniHome=<jini-install-dir>
 *    -DappHome=<example-install-dir>
 *        -jar <jini-install-dir>/lib/phoenix.jar <example-install-dir>/example/phoenix/jsse/config/phoenix.config
 * 
 * Note that the message digest value included in the codebase
 * above is computed by executing the following:
 *
 * > /export/home/j2sdk1.4.1_01/bin/java -cp <jini-install-dir>/lib/tools.jar
 *     com.sun.jini.tool.ComputeHttpmdCodebase
 *     <jini-install-dir>/lib
 *     httpmd://<hostname>:8080/phoenix-dl.jar\;sha=0
 *
 * where, 
 *  -- <jini-install-dir> is the base install directory of Jini
 *  -- ComputeHttpmdCodebase is the class being executed
 *  -- <jini-install-dir>/lib is source dirctory required by
 *     ComputeHttpmdCodebase
 *  -- httpmd://<hostname>:8080/phoenix-dl.jar\;sha=0 is the
 *     codebase and algorithm to use
 *
 * The string that is output by ComputeHttpmdCodebase should
 * then be copied into the codebase entry of the Phoenix
 * command line. Also note that the back-slash before the
 * semicolon in both the command line for ComputeHttpmdCodebase
 * and for Phoenix is a required escape character.
 *
 * Note that Phoenix exports four remote objects:
 *  - registry
 *  - activation system
 *  - activator
 *  - activation monitor
 * Each such object is exported using an Exporter obtained
 * from this configuration file. Phoenix provides various
 * classes to facilitate the configuration of these exporters,
 * as shown below. None of the remote objects implement any
 * access control directly; any desired access control must
 * be implemented through the exporters for those objects
 * that are specified in this configuration.
 *
 * For example, recall that each exporter will use a factory 
 * (supplied to the exporter) to generate client-side invocation
 * handlers that will be used in secure dynamic proxies to
 * execute calls to secure remote objects; and to also generate
 * server-side dispatchers used to receive those incoming remote
 * calls from the dynamic proxies. 
 */
import com.sun.jini.config.KeyStores;

import com.sun.jini.phoenix.MonitorPermission;
import com.sun.jini.phoenix.PhoenixConstants;
import com.sun.jini.phoenix.RegistrySunExporter;
import com.sun.jini.phoenix.SystemAccessProxyTrustILFactory;

import net.jini.core.constraint.Integrity;
import net.jini.core.constraint.InvocationConstraint;
import net.jini.core.constraint.InvocationConstraints;
import net.jini.core.constraint.ServerAuthentication;
import net.jini.core.constraint.ServerMinPrincipal;

import net.jini.security.AuthenticationPermission;
import net.jini.constraint.BasicMethodConstraints;
import net.jini.security.BasicProxyPreparer;

import net.jini.jeri.BasicJeriExporter;
import net.jini.jeri.ProxyTrustILFactory;

import net.jini.jeri.ssl.SslServerEndpoint;

import javax.security.auth.login.LoginContext;

import java.security.Permission;
import java.util.Collections;

com.sun.jini.phoenix {

    /* Public Key Certificate(s) ------------------------------------------------ */

    /* Retrieve from the configuration, the location of the truststore 
     * containing the public key certificates associated with the various
     * entities in the system.
     */
    private static caTruststore = KeyStores.getKeyStore("${appHome}${/}example${/}common${/}jsse${/}truststore${/}jini-ca.truststore", null);

    /* Retrieve from the truststore above, the public key certificate 
     * associated with Phoenix.
     */
    private static phoenixPublicKeyCert = Collections.singleton(KeyStores.getX500Principal("phoenix", caTruststore));

    /* Exporter(s) -------------------------------------------------------------- */

    /* Default registry port is 1099. Pick a new port to avoid conflicts.
     * Then create the exporter to use to export the registry employed
     * by Phoenix. Configure that exporter to export the registry in
     * in the following way:
     *  - export the registry on the given port
     */
    registryPort = Integer.parseInt("${phoenixPort}");
    registryExporter = new RegistrySunExporter(registryPort);

    /* Default rmid port is 1098. Pick a new port to avoid conflicts.
     * Then create a secure endpoint for Phoenix that listens on that
     * port.
     */
    private sslPort = 2001;
    private daemonEndpoint = SslServerEndpoint.getInstance(sslPort);

    /* Create the per-method constraints to apply to the remote methods called
     * on the activation system. Require the following when a client attempts to
     * make a remote call on the activation system:
     *  - integrity of the call (verify no one corrupts the call)
     */
    private activationSystemConstraints
         = new BasicMethodConstraints( new InvocationConstraints
                                           ( new InvocationConstraint[]{ Integrity.YES },
                                             null)
                                     );

    /* Create the exporter to use to export the activation system. Configure
     * the exporter to export the activation system in the following way:
     *  - use secure JERI/jsse for remote communciation
     *  - when accepting network connections, use the endpoint specified
     *    above
     *  - generate a secure dynamic proxy to the object exported by
     *    this exporter
     *  - use an invocation layer factory with the following
     *    characteristics:
     *    o generates a dynamic proxy that uses JERI for remote
     *      communication, and additionally implements the ProxyTrust
     *      interface
     *    o exports only instances of ActivationSystem
     *    o with respect to the dynamic proxy generated by the
     *      exporter, this invocation layer factory generates the 
     *      client-side invocation handler used in that proxy to execute
     *      calls to the remote object (ActivationSystem) that is
     *      exported by this exporter
     *    o generates the server-side dispatcher used to receive the
     *      incoming remote (or, optionally local) calls from the
     *      client-side invocation handler to the object exported by
     *      this exporter; a dispatcher which (optionally) enforces a
     *      GroupPolicy on calls to registerGroup and setActivationGroupDesc
     *  - apply the constraints specified above when a client attempts
     *    to make a call to a remote method on the exported object
     *  - disable distributed garbage collection (DGC) to the remote
     *    object to be exported. This causes the object to be exported
     *    to be strongly referenced by the JERI runtime when it is
     *    exported. (Because of the potential for denial of service
     *    attacks, enabling DGC to secure remote objects is, in general,
     *    strongly discouraged.) 
     *  - while the remote object to be exported remains exported via
     *    this exporter, keep the virtual machine alive
     *  - use PhoenixConstants.ACTIVATION_SYSTEM_UUID as the object
     *    identifier for the remote object to be exported.
     */
    systemExporter = new BasicJeriExporter(daemonEndpoint,
                                                 new SystemAccessProxyTrustILFactory(activationSystemConstraints),
                                                 false,
                                                 true,
                                                 PhoenixConstants.ACTIVATION_SYSTEM_UUID);

    /* Create the exporter to use to export the activator. Configure the
     * exporter to export the activator in the following way:
     *  - use secure JERI/jsse for remote communciation
     *  - when accepting network connections, use the endpoint specified
     *    above
     *  - generate a secure dynamic proxy to the object exported by
     *    this exporter that, through the implementation of the ProxyTrust
     *    interface, provides a mechanism for obtaining a trust verifier
     *    for the proxy
     *  - use an invocation layer factory with the following
     *    characteristics:
     *    o generates a dynamic proxy that uses JERI for remote
     *      communication, and additionally implements the ProxyTrust
     *      interface
     *    o with respect to the dynamic proxy generated by the
     *      exporter, this invocation layer factory generates the
     *      client-side invocation handler used in that proxy to execute
     *      calls to the remote object that is exported by this
     *      exporter
     *    o generates the server-side dispatcher used to receive the
     *      incoming remote calls from the client-side invocation
     *      handler to the object exported by this exporter
     *  - no constraint should be applied when a client attempts
     *    to make a call to a remote method on the exported object
     *  - disable distributed garbage collection (DGC) to the remote
     *    object to be exported.
     *  - while the remote object to be exported remains exported via
     *    this exporter, keep the virtual machine alive
     *  - use the object number for the well-known object identifier
     *    of the activator (PhoenixConstants.ACTIVATOR_UUID)
     */
    activatorExporter
     = new BasicJeriExporter(daemonEndpoint,
                                   new ProxyTrustILFactory(null,null),
                                   false,
                                   true,
                                   PhoenixConstants.ACTIVATOR_UUID);

    /* Create the per-method constraints to apply to the remote methods called
     * on the activation monitor. Require the following when a client attempts
     * to make a remote call on that object:
     *  - integrity of the call (verify no one corrupts the call)
     */
    private activationConstraints
         = new BasicMethodConstraints( new InvocationConstraints
                                           ( new InvocationConstraint[]{ Integrity.YES },
                                             null)
                                     );

    /* Create the exporter to use to export the activation monitor. Configure
     * the exporter to export the activation monitor in the following way:
     *  - use secure JERI/jsse for remote communciation
     *  - when accepting network connections, use the endpoint specified
     *    above
     *  - generate a secure dynamic proxy to the object exported by
     *    this exporter
     *  - use a unicast invocation layer factory with the following
     *    characteristics:
     *    o generates a dynamic proxy that uses JERI for remote
     *      communication, and additionally implements the ProxyTrust
     *      interface
     *    o with respect to the dynamic proxy generated by the
     *      exporter, this invocation layer factory generates the
     *      client-side invocation handler used in that proxy to execute
     *      calls to the remote object that is exported by this
     *      exporter
     *    o generates the server-side dispatcher used to receive the
     *      incoming remote calls from the client-side invocation
     *      handler to the object exported by this exporter
     *    o grants the specified permission to the dispatcher so that
     *      it may perform automatic permission-based access control on
     *      incoming remote calls
     *    o applies the constraints specified above when a client attempts
     *      to make a call to a remote method on the exported object
     */
    monitorExporter
     = new BasicJeriExporter(daemonEndpoint,
                             new ProxyTrustILFactory(activationConstraints,
                                                     MonitorPermission.class)
                            );

    /* Proxy Preparer(s) -------------------------------------------------------- */

    /* Create a set of security constraints to apply under the following
     * circumstances:
     *  - when the activation system or the activation monitor prepares
     *    a proxy, trust in that proxy is verified using the constraints
     *    specified here.
     *
     * The constraints specified here require the following when a client
     * attempts to make a remote call:
     *  - integrity of the call (verify no one corrupts the call)
     *  - authenticate the server receiving the call
     *  - when it authenticates itself, require that the server authenticate
     *    itself as at least all of the specified principals; in the case
     *    below, as the alias "phoenix". Note that the mechanisms and credentials
     *    used to authenticate the server as that principal are not specified
     *    here. 
     */
    private mutualAuthenticationConstraints
         = new BasicMethodConstraints( new InvocationConstraints
                                           ( new InvocationConstraint[]{ Integrity.YES,
                                                                         ServerAuthentication.YES,
                                                                         new ServerMinPrincipal(phoenixPublicKeyCert)
                                                                       },
                                             null)
                                     );

    /* Create the proxy preparer Phoenix should use to prepare proxies
     * to the activation instantiator. This preparer should verify trust
     * in those proxies using the constraints specified above. And it
     * should grant to those proxies the following permission(s):
     *
     * When requesting a connection to an entity, running in another VM, 
     * that authenticates as at lease the principal "phoenix", the 
     * preparer dynamically grants to the proxy, permission to authenticate 
     * as no more than the principal "phoenix". Although the affected 
     * proxies are allowed to make outbound calls ("connect") under the
     * conditions just stated, they are not allowed to accept incoming
     * calls, nor would delegation be allowed were those proxies allowed
     * to actually make outbound calls.
     */
    instantiatorPreparer = new BasicProxyPreparer( true,
                                                   mutualAuthenticationConstraints,
                                                   new Permission[] { new AuthenticationPermission(phoenixPublicKeyCert,
                                                                                                   phoenixPublicKeyCert,
                                                                                                   "connect")
                                                                    }
                                                 );

    /* Set the proxy preparer Phoenix should use to prepare proxies
     * to the activation system to be the same as the preparer used
     * to prepare proxies to the activation instantiator.
     */
    systemPreparer = instantiatorPreparer;

    /* JAAS Login --------------------------------------------------------------- */

    /* For every object in the Phoenix VM that must perform a JAAS login,
     * the JAAS login configuration should contain an entry that identifies
     * the following information used in the login process:
     *  - the keystore from which to retrieve the private key used to login
     *  - the alias of the private key to retrieve
     *  - the (optional) location of the password file(s) from which to retrieve
     *    the appropriate password(s) needed to retrieve the private key information
     *
     * The item below identifies the entry to use, from Phoenix's JAAS login 
     * configuration file, when an object in that VM performs a JAAS login.
     */
    loginContext = new LoginContext("phoenix.jaas.login");

    /* Phoenix spawns an activation group VM in which the activation
     * instantiator and the activatable objects it instantiates are
     * executed. That activation group instantiator (ActivationGroupImpl)
     * retrieves its configuration information from a configuration
     * source referenced by the value contained in the following item.
     */
    groupConfig = new String[] { "${groupConfig}" };

    /* Application-specific Items ----------------------------------------------- */

    /* Set the maximum time maximum time (milliseconds) to wait for group activation
     * before timing out. Give it a lot of time so that timeout failures don't
     * occur when 'java.security.debug=all' is used (30 minutes seems enough).
     */
    groupTimeout = 1800000;

    /* Substitute the -DpersistDir system property from the command line
     * for the location of the Phoenix state persistence directory.
     */
    persistenceDirectory = "${persistDir}";

}//end com.sun.jini.phoenix
