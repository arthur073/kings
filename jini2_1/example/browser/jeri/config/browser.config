/* Configuration file containing entries used to configure 
 * an implementation of the Browser to use Jini ERI for remote
 * communication.
 */
import net.jini.jeri.BasicILFactory;
import net.jini.jeri.BasicJeriExporter;
import net.jini.jeri.tcp.TcpServerEndpoint;
import net.jini.core.discovery.LookupLocator;

com.sun.jini.example.browser {
    /* Exporter(s) -------------------------------------------------------------- */

    /* Create the exporter to use to export the Browser's remote event listener.
     * Configure the exporter to export the listener in the following way:
     *  - use Jini ERI for remote communciation
     *  - when accepting network connections, use the default endpoint
     *  - to generate the server-side dispatcher for the service, and
     *    to generate the client-side invocation handler for the service's
     *    dynamic proxy, use the specified invocation layer factory
     *  - disable distributed garbage collection (DGC) to the service
     *    so that the service backend is strongly referenced when it is
     *    exported (the default)
     *  - while the service remains exported via this exporter, keep the
     *    virtual machine alive (the default)
     *  - use a default object identifier
     */
    private invocationLayerFactory = new BasicILFactory();
    listenerExporter = new BasicJeriExporter(TcpServerEndpoint.getInstance(0),
                                             invocationLayerFactory,
                                             false,
                                             true);

    /* The initial set of groups to discover */
    initialLookupGroups = new String[] {"JERI_Group0","JERI_Group1"};

//    initialLookupGroups   = new String[] {""};
//    initialLookupLocators = new LookupLocator[] { new LookupLocator("jini://${serverHost}")};

}//end com.sun.jini.example.browser
