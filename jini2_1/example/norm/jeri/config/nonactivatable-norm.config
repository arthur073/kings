/* Service configuration file containing entries used to configure
 * Norm when that service is started by the ServiceStarter
 * framework; satisfying the following criteria:
 *  - uses JERI for remote invocation
 *  - is NOT activatable
 *  - perists its state
 */
import net.jini.id.UuidFactory;
import net.jini.jeri.BasicILFactory;
import net.jini.jeri.BasicJeriExporter;
import net.jini.jeri.tcp.TcpServerEndpoint;
import net.jini.core.discovery.LookupLocator;

com.sun.jini.norm {

    /* Exporter(s) -------------------------------------------------------------- */

    /* Create the exporter to use to export the remote service object.
     * 
     * The exporter configured here will export the service in the
     * following way:
     *  - use Jini ERI for remote communciation
     *  - when accepting network connections, use the endpoint constructed
     *    the given port
     *  - to generate the server-side dispatcher for the service, and
     *    to generate the client-side invocation handler for the service's
     *    dynamic proxy, use the specified invocation layer factory
     *  - disable distributed garbage collection (DGC) to the service
     *    so that the service backend is strongly referenced when it is
     *    exported (the default)
     *  - while the service remains exported via this exporter, keep the
     *    virtual machine alive (the default)
     *  - associate the exported object with the given object identifier
     *
     *                        *** Note ***
     *
     * It may be worth comparing the exporter specified in this example to the 
     * exporter specified in the example configuration used to start the service
     * in transient mode using Jini ERI.
     *
     * This example allows the deployer - not the Jini ERI framework - to choose 
     * the port and object ID with which to export the service, whereas the 
     * example configuration for starting the service in transient mode 
     * using Jini ERI specifies a default port and object ID that is randomly
     * chosen by the framework, and is not specified in the configuration file.
     * This can be seen by observing that this example configures the exporter 
     * using the 5-argument version of the net.jini.jeri.BasicJeriExporter 
     * constructor, supplying a non-zero value for the port and a specific 
     * value for the object ID in the last argument, whereas the other example
     * uses only the 4-argument version of the constructor, inputting 0 for 
     * the port and leaving the object ID unspecified.
     *
     * Note that there is nothing special about the values specified below for 
     * the 'objPort' and 'objId' configuration entries. For both entries, fixed 
     * arbitrarily chosen values are specified. What's important is that neither 
     * the port nor the object ID is changed if the service is restarted. For a 
     * more detailed explanation of why this is important, see the note in the
     * README file for this example set, and see the note accompanying the
     * specification of the 'serverExporter' entry in the configuration file
     * that's used to start this service in transient mode under Jini ERI.
     */
    private invocationLayerFactory = new BasicILFactory();
    private objPort = 19995;
    private objId = UuidFactory.create("bc080659-375a-9acc-1026-da040656ffbb");
    serverExporter = new BasicJeriExporter(TcpServerEndpoint.getInstance(objPort),
                                           invocationLayerFactory,
                                           false,
                                           true,
                                           objId);

    /* Application-specific Items ----------------------------------------------- */

    persistenceDirectory = new String("${persistDir}");

    initialLookupGroups = new String[] {"JERI_Group0","JERI_Group1"};
//    initialLookupGroups   = new String[] {""};
//    initialLookupLocators = new LookupLocator[] { new LookupLocator("jini://${serverHost}")};

}//end com.sun.jini.norm
