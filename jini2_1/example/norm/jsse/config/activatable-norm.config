/* Service configuration file containing entries used to configure
 * Norm when that service is started by the ServiceStarter
 * framework; satisfying the following criteria:
 *  - uses secure JERI/jsse for remote invocation
 *  - is activatable
 *  - persists its state
 *
 * Note that each exporter configured here employs an underlying
 * exporter that uses an invocation layer factory to create a
 * compatible proxy and invocation dispatcher for the remote
 * object being exported. That invocation layer factory, used
 * in conjunction with the underlying exporter, allows applications
 * to customize the remote invocation and dispatch behavior of the
 * remote object being exported.
 */
import com.sun.jini.config.KeyStores;
import com.sun.jini.norm.NormPermission;

import net.jini.activation.ActivationExporter;

import net.jini.core.constraint.ClientAuthentication;
import net.jini.core.constraint.ConstraintAlternatives;
import net.jini.core.constraint.Integrity;
import net.jini.core.constraint.InvocationConstraint;
import net.jini.core.constraint.InvocationConstraints;
import net.jini.core.constraint.ServerAuthentication;
import net.jini.core.constraint.ServerMinPrincipal;

import net.jini.security.AuthenticationPermission;
import net.jini.constraint.BasicMethodConstraints;
import net.jini.security.BasicProxyPreparer;

import net.jini.jeri.ProxyTrustILFactory;
import net.jini.jeri.BasicJeriExporter;

import net.jini.jeri.ssl.SslServerEndpoint;

import javax.security.auth.login.LoginContext;

import java.rmi.activation.ActivationID;
import java.security.KeyStore;
import java.security.Permission;
import java.util.Arrays;
import java.util.Collections;

/* Note that Norm exports one remote object:
 *  - the service's backend
 *
 * That object is exported using an Exporter obtained from this
 * configuration file. Norm provides various classes to 
 * facilitate the configuration of the exporter, as shown below.
 * The service's backend does not implement any access control
 * directly; any desired access control must be implemented
 * through that object's exporter, which is specified in this
 * configuration.
 *
 * For example, recall that an exporter uses a factory (supplied
 * to the exporter) to generate client-side invocation handlers
 * that will be used in secure dynamic proxies to execute calls
 * to secure remote objects; and to also generate server-side
 * dispatchers used to receive those incoming remote calls from
 * the dynamic proxies. 
 */
com.sun.jini.norm {

    /* Public Key Certificate(s) ------------------------------------------------ */

    /* Retrieve from the configuration, the location of the truststore 
     * containing the public key certificates associated with the various
     * entities in the system.
     */
    private static caTruststore = KeyStores.getKeyStore("${appHome}${/}example${/}common${/}jsse${/}truststore${/}jini-ca.truststore", null);

    /* Retrieve from the truststore above, the public key certificate 
     * associated with each of the entities that play a role in
     * starting the service.
     */
    private static phoenixKey   = KeyStores.getX500Principal("phoenix",   caTruststore);
    private static clientKey    = KeyStores.getX500Principal("client",    caTruststore);
    private static reggieKey    = KeyStores.getX500Principal("reggie",    caTruststore);
    private static mahaloKey    = KeyStores.getX500Principal("mahalo",    caTruststore);
    private static fiddlerKey   = KeyStores.getX500Principal("fiddler",   caTruststore);
    private static normKey      = KeyStores.getX500Principal("norm",      caTruststore);
    private static mercuryKey   = KeyStores.getX500Principal("mercury",   caTruststore);
    private static outriggerKey = KeyStores.getX500Principal("outrigger", caTruststore);

    private static phoenixPublicKeyCert    = Collections.singleton(phoenixKey);
    private static clientPublicKeyCert     = Collections.singleton(clientKey);
    private static reggiePublicKeyCert     = Collections.singleton(reggieKey);
    private static mahaloPublicKeyCert     = Collections.singleton(mahaloKey);
    private static fiddlerPublicKeyCert    = Collections.singleton(fiddlerKey);
    private static normPublicKeyCert       = Collections.singleton(normKey);
    private static mercuryPublicKeyCert    = Collections.singleton(mercuryKey);
    private static outriggerPublicKeyCert  = Collections.singleton(outriggerKey);

    private static clientKeyArray = new Object[] { clientKey,
                                                   reggieKey,
                                                   mahaloKey,
                                                   fiddlerKey,
                                                   normKey,
                                                   mercuryKey,
                                                   outriggerKey
                                                  };

    private static clientPublicKeys = new java.util.HashSet(Arrays.asList(clientKeyArray));

    /* Exporter(s) -------------------------------------------------------------- */

    /* Create a secure JERI/jsse transport server endpoint that listens
     * on an arbitrary port, and that uses SSL to support the server
     * side of direct TCP/IP connections. This endpoint will be used
     * to create the service's exporter.
     */
    private serviceEndpoint = SslServerEndpoint.getInstance(0);

    /* Create the per-method constraints to apply to the remote methods called
     * on the proxy to the service's backend. Require the following when a
     * client attempts to make a remote call on the service:
     *  - integrity of the call (verify no one corrupts the call)
     */
    private serviceConstraints = new BasicMethodConstraints(new InvocationConstraints(new InvocationConstraint[]{ Integrity.YES },
                                                                                      null)
                                                            );

    /* Create the invocation layer factory to use when creating the
     * service's exporter. That exporter will export the service as
     * an activatable remote object that uses secure JERI/jsse for its
     * remote communication.
     *
     * The invocation layer factory created here has the following
     * characteristics:
     *  - uses secure JERI/jsse for remote communication
     *  - with respect to the secure dynamic proxy generated by the
     *    service's exporter, this invocation layer factory generates
     *    the client-side invocation handler used in that proxy to
     *    execute calls to the service's backend, which is the secure
     *    remote object that is exported by the exporter
     *  - generates the server-side dispatcher used to receive the
     *    incoming remote calls from the client-side invocation
     *    handler to the service's backend
     *  - applies the constraints specified above when a client attempts
     *    to make a call to a remote method on the exported object
     *  - grants the specified service-specific permission to the 
     *    dispatcher so that it may perform automatic permission-based
     *    access control on incoming remote calls
     *
     * Note that when a client invokes a remote method on the backend's
     * proxy, the dispatcher receives that call, determines the appropriate
     * backend method to invoke, and then invokes that method on the
     * backend. Both the client and the dispatcher must be granted this
     * service-specific permission. When the client is granted that
     * permission, the specific methods the client is allowed to invoke
     * are usually also specified in conjunction with that permission, 
     * in the service's policy file; and that permission is typically
     * granted to only the principal(s) under which the client is
     * running, (not to the client's code source). With respect to the
     * dispatcher, that service-specific permission is granted when the
     * dispatcher is constructed by the invocation layer factory. Unlike
     * the client, the dispatcher is typically granted broad access to
     * the methods of the backend.
     */
    private serviceILFactory = new ProxyTrustILFactory(serviceConstraints,
                                                       NormPermission.class);

    /* Create the underlying exporter that should be used to create
     * the exporter that exports the service's backend. Configure this
     * exporter to operate in the following way:
     *  - uses secure JERI/jsse for remote communciation
     *  - when accepting network connections, use the endpoint specified
     *    above
     *  - generates a secure dynamic proxy to the exported object (the
     *    service) that, through the implementation of the ProxyTrust
     *    interface, provides a mechanism for obtaining a trust verifier
     *    for the proxy
     *  - uses the invocation layer factory specified above to generate
     *    the server-side dispatcher for the service, and to generate
     *    the client-side invocation handler for the service's dynamic
     *    proxy
     */
    private underlyingServiceExporter = new BasicJeriExporter(serviceEndpoint, serviceILFactory);

    /* Create the actual exporter to use to export the service's backend
     * as an activatable remote object. This exporter is created using
     * the underlying exporter specified above.
     */
    serverExporter = new ActivationExporter((ActivationID)$data, underlyingServiceExporter);

    /* Proxy Preparer(s) -------------------------------------------------------- */

    /* The activatable version of this service interacts with the activation
     * framework through proxies to the activation system and the service's
     * activation ID. As such, the service should prepare those proxies before 
     * attempting to use them. A preparer for each such proxy is specifed below.
     */

    /* Create a set of security constraints to apply under the following
     * circumstances:
     *  - when the proxy to the activation system or the activation ID is prepared,
     *    trust in the given proxy is verified by calling Security.verifyProxyTrust 
     *    on the proxy with the client constraints specified here.
     *
     * The constraints created here require the following when a client attempts
     * to make a remote call:
     *  - integrity of the call (verify no one corrupts the call)
     *  - authenticate the server receiving the call
     *  - when it authenticates itself, require that the server authenticate
     *    itself as at least all of the specified principals; in the case
     *    below, as the alias "phoenix". Note that the mechanisms and credentials
     *    used to authenticate the server as that principal are not specified
     *    here. 
     */
    private activationProxyConstraints
         = new BasicMethodConstraints( new InvocationConstraints
                                           ( new InvocationConstraint[]{ Integrity.YES,
                                                                         ServerAuthentication.YES,
                                                                         ClientAuthentication.YES,
                                                                         new ServerMinPrincipal(phoenixPublicKeyCert)
                                                                       },
                                             null)
                                     );

    /* Create the proxy preparer that should be used to prepare the
     * proxy to the activation system. This preparer should verify trust
     * in that proxy using the constraints specified above. It should
     * grant no additional permissins to that proxy. And it should grant
     * to those proxies permission(s) that satisfy the following:
     *
     * When requesting a connection to an entity, running in another VM, 
     * that authenticates as at lease the principal "phoenix", the 
     * preparer dynamically grants to the proxy, permission to authenticate 
     * as no more than the principal "norm". Although the affected 
     * proxies are allowed to make outbound calls ("connect") under the
     * conditions just stated, they are not allowed to accept incoming
     * calls, nor would delegation be allowed were those proxies allowed
     * to actually make outbound calls.
     */
    activationSystemPreparer = new BasicProxyPreparer( true, 
                                                       activationProxyConstraints,
                                                       new Permission[] { new AuthenticationPermission(normPublicKeyCert,
                                                                                                       phoenixPublicKeyCert,
                                                                                                       "connect")
                                                                        }
                                                     );

    /* Set the proxy preparer that should be used to prepare the
     * proxy to the activation ID to be the same preparer as
     * that used to prepare the proxy to the activation system.
     */
    activationIdPreparer = new BasicProxyPreparer( true, activationProxyConstraints, null );

    /* Because clients of this service register remote listener(s)
     * through which the service sends remote events to the
     * clients, a proxy preparer must be configured so that the
     * service can prepare (verify trust in, set constraints on, etc)
     * each such listener that it receives.
     *
     * Create a preparer for all target listeners with the following
     * constraints:
     *  - integrity of the call (verify no one corrupts the call)
     *  - client authentication (the 'client' [the service] that
     *    makes calls on the listener must tell the 'server' 
     *    [the service's registered client] who it is)
     *  - server authentication (the 'client' requires the 'server'
     *    to identify itself to the 'client')
     *  - when performing server athentication, the 'server' [the client
     *    of the service] must authenticate as at least one of the
     *    principals in the given list; which is ultimately expressed
     *    as ConstraintAlternatives
     */
    private listenerPrincipals = new InvocationConstraint[]{ new ServerMinPrincipal(clientPublicKeyCert),
                                                             new ServerMinPrincipal(reggiePublicKeyCert),
                                                             new ServerMinPrincipal(mahaloPublicKeyCert),
                                                             new ServerMinPrincipal(fiddlerPublicKeyCert),
                                                             new ServerMinPrincipal(normPublicKeyCert),
                                                             new ServerMinPrincipal(mercuryPublicKeyCert),
                                                             new ServerMinPrincipal(outriggerPublicKeyCert)
                                                           };
    private serviceListenerConstraints
         = new BasicMethodConstraints( new InvocationConstraints
                                           ( new InvocationConstraint[]{ Integrity.YES,
                                                                         ClientAuthentication.YES,
                                                                         ServerAuthentication.YES,
                                                                         new ConstraintAlternatives(listenerPrincipals)
                                                                       },
                                             null)
                                     );

    /* Create the proxy preparer that should be used to prepare the proxy
     * to any listener registered with the service. This preparer should
     * verify trust in that proxy using the constraints specified above.
     * And it should grant to that proxy the following permission(s):
     *
     * When requesting a connection to a listener's backend implementation,
     * (running in the registered client's remote VM), that authenticates as
     * at lease one of the principals listed above, the preparer dynamically
     * grants to the proxy, permission to authenticate as no more than the
     * service's principal. Although the affected proxy is allowed to make
     * outbound calls ("connect") under the conditions just stated, it is not
     * allowed to accept incoming calls, nor would delegation be allowed if
     * that proxy was allowed to actually make outbound calls.
     */
    listenerPreparer = new BasicProxyPreparer( true,
                                               serviceListenerConstraints,
                                               new Permission[] { new AuthenticationPermission(normPublicKeyCert,
                                                                                               clientPublicKeys,
                                                                                               "connect")
                                                                     }
                                             );

    /* JAAS Login --------------------------------------------------------------- */

    /* For every object in the service's VM that must perform a JAAS
     * login, the JAAS login configuration should contain an entry that
     * identifies the following information used in the login process:
     *  - the keystore from which to retrieve the private key used to login
     *  - the alias of the private key to retrieve
     *  - the (optional) location of the password file(s) from which to retrieve
     *    the appropriate password(s) needed to retrieve the private key information
     *
     * The item below identifies the entry to use, from the JAAS login
     * configuration file for this service's VM, when an object in that
     * VM performs a JAAS login.
     */
    loginContext = new LoginContext("norm.jaas.login");

    /* Application-specific Items ----------------------------------------------- */

    persistenceDirectory = new String("${persistDir}");

    initialLookupGroups = new String[] {"JSSE_Group0","JSSE_Group1"};
//    initialLookupGroups   = new String[] {""};
//    initialLookupLocators = new LookupLocator[] { new LookupLocator("jini://${serverHost}")};

}//end com.sun.jini.norm

/* Because this service is a well-behaved Jini service, it
 * obtains proxies to any discovered lookup services it might
 * register with (join). The interaction with those lookup
 * service(s), through those proxies, generally occurs through
 * the use of a helper utility such as a lookup discovery utility,
 * a lookup locator discovery utility, or a join manager. Each such
 * proxy must be prepared by a proxy preparer retrieved from this
 * configuration file.
 *
 * The proxies for which preparers must be provided by this file are
 * as follows:
 *  - proxy to any discovered lookup service received by the lookup
 *    discovery utility
 *  - proxy to any discovered lookup service received by the lookup
 *    locator discovery utility
 *  - proxy to any lookup service received by the join manager
 *  - proxy to a registration with any lookup service with which the
 *    join manager interacts
 *  - proxy to a service lease with any lookup service with which the
 *    join manager interacts
 *
 * All of the above preparers share the following constraints:
 *  - integrity of the call (verify no one corrupts the call)
 *  - client authentication (the 'client' [the service] that makes
 *    calls through the lookup service proxy must tell the 'server'
 *    [the lookup service] who it is)
 *  - server authentication (the 'client' [the service] requires the
 *    lookup service to identify itself to the 'client')
 *  - when performing server athentication, the 'server' [the lookup
 *    service] must authenticate as at least the given principal
 *    ("reggie")
 *
 * This block contains private entries that are shared by the entries
 * defined below in the blocks corresponding to the discovery utilities
 * and the join manager.
 */
shared.entries {

    private serviceLookupConstraints
         = new BasicMethodConstraints( new InvocationConstraints
                                           ( new InvocationConstraint[]{ Integrity.YES,
                                                                         ClientAuthentication.YES,
                                                                         ServerAuthentication.YES,
                                                                         new ServerMinPrincipal(com.sun.jini.norm.reggiePublicKeyCert)
                                                                       },
                                             null)
                                     );
}//end shared.entries

/* Configuration block for the lookup discovery utility */
net.jini.discovery.LookupDiscovery {

    /* Preparer for the lookup service proxy used by the
     * lookup discovery utility. 
     *  - verify trust with the given constraints attached
     *  - if the lookup service's backend authenticates as
     *    "reggie", then dynamically grant to that lookup
     *    service's proxy, permission to authenticate as
     *    the principal of the given service
     */
    registrarPreparer = new BasicProxyPreparer( true,
                                                shared.entries.serviceLookupConstraints,
                                                new Permission[] { new AuthenticationPermission(com.sun.jini.norm.normPublicKeyCert,
                                                                                                com.sun.jini.norm.reggiePublicKeyCert,
                                                                                                "connect")
                                                                 }
                                              );

}//end net.jini.discovery.LookupDiscovery

/* Configuration block for the join manager */
net.jini.lookup.JoinManager {

    /* Preparer for the various lookup service proxies
     * used by the join manager. In each case, simply set
     * client constraints; don't verify trust, and don't
     * grant any dynamic permissions.
     */
    registrarPreparer = new BasicProxyPreparer( false, shared.entries.serviceLookupConstraints, null );
    registrationPreparer = new BasicProxyPreparer( false, shared.entries.serviceLookupConstraints, null );
    serviceLeasePreparer = new BasicProxyPreparer( false, shared.entries.serviceLookupConstraints, null );

}//end net.jini.lookup.JoinManager
