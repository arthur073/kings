/* Configuration file containing entries used to configure the
 * ServiceStarter when that ServiceStarter is used to start
 * the Browser using secure Jini ERI/jsse for remote communciation
 *
 * When using this file to configure the ServiceStarter framework,
 * the system properties shown below must be set on the command line.
 *
 *  -Djava.security.manager
 *  -Djava.security.policy
 *  -Djava.security.auth.login.config
 *  -Djavax.net.ssl.trustStore
 *  -Djava.protocol.handler.pkgs
 *  -Djava.security.properties
 *  -Djava.util.logging.manager
 *  -Djava.util.logging.config.file
 *  -Djava.security.debug (optional)
 *  -Dconfig        (THIS config file)
 *  -DserverHost   (host on which the Browser will run)
 *  -DcodebaseHost (host running the Browser's codebase server)
 *  -DcodebasePort (port the Browser's codebase server listens on)
 *  -DjiniHome     (base install directory for Jini, ex. /vob/jive, c:\\jini2_0)
 *  -DappHome      (base install directory for examples, ex. /home/tests, c:\\tests)
 *
 * Below is an example command line on unix. Carriage
 * returns are inserted for readability:
 * 
 * > /export/home/j2sdk1.4.1_01/bin/java
 *    -Djava.security.manager=
 *    -Djava.security.policy=<jini-install-dir>/common/jsse/policy/start-service.policy
 *    -Djava.security.auth.login.config=<jini-install-dir>/example/common/jsse/login/client.login
 *    -Djavax.net.ssl.trustStore=<jini-install-dir>/example/common/jsse/truststore/jini-ca.truststore
 *    -Djava.protocol.handler.pkgs=net.jini.url
 *    -Djava.security.properties=<jini-install-dir>/example/common/jsse/props/dynamic-policy.properties
 *    -Djava.util.logging.manager=com.sun.jini.logging.LogManager
 *    -Djava.util.logging.config.file=<jini-install-dir>/example/common/logging/jini.logging
 *    -DserverHost=<hostname>
 *    -Dconfig=<jini-install-dir>/common/jsse/config/start-browser.config
 *    -DcodebaseHost=<httpd-hostname>
 *    -DcodebasePort=8080
 *    -DjiniHome=<jini-install-dir>
 *    -DappHome=<example-install-dir>
 *    -jar <jini-install-dir>/lib/start.jar <example-install-dir>/common/jsse/config/start-browser.config
 */

/* The following describes what is required in this file by the
 * ServiceStarter:
 *
 *  - ServiceDescriptor, either of one of the following types: 
 *
 *    The ServiceDescriptor contains the following required and
 *    optional items:
 *      o NonActivatableServiceDescriptor
 *      o required String that specifies the codebase to be used in
 *        the Browser's VM
 *      o required String that specifies the policy file to be used
 *        in the Browser's VM
 *      o required String that specifies the classpath to be used
 *        in the Browser's VM
 *      o required String that specifies the class name of the
 *        instance to construct to start the Browser
 *      o optional String array that specifies the arguments with 
 *        which to configure the Browser. Note that the first element
 *        should be the path and filename of the Browser's configuration 
 *        file, and the remaining arguments can be configuration 
 *        values that override the values in that configuration file
 *
 *  - LoginContext that is used by the ServiceStarter to perform
 *    a JAAS login under the associated Subject
 *
 *    Note: the first element of the first optional String argument
 *          of the ServiceDescriptor represents the location of another
 *          configuration file, different from this config file, that
 *          the Browser uses for its configuration. the Browser will retrieve
 *          the location of that other configuration file from its 
 *          argument list and then performs a number of calls to getEntry
 *          during its initialization, to retrieve the values of the
 *          various configuration entries the Browser expects (refer to the
 *          javadoc of the Browser for a list of what the the Browser expects). 
 */
import com.sun.jini.config.ConfigUtil;
import com.sun.jini.config.KeyStores;

import com.sun.jini.start.NonActivatableServiceDescriptor;
import com.sun.jini.start.ServiceDescriptor;

import net.jini.url.httpmd.HttpmdUtil;

import net.jini.core.constraint.ClientAuthentication;
import net.jini.core.constraint.Integrity;
import net.jini.core.constraint.InvocationConstraint;
import net.jini.core.constraint.InvocationConstraints;
import net.jini.core.constraint.ServerAuthentication;
import net.jini.core.constraint.ServerMinPrincipal;

import net.jini.security.AuthenticationPermission;
import net.jini.constraint.BasicMethodConstraints;
import net.jini.security.BasicProxyPreparer;

import javax.security.auth.login.LoginContext;

import java.security.Permission;
import java.util.Collections;

com.sun.jini.start {

    /* Public Key Certificate(s) ------------------------------------------------ */

    /* Retrieve from the configuration, the location of the truststore 
     * containing the public key certificates associated with the various
     * entities in the system.
     */
    private static caTruststore = KeyStores.getKeyStore("${appHome}${/}example${/}common${/}jsse${/}truststore${/}jini-ca.truststore", null);

    /* Retrieve from the truststore above, the public key certificate 
     * associated with each of the entities that play a role in
     * starting the Browser.
     */
    private static setupPublicKeyCert  = Collections.singleton(KeyStores.getX500Principal("setup", caTruststore));
    private static clientPublicKeyCert = Collections.singleton(KeyStores.getX500Principal("client",caTruststore));

    /* Exporter(s) -------------------------------------------------------------- */

    /* None */

    /* Proxy Preparer(s) -------------------------------------------------------- */

    /* Create a set of security constraints to apply under the following
     * circumstances:
     *  - when the proxy to the Browser is prepared, trust in the proxy is
     *    verified by calling Security.verifyProxyTrust
     *    on the proxy with the client constraints specified here.
     *
     * The constraints created here require the following when a client
     * attempts to make a remote call:
     *  - integrity of the call (verify no one corrupts the call)
     *  - authenticate the client making the call
     *  - authenticate the server receiving the call
     *  - when it authenticates itself, require that the server authenticate
     *    itself as at least all of the specified principals; in the case
     *    below, as the alias that corresponds to the given public key
     *    certificate. Note that the mechanisms and credentials used to
     *    authenticate the server as that principal are not specified
     *    here. 
     */
    private browserProxyConstraints
         = new BasicMethodConstraints( new InvocationConstraints
                                           ( new InvocationConstraint[]{ Integrity.YES,
                                                                         ClientAuthentication.YES,
                                                                         ServerAuthentication.YES,
                                                                         new ServerMinPrincipal(clientPublicKeyCert)
                                                                       },
                                             null)
                                     );

    /* Create the proxy preparer that should be used to prepare the proxy
     * to the Browser. This preparer should verify trust in that proxy using
     * the constraints specified above. And it should grant to that proxy
     * the following permission(s):
     *
     * When requesting a connection to an entity, (running in the Browser's VM), 
     * that authenticates as at lease the principal with alias corresponding 
     * to the given clientPublicKeyCert certificate, the preparer dynamically
     * grants to the proxy, permission to authenticate as no more than the
     * principal "setup". Although the affected proxy is allowed to make
     * outbound calls ("connect") under the conditions just stated, it
     * is not allowed to accept incoming calls, nor would delegation be allowed
     * if that proxy was allowed to actually make outbound calls.
     */
    browserPreparer = new BasicProxyPreparer( true,
                                              browserProxyConstraints,
                                              new Permission[] { new AuthenticationPermission(setupPublicKeyCert,
                                                                                              clientPublicKeyCert,
                                                                                              "connect")
                                                               }
                                            );

    /* JAAS Login --------------------------------------------------------------- */

    /* For every object in the setup VM that must perform a JAAS login,
     * the JAAS login configuration should contain an entry that
     * identifies the following information used in the login process:
     *  - the keystore from which to retrieve the private key used to login
     *  - the alias of the private key to retrieve
     *  - the (optional) location of the password file(s) from which to retrieve
     *    the appropriate password(s) needed to retrieve the private key information
     *
     * The item below identifies the entry to use, from the JAAS login
     * configuration file for the setup VM, when an object in that VM
     * performs a JAAS login.
     */
    loginContext = new LoginContext("setup.jaas.login");

    /* Configuration items needed by the ServiceStarter to start the Browser */

    private static browserDL         = HttpmdUtil.computeDigestCodebase("${jiniHome}${/}lib-dl","httpmd://${codebaseHost}:${codebasePort}/browser-dl.jar;sha=0");
    private static jskDL             = HttpmdUtil.computeDigestCodebase("${jiniHome}${/}lib-dl","httpmd://${codebaseHost}:${codebasePort}/jsk-dl.jar;sha=0");
    private static browserCodebase   = ConfigUtil.concat( new String[] { browserDL," ",jskDL } );
    private static browserPolicyFile = new String("${appHome}${/}example${/}browser${/}jsse${/}policy${/}browser.policy");
    private static browserClasspath  = new String("${jiniHome}${/}lib${/}browser.jar");
    private static browserImplName   = new String("com.sun.jini.example.browser.Browser");
    private static browserConfig     = new String("${appHome}${/}example${/}browser${/}jsse${/}config${/}browser.config");
    private static browserArgsArray  = new String[] { browserConfig };

    /* For STARTING the Browser */
    private static nonActivatableServiceDescriptor =
                                new NonActivatableServiceDescriptor(browserCodebase,
                                                                    browserPolicyFile,
                                                                    browserClasspath,
                                                                    browserImplName,
                                                                    browserArgsArray);

    static serviceDescriptors = new ServiceDescriptor[] { nonActivatableServiceDescriptor };

}//end com.sun.jini.start

