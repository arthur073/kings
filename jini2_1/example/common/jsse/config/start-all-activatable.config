/* Configuration file containing entries used to configure the
 * ServiceStarter when that ServiceStarter is used to start
 * ALL of the contributed services, where each such service
 * satisfies the following criteria:
 *  - uses secure JERI/jsse for remote invocation
 *  - is activatable
 *  - persists its state
 *
 * When using this file to configure the ServiceStarter framework,
 * the system properties shown below must be set on the command line.
 *
 *  -Djava.security.manager
 *  -Djava.security.policy
 *  -Djava.security.auth.login.config
 *  -Djavax.net.ssl.trustStore
 *  -Djava.protocol.handler.pkgs
 *  -Djava.security.properties
 *  -Djava.util.logging.manager
 *  -Djava.util.logging.config.file
 *  -Djava.security.debug (optional)
 *  -Dconfig       (THIS config file)
 *  -DserverHost   (host running phoenix and/or the service being started)
 *  -DphoenixPort  (port phoenix's registry listens on)
 *  -DsharedVMLog  (persistence directory for shared group VM info)
 *  -DcodebaseHost (host running service's codebase server)
 *  -DcodebasePort (port service's codebase server listens on)
 *  -DjiniHome     (base install directory for Jini, ex. /vob/jive, c:\\jini2_0)
 *  -DappHome      (base install directory for examples, ex. /home/tests, c:\\tests)
 *  -Ddebug        (turns on/off security debugging in the service)
 *
 * Below is an example command line on unix. Carriage
 * returns are inserted for readability:
 * 
 * > /export/home/j2sdk1.4.1_01/bin/java
 *    -Djava.security.manager=
 *    -Djava.security.policy=<jini-install-dir>/common/jeri/policy/start-service.policy
 *    -Djava.security.auth.login.config=<jini-install-dir>/example/common/jsse/login/setup.login
 *    -Djavax.net.ssl.trustStore=<jini-install-dir>/example/common/jsse/truststore/jini-ca.truststore
 *    -Djava.protocol.handler.pkgs=net.jini.url
 *    -Djava.security.properties=<jini-install-dir>/example/common/jsse/props/dynamic-policy.properties
 *    -Djava.util.logging.manager=com.sun.jini.logging.LogManager
 *    -Djava.util.logging.config.file=<jini-install-dir>/common/logging/jini.logging
 *    -Dconfig=<jini-install-dir>/common/jsse/config/start-all-activatable.config
 *    -DserverHost=<hostname>
 *    -DphoenixPort=2000
 *    -DsharedVMLog=/tmp/jsse-all-sharedvm
 *    -DcodebaseHost=<httpd-hostname>
 *    -DcodebasePort=8080
 *    -DjiniHome=<jini-install-dir>
 *    -DappHome=<example-install-dir>
 *    -Ddebug=off (values: access,failure | policy,access,failure | off | none)
 *    -jar <jini-install-dir>/lib/start.jar <example-install-dir>/common/jsse/config/start-all-activatable.config
 */

/* The following describes what is required in this file by the
 * ServiceStarter:
 *
 *  - SharedActivationGroupDescriptor, containing the following
 *    required and optional items:
 *
 *      o required String that specifies the policy file to be used
 *        in the activation group VM
 *      o required String that specifies the classpath to be used in
 *        the activation group VM
 *      o required String that specifies the path and filename of the
 *        log for the shared activation group of the service.
 *      o optional String that specifies which VM implementation
 *        (java command) should be used for the service's VM. The
 *        value of this item  must be an absolute path to an executable;
 *        and that executable must accept all the standard VM 
 *        command-line options (for example, -D, -classpath, and so on),
 *        and directly or indirectly start a VM.
 *      o optional String array that specifies the command-line options
 *        the activation system should use when activating the service.
 *        Each of these options must start with a "-" (for example, 
 *        '-classpath <classpath>', '-client', '-server', etc.).
 *      o optional String array that specifies the system properties
 *        to be set on the service's VM by the activation system. Each
 *        of these items must take the form '-D<name>=<value>'.
 *      o optional String that specifies the name of the host on
 *        which the activation system (phoenix) is running
 *      o optional int that specifies the port number on which the
 *        activation system (phoenix) is listening for connection requests
 *
 *    For each service being started, the associated ServiceDescriptor
 *    contains the following required and optional items:
 *
 *      o SharedActivatableServiceDescriptor (because the service
 *        is activatable)
 *      o required String that specifies the codebase to be used in
 *        the service's VM
 *      o required String that specifies the policy file to be used
 *        in the service's VM
 *      o required String that specifies the classpath to be used
 *        in the service's VM
 *      o required String that specifies the impl class name of
 *        the service to be started
 *      o required String that specifies the path and filename of
 *        the log directory for the shared activation group which
 *        will host all of the activatable services being started.
 *      o optional String array that specifies the arguments with 
 *        which to configure the service. Note that the first
 *        element should be the path and filename of the service's
 *        configuration file, and the remaining arguments can be
 *        configuration values that override the values in that
 *        configuration file
 *      o optional boolean that specifies whether or not the
 *        activation system should automatically restart the
 *        service upon a crash
 *
 *  - LoginContext that is used by the ServiceStarter to perform
 *    a JAAS login under the associated Subject
 *
 *    Note: the first element of the first optional String argument
 *          of the ServiceDescriptor represents the location of another
 *          configuration file, different from this config file, that the
 *          service uses for its configuration. The service implementation
 *          retrieves the location of that other configuration file from
 *          its argument list and then performs a number of calls to getEntry
 *          during its initialization, to retrieve the values of the
 *          various configuration entries the service expects (refer to the
 *          javadoc of the service for a list of what the service expects). 
 *          
 *    Note: the optional String array in SharedActivationGroupDescriptor that
 *          specifies the system properties to be set on the service's VM by
 *          the activation system contains the following key/value pairs:
 *            - java.security.debug (optional)
 *            - java.security.auth.login.config
 *            - javax.net.ssl.trustStore
 *            - java.protocol.handler.pkgs
 *            - java.security.properties
 *            - java.util.logging.manager
 *            - java.util.logging.config.file
 *            - serverHost
 *            - jiniHome
 *            - appHome
 *          These entries are retrieved from the system properties by the
 *          runtime.
 *          
 *    Note: for activatable services, recall that a security manager will
 *          be set automatically by the activation system (otherwise the
 *          optional String array that specifies the system properties to
 *          be set on the service's VM would need to also include a
 *          {"java.security.manager",""} key/value pair). That security
 *          manager will then query the service's policy file whose location is
 *          specified through the java.security.policy property that is set in
 *          the ServiceDescriptor below.
 *         
 *          The RMI runtime will retrieve the value associated here with the
 *          service's java.rmi.server.codebase property. It will use that
 *          codebase property to annotate the remote objects exported by the
 *          service.
 * 
 *          Before the security manager interrogates the policy file, the 
 *          runtime will retrieve a number of system properties that will then
 *          be substituted in the policy file, wherever tokens of the form
 *          ${property name} occur in that file. This substition mechanism
 *          allows some flexibility with respect to starting different services
 *          in different environments.
 *          
 *    Note: should the optional String array in SharedActivationGroupDescriptor
 *          that specifies the system properties to be set on the service's VM
 *          contain a key/value pair of {"java.security.debug", "failure,access"},
 *          then the service will display security debug output to the Phoenix
 *          output display.
 */
import com.sun.jini.config.ConfigUtil;
import com.sun.jini.config.KeyStores;

import com.sun.jini.start.ServiceDescriptor;
import com.sun.jini.start.SharedActivatableServiceDescriptor;
import com.sun.jini.start.SharedActivationGroupDescriptor;

import net.jini.url.httpmd.HttpmdUtil;

import net.jini.core.constraint.ClientAuthentication;
import net.jini.core.constraint.ConstraintAlternatives;
import net.jini.core.constraint.Integrity;
import net.jini.core.constraint.InvocationConstraint;
import net.jini.core.constraint.InvocationConstraints;
import net.jini.core.constraint.ServerAuthentication;
import net.jini.core.constraint.ServerMinPrincipal;

import net.jini.security.AuthenticationPermission;
import net.jini.constraint.BasicMethodConstraints;
import net.jini.security.BasicProxyPreparer;

import javax.security.auth.login.LoginContext;

import java.security.KeyStore;
import java.security.Permission;
import java.util.Arrays;
import java.util.Collections;

com.sun.jini.start {

    /* Public Key Certificate(s) ------------------------------------------------ */

    /* Retrieve from the configuration, the location of the truststore 
     * containing the public key certificates associated with the various
     * entities in the system.
     */
    private static caTruststore = KeyStores.getKeyStore("${appHome}${/}example${/}common${/}jsse${/}truststore${/}jini-ca.truststore", null);

    /* Retrieve from the truststore above, the public key certificate 
     * associated with each of the entities that play a role in
     * starting the service.
     */
    private static phoenixKey   = KeyStores.getX500Principal("phoenix",   caTruststore);
    private static setupKey     = KeyStores.getX500Principal("setup",     caTruststore);
    private static reggieKey    = KeyStores.getX500Principal("reggie",    caTruststore);
    private static mahaloKey    = KeyStores.getX500Principal("mahalo",    caTruststore);
    private static fiddlerKey   = KeyStores.getX500Principal("fiddler",   caTruststore);
    private static normKey      = KeyStores.getX500Principal("norm",      caTruststore);
    private static mercuryKey   = KeyStores.getX500Principal("mercury",   caTruststore);
    private static outriggerKey = KeyStores.getX500Principal("outrigger", caTruststore);

    private static phoenixPublicKeyCert    = Collections.singleton(phoenixKey);
    private static setupPublicKeyCert      = Collections.singleton(setupKey);
    private static reggiePublicKeyCert     = Collections.singleton(reggieKey);
    private static mahaloPublicKeyCert     = Collections.singleton(mahaloKey);
    private static fiddlerPublicKeyCert    = Collections.singleton(fiddlerKey);
    private static normPublicKeyCert       = Collections.singleton(normKey);
    private static mercuryPublicKeyCert    = Collections.singleton(mercuryKey);
    private static outriggerPublicKeyCert  = Collections.singleton(outriggerKey);

    /* The principal "phoenix" is needed here and below in 
     * the min-server-principals for the servicePreparer so
     * that the shared VM can be destroyed (without it, an 
     * "UnsupportedConstraintException/No trusted principal found"
     * exception occurs.
     */
    private static serviceKeyArray = new Object[] { phoenixKey,
                                                    reggieKey,
                                                    mahaloKey,
                                                    fiddlerKey,
                                                    normKey,
                                                    mercuryKey,
                                                    outriggerKey
                                                  };

    private static servicePublicKeys = new java.util.HashSet(Arrays.asList(serviceKeyArray));

    /* Exporter(s) -------------------------------------------------------------- */

    /* None */

    /* Proxy Preparer(s) -------------------------------------------------------- */

    /* Note that the proxy preparer specified below is needed only for the
     * case where the ServiceStarter framework is used to start an activatable
     * service. This is necessary because when handling an activatable service,
     * the ServiceStarter framework must create the (shared) activation goup VM
     * (if it has not been created already) and then register the service with
     * the activation system so that the service can be activated to run in
     * that activation group VM. 
     * 
     * Both when creating the group VM and when registering the service with the
     * activation system, a call to ServiceStarter.getActivationSystem() is made
     * to retrieve a proxy to the activation system (see the create() method in
     * SharedActivationGroupDescriptor and SharedActivatableServiceDescriptor).
     * 
     * Because methods on that proxy will ultimately be invoked, the proxy should
     * be prepared. ServiceStarter.getActivationSystem() retrieves the preparer
     * named "activationSystemPreparer" specified in this file, and applies it
     * to the activation system proxy before using the proxy in any way.
     */
    /* Create a set of security constraints to apply under the following
     * circumstances:
     *  - when the proxy to the activation system, or the proxy to the
     *    activation ID is prepared, trust in the proxy is verified
     *    by calling Security.verifyProxyTrust on the proxy with the
     *    client constraints specified here.
     *
     * The constraints created here require the following when a client attempts
     * to make a remote call:
     *  - integrity of the call (verify no one corrupts the call)
     *  - authenticate the client making the call
     *  - authenticate the server receiving the call
     *  - when it authenticates itself, require that the server authenticate
     *    itself as at least all of the specified principals; in the case
     *    below, as the alias "phoenix". Note that the mechanisms and credentials
     *    used to authenticate the server as that principal are not specified
     *    here. 
     */
    private activationProxyConstraints
         = new BasicMethodConstraints( new InvocationConstraints
                                           ( new InvocationConstraint[]{ Integrity.YES,
                                                                         ClientAuthentication.YES,
                                                                         ServerAuthentication.YES,
                                                                         new ServerMinPrincipal(phoenixPublicKeyCert)
                                                                       },
                                             null)
                                     );

    /* Create the proxy preparer that should be used to prepare the proxy
     * to the activation system. This preparer should verify trust in that
     * proxy using the constraints specified above. And it should grant to
     * that proxy the following permission(s):
     *
     * When the proxy to the activation system requests a connection to an
     * entity that authenticates as any principal (the null argument), the
     * preparer dynamically grants to the proxy, permission to authenticate
     * as no more than the principal "setup". Although the affected
     * proxy is allowed to make outbound calls ("connect") under the
     * conditions just stated, it is not allowed to accept incoming calls,
     * nor would delegation be allowed if that proxy was allowed to
     * actually make outbound calls.
     */
    activationSystemPreparer = new BasicProxyPreparer( true,
                                                       activationProxyConstraints,
                                                       new Permission[] { new AuthenticationPermission(setupPublicKeyCert,
                                                                                                       null,
                                                                                                       "connect")
                                                                        }
                                                     );

    /* Create a set of security constraints to apply under the following
     * circumstances:
     *  - when the proxy to the service being started is prepared, trust
     *    in the proxy is verified by calling Security.verifyProxyTrust
     *    on the proxy with the client constraints specified here.
     *
     * The constraints created here require the following when a client attempts
     * to make a remote call:
     *  - integrity of the call (verify no one corrupts the call)
     *  - client authentication (the client making the call must tell
     *    the server who it is)
     *  - server authentication (the client making the call requires
     *    the server to identify itself to the client)
     *  - when performing server athentication, the server must 
     *    authenticate as at least one of the principals in the given
     *    list; which is ultimately expressed as ConstraintAlternatives
     */
    private serverPrincipals = new InvocationConstraint[]{ new ServerMinPrincipal(phoenixPublicKeyCert),
                                                           new ServerMinPrincipal(reggiePublicKeyCert),
                                                           new ServerMinPrincipal(mahaloPublicKeyCert),
                                                           new ServerMinPrincipal(fiddlerPublicKeyCert),
                                                           new ServerMinPrincipal(normPublicKeyCert),
                                                           new ServerMinPrincipal(mercuryPublicKeyCert),
                                                           new ServerMinPrincipal(outriggerPublicKeyCert)
                                                         };
    private serviceProxyConstraints
         = new BasicMethodConstraints( new InvocationConstraints
                                           ( new InvocationConstraint[]{ Integrity.YES,
                                                                         ClientAuthentication.YES,
                                                                         ServerAuthentication.YES,
                                                                         new ConstraintAlternatives(serverPrincipals)
                                                                       },
                                             null)
                                     );

    /* Create the proxy preparer that should be used to prepare each proxy
     * to the services being started. This preparer should verify trust in
     * each proxy using the constraints specified above. And it should
     * grant to each proxy the following permission(s):
     *
     * When requesting a connection to an entity running in the service's
     * VM (which, in this case, is separate from the setup VM), that 
     * authenticates as at lease one of the service principals listed
     * above, the preparer dynamically grants to the proxy, permission to
     * authenticate as no more than the principal "setup". Although the
     * affected proxy is allowed to make outbound calls ("connect") under
     * the conditions just stated, it is not allowed to accept incoming
     * calls, nor would delegation be allowed if that proxy was allowed
     * to actually make outbound calls.
     *
     * Note: for the activatable case, trust in the service's proxy
     *       currently cannot be verified. This is because each of
     *       the contributed services exports an "outer", smart proxy
     *       that contains an inner proxy (a stub or dynamic proxy).
     *       Currently, the trust verifier provided by each contributed
     *       service does not verify its inner proxy. This means, that
     *       if a proxy preparer requiring trust verification is 
     *       applied to the inner proxy of one of those services,
     *       the verifier will always declare that the inner proxy
     *       is not trusted; and proxy preparation will fail.
     *
     *       Currently, the ServiceStarter applies the same proxy
     *       preparer (the preparer defined below) to both the
     *       inner proxy and the outer proxy. Thus, if the proxy
     *       defined below specifies that trust verification be
     *       performed (as indicated by 'true' input to the first
     *       argument), the service will never be successfully
     *       started (because the service's inner proxy will not
     *       be trusted). Thus, the proxy preparer defined below
     *       does not verify trust.
     *
     *       Future implementations of the contributed services
     *       (as well as the ServiceStarter) may be changed in
     *       such a way that trust can be specified here. When/if
     *       that does occur, simply change 'false' to 'true'
     *       below.
     */
    servicePreparer = new BasicProxyPreparer( false, //no trust verification
                                              serviceProxyConstraints,
                                              new Permission[] { new AuthenticationPermission(setupPublicKeyCert,
                                                                                              servicePublicKeys,
                                                                                              "connect")
                                                               }
                                            );

    /* JAAS Login --------------------------------------------------------------- */

    /* For every object in the activation setup VM that must perform a JAAS
     * login, the JAAS login configuration should contain an entry that
     * identifies the following information used in the login process:
     *  - the keystore from which to retrieve the private key used to login
     *  - the alias of the private key to retrieve
     *  - the (optional) location of the password file(s) from which to retrieve
     *    the appropriate password(s) needed to retrieve the private key information
     *
     * The item below identifies the entry to use, from the JAAS login configuration
     * file for the activation setup VM, when an object in that VM performs a JAAS
     * login.
     */
    loginContext = new LoginContext("setup.jaas.login");

    /* SharedVM-related --------------------------------------------------------- */
    /* Configuration items needed by the ServiceStarter that are related to
     * creating and/or destroying the shared activation group VM
     */
    private static sharedVMPolicyFile = new String("${appHome}${/}example${/}sharedvm${/}jsse${/}policy${/}sharedvm.policy");
    private static sharedVMClasspath  = new String("${jiniHome}${/}lib${/}sharedvm.jar");

    private static groupCodebase   = new String("http://${codebaseHost}:${codebasePort}/group-dl.jar");
    private static groupPolicyFile = new String("${appHome}${/}example${/}sharedvm${/}jsse${/}policy${/}sharedvm.policy");
    private static groupClasspath  = new String("${jiniHome}${/}lib${/}group.jar");
    private static groupImplName   = new String("com.sun.jini.start.SharedGroupImpl");
    private static groupArgsArray  = new String[] { "${appHome}${/}example${/}sharedvm${/}jsse${/}config${/}destroyGroup.config" };

    private static jskDL = HttpmdUtil.computeDigestCodebase("${jiniHome}${/}lib-dl","httpmd://${codebaseHost}:${codebasePort}/jsk-dl.jar;sha=0");

    /* Service-related ---------------------------------------------------------- */
    /* Configuration items needed to by the ServiceStarter to start the services  */

    /* For Reggie */
    private static reggieDL         = HttpmdUtil.computeDigestCodebase("${jiniHome}${/}lib-dl","httpmd://${codebaseHost}:${codebasePort}/reggie-dl.jar;sha=0");
    private static reggieCodebase   = ConfigUtil.concat( new String[] { reggieDL," ",jskDL } );
    private static reggiePolicyFile = new String("${appHome}${/}example${/}reggie${/}jsse${/}policy${/}reggie.policy");
    private static reggieClasspath  = new String("${jiniHome}${/}lib${/}reggie.jar");
    private static reggieImplName   = new String("com.sun.jini.reggie.PersistentRegistrarImpl");
    private static reggieConfig     = new String("${appHome}${/}example${/}reggie${/}jsse${/}config${/}activatable-reggie.config");
    private static reggiePersistCfg = new String[] { "com.sun.jini.reggie.persistenceDirectory=",
                                                     ConfigUtil.stringLiteral("${java.io.tmpdir}jsse-reggie-log") };
    private static reggiePersistDir = ConfigUtil.concat( reggiePersistCfg );
    private static reggieArgsArray  = new String[] { reggieConfig, reggiePersistDir };

    /* For Mahalo */
    private static mahaloDL         = HttpmdUtil.computeDigestCodebase("${jiniHome}${/}lib-dl","httpmd://${codebaseHost}:${codebasePort}/mahalo-dl.jar;sha=0");
    private static mahaloCodebase   = ConfigUtil.concat( new String[] { mahaloDL," ",jskDL } );
    private static mahaloPolicyFile = new String("${appHome}${/}example${/}mahalo${/}jsse${/}policy${/}mahalo.policy");
    private static mahaloClasspath  = new String("${jiniHome}${/}lib${/}mahalo.jar");
    private static mahaloImplName   = new String("com.sun.jini.mahalo.ActivatableMahaloImpl");
    private static mahaloConfig     = new String("${appHome}${/}example${/}mahalo${/}jsse${/}config${/}activatable-mahalo.config");
    private static mahaloPersistCfg = new String[] { "com.sun.jini.mahalo.persistenceDirectory=",
                                                     ConfigUtil.stringLiteral("${java.io.tmpdir}jsse-mahalo-log") };
    private static mahaloPersistDir = ConfigUtil.concat( mahaloPersistCfg );
    private static mahaloArgsArray  = new String[] { mahaloConfig, mahaloPersistDir };

    /* For Fiddler */
    private static fiddlerDL         = HttpmdUtil.computeDigestCodebase("${jiniHome}${/}lib-dl","httpmd://${codebaseHost}:${codebasePort}/fiddler-dl.jar;sha=0");
    private static fiddlerCodebase   = ConfigUtil.concat( new String[] { fiddlerDL," ",jskDL } );
    private static fiddlerPolicyFile = new String("${appHome}${/}example${/}fiddler${/}jsse${/}policy${/}fiddler.policy");
    private static fiddlerClasspath  = new String("${jiniHome}${/}lib${/}fiddler.jar");
    private static fiddlerImplName   = new String("com.sun.jini.fiddler.ActivatableFiddlerImpl");
    private static fiddlerConfig     = new String("${appHome}${/}example${/}fiddler${/}jsse${/}config${/}activatable-fiddler.config");
    private static fiddlerPersistCfg = new String[] { "com.sun.jini.fiddler.persistenceDirectory=",
                                                      ConfigUtil.stringLiteral("${java.io.tmpdir}jsse-fiddler-log") };
    private static fiddlerPersistDir = ConfigUtil.concat( fiddlerPersistCfg );
    private static fiddlerArgsArray  = new String[] { fiddlerConfig, fiddlerPersistDir };

    /* For Norm */
    private static nomrDL         = HttpmdUtil.computeDigestCodebase("${jiniHome}${/}lib-dl","httpmd://${codebaseHost}:${codebasePort}/norm-dl.jar;sha=0");
    private static normCodebase   = ConfigUtil.concat( new String[] { nomrDL," ",jskDL } );
    private static normPolicyFile = new String("${appHome}${/}example${/}norm${/}jsse${/}policy${/}norm.policy");
    private static normClasspath  = new String("${jiniHome}${/}lib${/}norm.jar");
    private static normImplName   = new String("com.sun.jini.norm.ActivatableNormServerImpl");
    private static normConfig     = new String("${appHome}${/}example${/}norm${/}jsse${/}config${/}activatable-norm.config");
    private static normPersistCfg = new String[] { "com.sun.jini.norm.persistenceDirectory=",
                                                   ConfigUtil.stringLiteral("${java.io.tmpdir}jsse-norm-log") };
    private static normPersistDir = ConfigUtil.concat( normPersistCfg );
    private static normArgsArray  = new String[] { normConfig, normPersistDir };

    /* For Mercury */
    private static mercuryDL         = HttpmdUtil.computeDigestCodebase("${jiniHome}${/}lib-dl","httpmd://${codebaseHost}:${codebasePort}/mercury-dl.jar;sha=0");
    private static mercuryCodebase   = ConfigUtil.concat( new String[] { mercuryDL," ",jskDL } );
    private static mercuryPolicyFile = new String("${appHome}${/}example${/}mercury${/}jsse${/}policy${/}mercury.policy");
    private static mercuryClasspath  = new String("${jiniHome}${/}lib${/}mercury.jar");
    private static mercuryImplName   = new String("com.sun.jini.mercury.ActivatableMercuryImpl");
    private static mercuryConfig     = new String("${appHome}${/}example${/}mercury${/}jsse${/}config${/}activatable-mercury.config");
    private static mercuryPersistCfg = new String[] { "com.sun.jini.mercury.persistenceDirectory=",
                                                      ConfigUtil.stringLiteral("${java.io.tmpdir}jsse-mercury-log") };
    private static mercuryPersistDir = ConfigUtil.concat( mercuryPersistCfg );
    private static mercuryArgsArray  = new String[] { mercuryConfig, mercuryPersistDir };

    /* For Outrigger */
    private static outriggerDL         = HttpmdUtil.computeDigestCodebase("${jiniHome}${/}lib-dl","httpmd://${codebaseHost}:${codebasePort}/outrigger-dl.jar;sha=0");
    private static outriggerCodebase   = ConfigUtil.concat( new String[] { outriggerDL," ",jskDL } );
    private static outriggerPolicyFile = new String("${appHome}${/}example${/}outrigger${/}jsse${/}policy${/}outrigger.policy");
    private static outriggerClasspath  = new String("${jiniHome}${/}lib${/}outrigger.jar");
    private static outriggerImplName   = new String("com.sun.jini.outrigger.PersistentOutriggerImpl");
    private static outriggerConfig     = new String("${appHome}${/}example${/}outrigger${/}jsse${/}config${/}activatable-outrigger.config");
    private static outriggerPersistCfg = new String[] { "com.sun.jini.outrigger.persistenceDirectory=",
                                                        ConfigUtil.stringLiteral("${java.io.tmpdir}jsse-outrigger-log") };
    private static outriggerPersistDir = ConfigUtil.concat( outriggerPersistCfg );
    private static outriggerArgsArray  = new String[] { outriggerConfig, outriggerPersistDir };

    /* On the command line, set the system property 'sharedVMLog'
     * to something having the following form:
     *     -DsharedVMLog=/tmp/jsse-all-sharedvm
     */
    private static sharedVMDir      = "${sharedVMLog}";

    private static serverCommand    = null;
    private static serverOptions    = null;
    private static serverProperties = new String[]
     {
      // On the command line, set system property named
      // 'debug' to one of the following:
      // -Ddebug=access,failure
      // -Ddebug=policy,access,failure
      // -Ddebug=all
      // -Ddebug=none (turns security debugging off)
      // -Ddebug=     (same as none)
      "java.security.debug", "${debug}",

      "java.security.auth.login.config", "${appHome}${/}example${/}common${/}jsse${/}login${/}setup.login",
      "javax.net.ssl.trustStore",        "${javax.net.ssl.trustStore}",
      "java.protocol.handler.pkgs",      "${java.protocol.handler.pkgs}",
      "java.security.properties",        "${java.security.properties}",
// ***"java.util.logging.manager",       "${java.util.logging.manager}",
      "java.util.logging.config.file",   "${java.util.logging.config.file}",
      // the following items need to be set on the command line as system properties
      "serverHost", "${serverHost}",
      "jiniHome",   "${jiniHome}",
      "appHome",    "${appHome}"
     };

    private registryHost = "${serverHost}";
    private registryPort = Integer.parseInt("${phoenixPort}");

    /* For creating the shared activation group VM in which each
     * of the activatable services will run.
     */
    private static sharedActivationGroupDescriptor =
                             new SharedActivationGroupDescriptor(sharedVMPolicyFile,
                                                                 sharedVMClasspath,
                                                                 sharedVMDir,
                                                                 serverCommand,
                                                                 serverOptions,
                                                                 serverProperties,
                                                                 registryHost,
                                                                 registryPort );
    /* For destroying the shared activation group VM. */
    private static destroySharedGroupDescriptor =
                             new SharedActivatableServiceDescriptor(groupCodebase,
                                                                    groupPolicyFile,
                                                                    groupClasspath,
                                                                    groupImplName,
                                                                    sharedVMDir,
                                                                    groupArgsArray,
                                                                    false,
                                                                    registryHost,
                                                                    registryPort );
    /* For STARTING each service in the shared VM */
    private static reggieServiceDescriptor =
                             new SharedActivatableServiceDescriptor(reggieCodebase,
                                                                    reggiePolicyFile,
                                                                    reggieClasspath,
                                                                    reggieImplName,
                                                                    sharedVMDir,
                                                                    reggieArgsArray,
                                                                    true,
                                                                    registryHost,
                                                                    registryPort );
    private static mahaloServiceDescriptor =
                             new SharedActivatableServiceDescriptor(mahaloCodebase,
                                                                    mahaloPolicyFile,
                                                                    mahaloClasspath,
                                                                    mahaloImplName,
                                                                    sharedVMDir,
                                                                    mahaloArgsArray,
                                                                    true,
                                                                    registryHost,
                                                                    registryPort );
    private static fiddlerServiceDescriptor =
                             new SharedActivatableServiceDescriptor(fiddlerCodebase,
                                                                    fiddlerPolicyFile,
                                                                    fiddlerClasspath,
                                                                    fiddlerImplName,
                                                                    sharedVMDir,
                                                                    fiddlerArgsArray,
                                                                    true,
                                                                    registryHost,
                                                                    registryPort );
    private static normServiceDescriptor =
                             new SharedActivatableServiceDescriptor(normCodebase,
                                                                    normPolicyFile,
                                                                    normClasspath,
                                                                    normImplName,
                                                                    sharedVMDir,
                                                                    normArgsArray,
                                                                    true,
                                                                    registryHost,
                                                                    registryPort );
    private static mercuryServiceDescriptor =
                             new SharedActivatableServiceDescriptor(mercuryCodebase,
                                                                    mercuryPolicyFile,
                                                                    mercuryClasspath,
                                                                    mercuryImplName,
                                                                    sharedVMDir,
                                                                    mercuryArgsArray,
                                                                    true,
                                                                    registryHost,
                                                                    registryPort );
    private static outriggerServiceDescriptor =
                             new SharedActivatableServiceDescriptor(outriggerCodebase,
                                                                    outriggerPolicyFile,
                                                                    outriggerClasspath,
                                                                    outriggerImplName,
                                                                    sharedVMDir,
                                                                    outriggerArgsArray,
                                                                    true,
                                                                    registryHost,
                                                                    registryPort );

    /* When starting activatable services, the array below should  
     * always place the SharedActivationGroupDescriptor BEFORE the 
     * SharedActivatableServiceDescriptors in the array; and each
     * SharedActivatableServiceDescriptor should be mapped to the
     * desired group VM by specifying the value of the 'sharedVMDIR'
     * argument.
     *
     * Note that it is acceptable (though not typical) to include
     * one or more NonActivatableServiceDescriptors along with the
     * items related to the group VM and the activatable services.
     * If this is done, then the activatable services run in their
     * assigned activation group VM; whereas any non-activatable
     * service(s) will run in the setup VM itself.
     */
    static serviceDescriptors =
                             new ServiceDescriptor[] { sharedActivationGroupDescriptor,
                                                       reggieServiceDescriptor,
                                                       mahaloServiceDescriptor,
                                                       fiddlerServiceDescriptor,
                                                       normServiceDescriptor,
                                                       mercuryServiceDescriptor,
                                                       outriggerServiceDescriptor
                                                     };

    /* The array below is used to destroy the shared activation
     * group VM in which the service started above runs. The
     * command line used to destroy the shared activation group
     * VM should take the following form (assuming unix):
     *
     * > /export/home/j2sdk1.4.1_01/bin/java -jar <jini-install-dir>/lib/destroy.jar <this config file>
     */
    static serviceDestructors =
                             new ServiceDescriptor[] { destroySharedGroupDescriptor };

}//end com.sun.jini.start

