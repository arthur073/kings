############################################################
# Common Logging Configuration File for the Phoenix daemon.
#
# To turn on logging, specify the name of this file as the
# following system property of the associated VM:
#
# -Djava.util.logging.config.file=<appHome>/example/common/phoenix.logging
# -Djava.util.logging.config.file=Drive:\\<appHome>\\example\\common\\phoenix.logging
#
# In order to specify the symbolic names for the
# custom-defined levels (FAILED and HANDLED), the
# following system property should be set:
#
# -Djava.util.logging.manager=com.sun.jini.logging.LogManager
#
############################################################

############################################################
#  	Global properties
############################################################

# "handlers" specifies a comma separated list of log Handler 
# classes.  These handlers will be installed during VM
# startup. Note that these classes must be on the system 
# classpath. By default we only configure a ConsoleHandler,
# which will show messages at the given level as well as
# higher levels.

#handlers = java.util.logging.ConsoleHandler
handlers = java.util.logging.FileHandler, java.util.logging.ConsoleHandler

# Default global logging level.
# This specifies which kinds of events are logged across
# ALL loggers.  For any given facility, this global level
# can be overriden by a facility-specific level.
# Note that below, the ConsoleHandler also has a separate
# level setting (set below) to limit messages printed to
# the console.

.level = INFO

############################################################
# Handler specific properties: formatters and logger levels
############################################################

# For messages printed to the console, use a standard
# formatter, and limit the messages that are printed 
# to the given level and above.

java.util.logging.ConsoleHandler.formatter = java.util.logging.SimpleFormatter
java.util.logging.ConsoleHandler.level = FINEST

# For messages printed to a file, do the following:
# - use either a standard or XML formatter
# - limit the number of bytes to write to any one file to
#   the given number of bytes (limit)
# - limit the number of files to cycle through to the
#   given number of files (count)
# - generate the name of the file to write to using
#   the given pattern 
# - limit the messages that are written to the file 
#   to the given level and above (if the level is not
#   specifically set for the file handler, it will
#   default to Level.ALL),

java.util.logging.FileHandler.formatter = java.util.logging.SimpleFormatter
#java.util.logging.FileHandler.formatter = java.util.logging.XMLFormatter
java.util.logging.FileHandler.limit = 100000
java.util.logging.FileHandler.count = 1
#java.util.logging.FileHandler.pattern = %h/java%u.log
java.util.logging.FileHandler.pattern = %t/phoenix%u.log.%g
java.util.logging.FileHandler.level = INFO

############################################################
# Facility specific properties: logger levels
############################################################

# Default all loggers to a high level, and then 
# turn the individual loggers 'on/off' by setting their
# levels to a lower (finer) value. For example, if a
# logger's level is set to INFO, then only  those log
# records that are at the levels INFO, WARNING, or SEVERE 
# will be written. Whereas, if that logger's level is
# set to FINE, then all log records that are at the levels
# FINE, CONFIG, INFO, WARNING, or SEVERE will be written.
# 
# Note that in order to use the custom-defined levels
# FAILED and HANDLED, do the following:
# 1. import com.sun.jini.logging.levels in your application
# 2. set the following system property on the VM of your
#    application:
# -Djava.util.logging.manager=com.sun.jini.logging.LogManager
#
#  SEVERE (highest value) 
#  WARNING 
#  INFO 
#  CONFIG 
#  FAILED  (custom-defined)
#  HANDLED (custom-defined)
#  FINE 
#  FINER 
#  FINEST (lowest value) 

# For Everything
sun.rmi.level = INFO
net.jini.level = INFO

# For the LogManager
com.sun.jini.logging.LogManager.level = INFO

# For Configuration
net.jini.config.level = INFO

# For activation
net.jini.activation.ActivatableInvocationHandler.level = INFO

# For JRMP
net.jini.jrmp.JrmpExporter.level = INFO

# For Jini ERI
net.jini.jeri.level = INFO
#net.jini.jeri.BasicInvocationDispatcher.level = INFO
#net.jini.jeri.BasicInvocationHandler.level = INFO
#net.jini.jeri.BasicJeriExporter.level = INFO
#net.jini.jeri.BasicObjectEndpoint.level = INFO

# For Jini ERI connection 
#net.jini.jeri.connection.level = INFO
#net.jini.jeri.connection.ConnectionManager.level = INFO
#net.jini.jeri.connection.ServerConnectionManager.level = INFO
#net.jini.jeri.connection.mux.level = INFO

# For HttpEndpoint and HttpServerEndpoint
#net.jini.jeri.http.level = INFO
#net.jini.jeri.http.client.level = INFO
#net.jini.jeri.http.server.level = INFO

# For TcpEndpoint and TcpServerEndpoint
#net.jini.jeri.tcp.level = INFO
#net.jini.jeri.tcp.client.level = INFO
#net.jini.jeri.tcp.server.level = INFO

# For SSL 
#net.jini.jeri.ssl.level = INFO
#net.jini.jeri.ssl.client.level = INFO
#net.jini.jeri.ssl.server.level = INFO
#net.jini.jeri.ssl.init.level = INFO

# For Kerberos 
#net.jini.jeri.kerberos.level = INFO
#net.jini.jeri.kerberos.client.level = INFO
#net.jini.jeri.kerberos.server.level = INFO

# For Preferred Classes
net.jini.loader.pref.PreferredClassLoader.level = INFO
#net.jini.loader.pref.PreferredClassLoader.preferred.level = INFO
#net.jini.loader.pref.PreferredClassLoader.exception.level = INFO
#net.jini.loader.pref.PreferredClassProvider.level = INFO

# For Security: trust, integrity, policy and permission granting,
#               proxy trust verification
net.jini.security.level = INFO
#net.jini.security.trust.level = INFO
#net.jini.security.integrity.level = INFO
#net.jini.security.policy.level = INFO

For HTTPMD
net.jini.url.httpmd.level = INFO

