/* Configuration file containing entries used to configure the
 * ServiceStarter when that ServiceStarter is used to start
 * the Browser using Jini ERI for remote communication
 *
 * When using this file to configure the ServiceStarter framework,
 * the system properties shown below must be set on the command line.
 *
 *  -Djava.security.manager
 *  -Djava.security.policy
 *  -Djava.util.logging.manager
 *  -Djava.util.logging.config.file
 *  -Djava.security.debug (optional)
 *  -Dconfig        (THIS config file)
 *  -DserverHost    (host on which the Browser will run)
 *  -DcodebaseHost  (host running Browser's codebase server)
 *  -DcodebasePort  (port the Browser's codebase server listens on)
 *  -DjiniHome      (base install directory for Jini, ex. /vob/jive, c:\\jini2_0)
 *  -DappHome       (base install directory for examples, ex. /home/tests, c:\\tests)
 * 
 * Below is an example command line on unix. Carriage
 * returns are inserted for readability:
 * 
 * > /export/home/j2sdk1.4.1_01/bin/java
 *    -Djava.security.manager=
 *    -Djava.security.policy=<jini-install-dir>/common/policy/start-service.policy
 *    -Djava.util.logging.manager=com.sun.jini.logging.LogManager
 *    -Djava.util.logging.config.file=<jini-install-dir>/common/logging/jini.logging
 *    -Dconfig=<jini-install-dir>/common/jeri/config/start-browser.config
 *    -DserverHost=<hostname>
 *    -DcodebaseHost=<httpd-hostname>
 *    -DcodebasePort=8080
 *    -DjiniHome=<jini-install-dir>
 *    -DappHome=<example-install-dir>
 *    -jar <jini-install-dir>/lib/start.jar <example-install-dir>/common/jeri/config/start-browser.config
 */

/* The following describes what is required in this file by the
 * ServiceStarter:
 *
 *  - ServiceDescriptor, either of one of the following types: 
 *
 *    The ServiceDescriptor contains the following required and
 *    optional items:
 *      o NonActivatableServiceDescriptor
 *      o required String that specifies the codebase to be used in
 *        the Browser's VM
 *      o required String that specifies the policy file to be used
 *        in the Browser's VM
 *      o required String that specifies the classpath to be used
 *        in the Browser's VM
 *      o required String that specifies the class name of the
 *        instance to construct to start the Browser
 *      o optional String array that specifies the arguments with 
 *        which to configure the Browser. Note that the first element
 *        should be the path and filename of the Browser's configuration 
 *        file, and the remaining arguments can be configuration 
 *        values that override the values in that configuration file
 *
 *    Note: the first element of the first optional String argument
 *          of the ServiceDescriptor represents the location of another
 *          configuration file, different from this config file, that
 *          the Browser uses for its configuration. The Browser will retrieve
 *          the location of that other configuration file from its 
 *          argument list and then performs a number of calls to getEntry
 *          during its initialization, to retrieve the values of the
 *          various configuration entries the Browser expects (refer to the
 *          javadoc of the Browser for a list of what the Browser expects). 
 */
import com.sun.jini.start.NonActivatableServiceDescriptor;
import com.sun.jini.start.ServiceDescriptor;

com.sun.jini.start {

    /* Configuration items needed by the ServiceStarter to start the Browser */

    private static browserCodebase   = new String("http://${codebaseHost}:${codebasePort}/browser-dl.jar http://${codebaseHost}:${codebasePort}/jsk-dl.jar");
    private static browserPolicyFile = new String("${appHome}${/}example${/}browser${/}jeri${/}policy${/}browser.policy");
    private static browserClasspath  = new String("${jiniHome}${/}lib${/}browser.jar");
    private static browserImplName   = new String("com.sun.jini.example.browser.Browser");
    private static browserConfig     = new String("${appHome}${/}example${/}browser${/}jeri${/}config${/}browser.config");
    private static browserArgsArray  = new String[] { browserConfig };

    /* For STARTING the Browser */
    private static nonActivatableServiceDescriptor =
                                new NonActivatableServiceDescriptor(browserCodebase,
                                                                    browserPolicyFile,
                                                                    browserClasspath,
                                                                    browserImplName,
                                                                    browserArgsArray);

    static serviceDescriptors = new ServiceDescriptor[] { nonActivatableServiceDescriptor };

}//end com.sun.jini.start
