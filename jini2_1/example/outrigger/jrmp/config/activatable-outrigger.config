/* Service configuration file containing entries used to configure
 * Outrigger when that service is started by the ServiceStarter
 * framework; satisfying the following criteria:
 *  - uses JRMP for remote invocation
 *  - is activatable
 *  - perists its state
 */
import net.jini.jrmp.JrmpExporter;
import net.jini.security.BasicProxyPreparer;
import net.jini.core.discovery.LookupLocator;
import java.rmi.activation.ActivationID;

com.sun.jini.outrigger {

    /* Exporter(s) -------------------------------------------------------------- */

    /* Create the exporter to use to export the service's backend. Configure
     * the exporter to export the service in the following way:
     *  - use JRMP for remote communciation
     *  - use the specified activation ID, which is the activation ID
     *    associated with the object to export
     *  - when receiving calls, use an anonymous port
     *  - does not use custom socket factories
     */
    serverExporter = new JrmpExporter( (ActivationID)$data, 0 );

    /* Proxy Preparer(s) -------------------------------------------------------- */

    /* The activatable version of this service interacts with the activation
     * framework through proxies to the activation system and the service's
     * activation ID. As such, the service should prepare those proxies before 
     * attempting to use them. A preparer for each such proxy is specifed below.
     */
    activationSystemPreparer = new BasicProxyPreparer();
    activationIdPreparer = new BasicProxyPreparer();

    /* Application-specific Items ----------------------------------------------- */

    persistenceDirectory = new String("${persistDir}");

    initialLookupGroups = new String[] {"JRMP_Group0","JRMP_Group1"};
//    initialLookupGroups   = new String[] {""};
//    initialLookupLocators = new LookupLocator[] { new LookupLocator("jini://${serverHost}")};

}//end com.sun.jini.outrigger
