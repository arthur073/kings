<?xml version="1.0" encoding="UTF-8"?>

<!--

All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.

-->

<tc:tc-config xsi:schemaLocation="http://www.terracotta.org/schema/terracotta-6.xsd" xmlns:tc="http://www.terracotta.org/config" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <!--Server is colocated with client and DSO is listening on
       default port (9510).-->
  <servers>
    <server host="%i" name="sample"/>
  </servers>
  <!--Tell DSO where to put the generated client logs.
       See the Terracotta Configuration Guide and Reference for additional
       information.-->
  <clients>
    <logs>terracotta/client-logs/pojo/inventory/%D</logs>
  </clients>
  <application>
    <dso>
      <!--Our app requires these custom objects/classes to be shared - the following declarations
           tells DSO which ones they are. When the app runs under DSO, instances of these classes
           will broadcast changes in their state.

           A good idiom when writing an app thay you intend to cluster via TC DSO, is to group the 
           classes you wish to share under a single package (although if you follow the MVC pattern
           this tends to happen naturally) - this way the list of classes you wish to instrument
           can be concise 

           Here we're telling DSO to instrument all of the classes found under the 'demo.inventory'
           package-->
      <instrumented-classes>
        <include>
          <class-expression>demo.inventory..*</class-expression>
        </include>
      </instrumented-classes>
      <!--These methods (originating from local objects) operates on objects declared as shared. This
           section tells DSO to assume a lock on those objects for the duration of the call; essentially this
           section declares that all methods found for all classes found for all packages should assume the
           behavior described-->
      <locks>
        <autolock>
          <method-expression>void demo.inventory.Product.setPrice(double)</method-expression>
          <lock-level>write</lock-level>
        </autolock>
        <autolock>
          <method-expression>* demo.inventory.*.get*()</method-expression>
          <lock-level>read</lock-level>
        </autolock>
      </locks>
      <!--We declare the field 'demo.inventory.Main.stores' a root, making it 
           available for all instances of our app that runs via DSO-->
      <roots>
        <root>
          <field-name>demo.inventory.Main.store</field-name>
        </root>
      </roots>
    </dso>
  </application>
</tc:tc-config>