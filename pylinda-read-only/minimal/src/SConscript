Import("env")

try:
    yfile, _ = env.CFile(source="minimal_parser.y", YACCFLAGS="-d")
except ValueError:
    yfile = env.CFile(source="minimal_parser.y", YACCFLAGS="-d")
try:
    lfile, lheader = env.CFile("minimal_lex.l", LEXFLAGS="--header-file=src/yy.lex.h")
except ValueError:
    lfile = env.CFile("minimal_lex.l", LEXFLAGS="--header-file=src/yy.lex.h")

env.SideEffect("#src/yy.lex.h", lfile)
env.Depends(yfile, "#src/yy.lex.h")
objs = env.SharedObject([yfile, lfile, "parse.c", "layer.c", "syntax_tree.c", "refcount.c", "syntax_map.c", "core.c", "interpreter.c", "evaluate.c", "values.c", "value_funcs.c", "serialise.c", "parsexml.c", "type_list.c", "utils.c", "cyclic_garbage.c", "built_in_funcs.c"])
interpreter = env.Object(["main.c"])

#nolinda = env.SharedObject("no_linda.c")

Return("objs", "interpreter") #, "nolinda")
