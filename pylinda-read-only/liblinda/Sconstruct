import sys

defines = {"PYTHON_VERSION": "%s.%s" % (sys.version_info[0], sys.version_info[1])}

text = open(str("config.h.in"), "r").read() % defines
open(str("config.h"), "w").write(text)

if sys.platform == "win32":
    ccflags = "/DWIN32 /D_CRT_SECURE_NO_DEPRECATE "
    cppflags = "/EHsc "
    includes = ["C:\\Development\\Python25\\include", "C:\\Documents And Settings\\Andrew Wilkinson\\My Documents\\Development\\pylinda\\minimal\\src"]
    libdir = ["C:\\Documents And Settings\\Andrew Wilkinson\\My Documents\\Development\\pylinda\\minimal"]
    libs = ["ws2_32"]
    pylib = ["python25"]
else:
    ccflags = "-g -Wall -Werror"
    cppflags = ""
    includes = ["/home/andrew/include", "/usr/include/libxml2"]
    libdir = [".", "/home/andrew/lib"]
    libs = []
    pylib = ["python%i.%i" % (sys.version_info[0], sys.version_info[1]), "readline"]
    schemelib = []

debug = int(ARGUMENTS.get("debug", "1"))
types = int(ARGUMENTS.get("types", "1"))
register = int(ARGUMENTS.get("register", "1"))
memory = int(ARGUMENTS.get("memory", "0"))
network = int(ARGUMENTS.get("network", "0"))

env = Environment(CCFLAGS=ccflags, CPPPATH=["#src/", "#cpp/", "#"] + includes, LIBPATH=libdir)
cppenv = Environment(CCFLAGS=ccflags + cppflags, CPPPATH=["#src/", "#cpp/", "#"] + includes, LIBPATH=libdir)

conf = env.Configure()

if conf.CheckLib("termcap", "BC"):
    needbc = 1
else:
    needbc = 0

if needbc:
    pylib += ["termcap"]

conf.Finish()

if debug:
    env.Append(CCFLAGS=" -DDEBUG")
else:
    env.Append(CCFLAGS=" -O")

if types:
    env.Append(CCFLAGS=" -DTYPES")
if types and register:
    env.Append(CCFLAGS=" -DREGISTER_TYPES")

if network:
    env.Append(CCFLAGS=" -DNETWORK")
if memory:
    env.Append(CCFLAGS=" -DMEMORY")

Export("env")
Export("cppenv")

clientobjs, serverobjs = SConscript("src/SConscript")
cppclientobjs = SConscript("cpp/SConscript")
pyclientobjs, pyserverobjs = SConscript("python/SConscript")
schemeobjs = SConscript("scheme/SConscript")

linda = env.SharedLibrary(target = "linda", source = clientobjs, LIBS=["minimal", "xml2", "fl"] + libs)
cppenv.SharedLibrary(target = "linda++", source = cppclientobjs, LIBS=["linda", "minimal", "xml2", "fl"] + libs)
linda_server = env.SharedLibrary(target = "linda-server", source = serverobjs, LIBS=["minimal", "xml2", "fl"] + libs)

pylinda = env.SharedLibrary(target = "_linda", source = pyclientobjs, SHLIBPREFIX='', LIBS=["linda", "minimal", "xml2", "fl"] + pylib)
pylinda_server = env.SharedLibrary(target = "_linda_server", source = pyserverobjs, SHLIBPREFIX='', LIBS=["linda-server", "minimal", "xml2"] + libs + pylib)

env.SharedLibrary(target = "linda-guile", source = schemeobjs, LIBS=["linda", "minimal", "xml2", "fl"] + schemelib)

env.Depends(pylinda, linda)
env.Depends(pylinda_server, linda_server)

if sys.platform == "win32":
    env.Command("_linda.pyd", "_linda.dll", Copy("$TARGET", "$SOURCE"))
    env.Command("_linda_server.pyd", "_linda_server.dll", Copy("$TARGET", "$SOURCE"))
