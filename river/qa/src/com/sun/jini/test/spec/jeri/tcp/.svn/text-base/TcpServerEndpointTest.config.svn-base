//JERI imports
import net.jini.core.constraint.ClientMaxPrincipal;
import net.jini.core.constraint.ClientAuthentication;
import net.jini.core.constraint.InvocationConstraint;
import net.jini.core.constraint.InvocationConstraints;
import net.jini.jeri.ServerEndpoint;
import net.jini.jeri.tcp.TcpServerEndpoint;
import net.jini.jeri.tcp.TcpEndpoint;

//javax.security
import javax.security.auth.x500.X500Principal;

com.sun.jini.test.spec.jeri.serverendpoint {
    //Endpoint to run interface based tests against
    endpoint = TcpServerEndpoint.getInstance(9090);
    //Endpoints for Equality tests
    equalEndpoint = TcpServerEndpoint.getInstance(9090);
    diffEndpoint = TcpServerEndpoint.getInstance(9091);
    //Number of listen endpoint expected
    expectedListenEndpoints = new Integer(1);
    //Set to true if hasNext() is expected to return true at least once
    usefulIterator = new Boolean(true);
    //ServerEndpoint factory class
    serverEndpointFactory = TcpServerEndpoint.class;
    //Endpoint factory class
    endpointFactory = TcpEndpoint.class;
    //Conflicting InvovationConstraints
    private principal1 = new X500Principal("CN=clientRSA");
    private principal2 = new X500Principal("CN=clientDSA");
    private maxPrincipal1 = new ClientMaxPrincipal(principal1);
    private maxPrincipal2 = new ClientMaxPrincipal(principal2);
    conflictingConstraints = new InvocationConstraints(
        new InvocationConstraint[]{ClientAuthentication.YES,maxPrincipal1,maxPrincipal2},
        new InvocationConstraint[]{});
    //Unsupported InvocationConstraints
    unsupportedConstraints = new InvocationConstraints(
        ClientAuthentication.YES,null);
    //Integrity Supported
    integritySupported = new Boolean(false);
}
