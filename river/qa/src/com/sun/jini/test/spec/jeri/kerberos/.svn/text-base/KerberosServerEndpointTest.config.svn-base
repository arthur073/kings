//JERI imports
import net.jini.core.constraint.ClientMaxPrincipal;
import net.jini.core.constraint.ClientAuthentication;
import net.jini.core.constraint.InvocationConstraint;
import net.jini.core.constraint.InvocationConstraints;
import net.jini.jeri.ServerEndpoint;
import net.jini.jeri.kerberos.KerberosServerEndpoint;
import net.jini.jeri.kerberos.KerberosEndpoint;

//javax.security
import javax.security.auth.kerberos.KerberosPrincipal;

com.sun.jini.test.spec.jeri.serverendpoint {
    //Endpoint to run interface based tests against
    endpoint = KerberosServerEndpoint.getInstance(9090);
    //Endpoints for Equality tests
    equalEndpoint = KerberosServerEndpoint.getInstance(9090);
    diffEndpoint = KerberosServerEndpoint.getInstance(9091);
    //Number of listen endpoint expected
    expectedListenEndpoints = new Integer(1);
    //Set to true if hasNext() is expected to return true at least once
    usefulIterator = new Boolean(true);
    //ServerEndpoint factory class
    serverEndpointFactory = KerberosServerEndpoint.class;
    //Endpoint factory class
    endpointFactory = KerberosEndpoint.class;
    //Conflicting InvovationConstraints
    private principal1 = new KerberosPrincipal("client@DAVIS.JINI.SUN.COM");
    private principal2 = new KerberosPrincipal("server@DAVIS.JINI.SUN.COM");
    private maxPrincipal1 = new ClientMaxPrincipal(principal1);
    private maxPrincipal2 = new ClientMaxPrincipal(principal2);
    conflictingConstraints = new InvocationConstraints(
        new InvocationConstraint[]{maxPrincipal1,maxPrincipal2},
        new InvocationConstraint[]{});
    //Unsupported InvocationConstraints
    unsupportedConstraints = new InvocationConstraints(
        ClientAuthentication.NO,null);
    //Integrity Supported
    integritySupported = new Boolean(true);
}


test {

    loginContext = null;
}

com.sun.jini.qa.harness.config {
    props = "";
}
