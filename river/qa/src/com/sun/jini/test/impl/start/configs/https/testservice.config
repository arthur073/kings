/* Configuration source file for SSL testservice */

/*
 * This service assumes fiddler's for now because no
 * general purpose pool of identities exists at this point
 */

import com.sun.jini.phoenix.*;
import net.jini.jeri.*;
import net.jini.jeri.ssl.HttpsServerEndpoint;
import net.jini.jeri.security.*;
import net.jini.constraint.*;
import net.jini.core.constraint.*;
import net.jini.jeri.*;
import net.jini.security.*;
import net.jini.export.ExportPermission;
import javax.security.auth.login.LoginContext;
import com.sun.jini.config.KeyStores;
import java.security.Permission;
import java.util.Collections;

com.sun.jini.testservice {

    /* 
     * JAAS login and principals
     */
    loginContext = new LoginContext("com.sun.jini.Fiddler");
    private static keystore = KeyStores.getKeyStore(
        "file:${com.sun.jini.qa.home}/harness/trust/truststore",
			     null);
    /* Principals */
    static fiddler =
	KeyStores.getX500Principal("fiddler", keystore);
    private static phoenix =
	KeyStores.getX500Principal("phoenix", keystore);
    private static reggie = 
	KeyStores.getX500Principal("reggie", keystore);
    static tester = 
	KeyStores.getX500Principal("tester", keystore);

    /*
     * Service exporter and client proxy preparers
     */
    exporter =
        new BasicJeriExporter(HttpsServerEndpoint.getInstance(0),
                                    new BasicILFactory(
                                         new BasicMethodConstraints(
                                               new InvocationConstraints(
                                                   new InvocationConstraint[]{
                                                         Integrity.YES,
                                                         ClientAuthentication.YES},
                                                   null)),
                                         AccessPermission.class));


    listenerPreparer = new BasicProxyPreparer(
	true,
	new BasicMethodConstraints(new InvocationConstraints(
       	    new InvocationConstraint[]{
		Integrity.YES,
		ClientAuthentication.YES,
		ServerAuthentication.YES,
		new ServerMinPrincipal(tester)},
	    null)),
	new Permission[]{
	    new AuthenticationPermission(Collections.singleton(fiddler),
					 Collections.singleton(tester),
					 "connect")
	});

    /*
     * Values for talking to the lookup service - lots missing
     */
    private static reggieConstraints =
	new BasicMethodConstraints(
	    new InvocationConstraints(
		new InvocationConstraint[] {
		    Integrity.YES,
		    ClientAuthentication.YES,
		    ServerAuthentication.YES,
		    new ServerMinPrincipal(reggie) },
		null));

    // placeholder
    dmLookupPreparer = new BasicProxyPreparer(
	true,
	reggieConstraints,
	new Permission[]{
	    new AuthenticationPermission(Collections.singleton(fiddler),
					 Collections.singleton(reggie),
					 "connect")
	});
    // also need registrar lease preparers, registration preparers, etc.

    /*
     * Values for talking to the activation system
     */
    private static activationSystemConstraints =
	new BasicMethodConstraints(
	    new InvocationConstraints(
		new InvocationConstraint[] {
		    Integrity.YES,
		    ServerAuthentication.YES,
		    new ServerMinPrincipal(phoenix) },
		null));

    activationSystemPreparer = 
	new BasicProxyPreparer(
	    true, 
	    activationSystemConstraints, 
	    new Permission[]{
		new AuthenticationPermission(Collections.singleton(fiddler),
					     Collections.singleton(phoenix),
					     "connect")
	    });
    activationIdPreparer = 
	new BasicProxyPreparer(true, activationSystemConstraints, null);
}

/* the preparer that a test should use for fiddler's proxy */

preparer {
    proxyPreparer = new BasicProxyPreparer(
	true,
	new BasicMethodConstraints(new InvocationConstraints(
       	    new InvocationConstraint[]{
		Integrity.YES,
		ServerAuthentication.YES,
		new ServerMinPrincipal(com.sun.jini.testservice.fiddler)},
	    null)),
	new Permission[]{
	    new AuthenticationPermission(
			    Collections.singleton(com.sun.jini.testservice.tester),
			    Collections.singleton(com.sun.jini.testservice.fiddler),
			    "connect")
	});
}

com.sun.jini.start {

    private static activationSystemConstraints =
        new BasicMethodConstraints(
            new InvocationConstraints(
                new InvocationConstraint[] {
                    Integrity.YES,
                    ServerAuthentication.YES,
                    new ServerMinPrincipal(com.sun.jini.testservice.phoenix) },
                null));

    activationSystemPreparer =
        new BasicProxyPreparer(
            true,
            activationSystemConstraints,
            new Permission[]{
                new AuthenticationPermission(Collections.singleton(com.sun.jini.testservice.tester),
                                             Collections.singleton(com.sun.jini.testservice.phoenix),
                                             "connect")
            });
 
    activationIDPreparer = activationSystemPreparer;

    private static serviceConstraints = 
	new BasicMethodConstraints(
            new InvocationConstraints(
                new InvocationConstraint[] {
                    Integrity.YES,
		    ClientAuthentication.YES,
                    ServerAuthentication.YES,
                    new ServerMinPrincipal(com.sun.jini.testservice.fiddler) },
                null));

    servicePreparer =
        new BasicProxyPreparer(
            false,
            serviceConstraints,
            new Permission[]{
                new AuthenticationPermission(Collections.singleton(com.sun.jini.testservice.tester),
                                             Collections.singleton(com.sun.jini.testservice.fiddler),
                                             "connect")
            });
}

			    

