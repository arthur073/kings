import net.jini.jeri.*;
import net.jini.jeri.ssl.SslServerEndpoint;
import net.jini.jeri.security.*;
import net.jini.jeri.*;
import net.jini.core.constraint.*;
import net.jini.constraint.*;
import net.jini.security.*;
import net.jini.security.AccessPermission;
import javax.security.auth.login.LoginContext;

test {
    spaceLoginContext = new LoginContext("com.sun.jini.Outrigger");
    mahaloLoginContext = new LoginContext("com.sun.jini.Mahalo");
    testerTransactionManagerExporter =
                 new BasicJeriExporter(
                       SslServerEndpoint.getInstance(0),
                       new BasicILFactory(
                           new BasicMethodConstraints(
                               new InvocationConstraints(
                                   new InvocationConstraint[]{Integrity.YES},
                                   null)),
                           AccessPermission.class));
}

com.sun.jini.test.spec.javaspace.conformance.lease {
    //this value is used instead of Lease.FOREVER 
    //value to avoid infinite lease times*/
    forever=600000;
}

com.sun.jini.test.spec.javaspace.conformance {
    //this value is used for checking read and take invocations
    checkTime="20000";
    //timeout2 must be greater than (timeout1 + instantTime)
    //it is recommended that timeout2 be greater than 
    //(timeout1 + 2*instantTime)*/
    timeout1="30000";
    timeout2="80000";
    //general round trip time expected to non-blocking operations.
    //should be set to checkTime / 2. *
    instantTime = "10000";
}


com.sun.jini.test.share {
    callbackWait="30000";
}
