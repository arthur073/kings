//
//
// Frontend of security policy file. This is prepended to the output
// of the SecurityGenerator output to build the full policy file
//
// Grant all permissions to extension directories
//grant codebase "file:${ext1}/*" {
//    permission java.security.AllPermission;
//};

/**
 * The following grants all permission to jsk-platform.jar and qa1-wrapper.jar.
 * These files were previously installed in the extensions directory.
 */
grant codebase "file:${com.sun.jini.jsk.jars}/jsk-platform.jar" {
    permission java.security.AllPermission "", "";
};

grant codebase "file:${com.sun.jini.qa.jars}/qa1-wrapper.jar" {
    permission java.security.AllPermission "", "";
};

// Grant permission to execute these methods anonymously.  These
// methods are called by the end-to-end test with no client
// constraints, and there are no server constraints specified
// for them.
grant {
    permission com.sun.jini.test.impl.end2end.e2etest.SecureServerPermission "unexport";
    permission com.sun.jini.test.impl.end2end.e2etest.SecureServerPermission "callAfterUnexport";
    permission com.sun.jini.test.impl.end2end.e2etest.SecureServerPermission "getProxyVerifier";
    permission com.sun.jini.test.impl.end2end.e2etest.SecureServerPermission "newProxy";
    permission com.sun.jini.test.impl.end2end.e2etest.SecureServerPermission "getServerSubject";
};

// Grant permissions to the sample program.
grant codebase "${serverCodebase}" {

    // Permission to get the user home directory to find the default keystore
    // file.
    permission java.util.PropertyPermission "user.home", "read";

    // Permission to read the file that contains the keystore password.
    permission java.io.FilePermission "${keyStorePasswordFile}", "read";

    // Permission to read the keystore.
    permission java.io.FilePermission "${keyStoreFile}", "read";

    // Permission to determine location of rmisec file.
    //permission java.util.PropertyPermission "rmisec", "read";

    // Permission to read the serverLog.
    //permission java.util.PropertyPermission
    //             "com.sun.jini.temp.davis.securejeri.jsse.serverLog", "read";

    // Permission to read rmisec file.
    //permission java.io.FilePermission "${rmisec}", "read";

    // JAAS permissions to read and modify the contents of the subject.
    permission javax.security.auth.AuthPermission "modifyPublicCredentials";
    permission javax.security.auth.AuthPermission "modifyPrincipals";
    permission javax.security.auth.AuthPermission "modifyPrivateCredentials";

    // JAAS permissions to perform operations as a subject.
    permission javax.security.auth.AuthPermission "doAsPrivileged";
    permission javax.security.auth.AuthPermission "doAs";

    // Permission to create a LoginContext.
    permission javax.security.auth.AuthPermission "createLoginContext";

    // Permission to get the current subject.
    permission javax.security.auth.AuthPermission "getSubject";

    // permission to network
    permission java.net.SocketPermission "*","accept,connect,listen,resolve" ;

    // Permission to read properties in Utilities
    permission java.util.PropertyPermission "testLevel", "read" ;
    permission java.util.PropertyPermission "firstTest", "read" ;
    permission java.util.PropertyPermission "lastTest", "read" ;
    permission java.util.PropertyPermission "stopOnFail", "read" ;
    permission java.util.PropertyPermission "keyStoreFile", "read" ;
    permission java.security.SecurityPermission "putProviderProperty.TestPrincipalProvider" ;
    permission java.security.SecurityPermission "insertProvider.TestPrincipalProvider" ;
    permission java.security.SecurityPermission "putProviderProperty.TestConstraintProvider" ;
    permission java.security.SecurityPermission "insertProvider.TestConstraintProvider" ;
    permission javax.security.auth.AuthPermission "setReadOnly" ;

    permission java.lang.RuntimePermission "setIO";

    permission java.lang.RuntimePermission "getClassLoader";

    // Permission to read wrapper logging flags and test logging flags
    permission java.util.PropertyPermission "jsseWrapper.logArgs", "read";
    permission java.util.PropertyPermission "end2end.logArgs", "read";
    permission java.util.PropertyPermission "end2end.abortOnFail", "read";
    permission java.util.PropertyPermission "end2end.inhibigDebugHook", "read";
    permission java.util.PropertyPermission "end2end.strongSupported", "read";

};

// Grant permissions to the client code.
grant codebase "${clientCodebase}" {

    // Permission to read wrapper logging flags and test logging flags
    permission java.util.PropertyPermission "jsseWrapper.logArgs", "read";
    permission java.util.PropertyPermission "end2end.logArgs", "read";
    permission java.util.PropertyPermission "end2end.inhibitDebugHook", "read";
    permission java.util.PropertyPermission "end2end.coverage", "read";
    permission java.util.PropertyPermission "end2end.seed", "read";

    // Permission to get the user home directory to find the default keystore
    // file.
    permission java.util.PropertyPermission "user.home", "read";

    // Permission to read the serverLog.
    //permission java.util.PropertyPermission
    //             "com.sun.jini.temp.davis.securejeri.jsse.serverLog", "read";

    // Permission to read the file that contains the keystore password.
    permission java.io.FilePermission "${keyStorePasswordFile}", "read";

    // Permission to read the keystore.
    permission java.io.FilePermission "${keyStoreFile}", "read";

    // Permission to determine location of rmisec file.
    //permission java.util.PropertyPermission "rmisec", "read";

    // Permission to read rmisec file.
    //permission java.io.FilePermission "${rmisec}", "read";

    // JAAS permissions to read and modify the contents of the subject.
    permission javax.security.auth.AuthPermission "modifyPublicCredentials";
    permission javax.security.auth.AuthPermission "modifyPrincipals";
    permission javax.security.auth.AuthPermission "modifyPrivateCredentials";

    // JAAS permissions to perform operations as a subject.
    permission javax.security.auth.AuthPermission "doAsPrivileged";

    // Permission to create a LoginContext.
    permission javax.security.auth.AuthPermission "createLoginContext";

    // Permission to get the current subject.
    permission javax.security.auth.AuthPermission "getSubject";

    // Permission to read properties in Utilities
    permission java.util.PropertyPermission "testLevel", "read" ;
    permission java.util.PropertyPermission "firstTest", "read" ;
    permission java.util.PropertyPermission "lastTest", "read" ;
    permission java.util.PropertyPermission "stopOnFail", "read" ;
    permission java.util.PropertyPermission "keyStoreFile", "read" ;
    permission java.security.SecurityPermission "putProviderProperty.TestPrincipalProvider" ;
    permission java.security.SecurityPermission "insertProvider.TestPrincipalProvider" ;
    permission java.security.SecurityPermission "putProviderProperty.TestConstraintProvider" ;
    permission java.security.SecurityPermission "insertProvider.TestConstraintProvider" ;
    permission javax.security.auth.AuthPermission "setReadOnly" ;

    permission java.lang.RuntimePermission "accessDeclaredMembers" ;
    permission java.lang.RuntimePermission "setContextClassLoader" ;
    permission java.lang.RuntimePermission "getClassLoader";
    permission java.lang.reflect.ReflectPermission "suppressAccessChecks";

    permission java.awt.AWTPermission "showWindowWithoutWarningBanner";
    permission java.util.PropertyPermission "end2end.strongSupported", "read";
};

// Grant permissions to the sample program when authenticated as the server
grant
    principal javax.security.auth.x500.X500Principal "${serverDSADN}"
    codebase "${serverCodebase}"
{
    // Permission to use the RMI registry on the local machine
    permission java.net.SocketPermission
    "129.148.70.190:1099", "connect,resolve";

    // Permission to communicate use sockets on the local machine -- used to
    // establish RMI socket connections
    permission java.net.SocketPermission
    "129.148.70.190:1024-", "connect,accept,resolve";

    // Permission to read the directory containing the sample program's
    // codebase -- needed by RMI
    permission java.io.FilePermission "${codebaseDirectory}${/}-", "read";

    // Permission for the Server to authenticate itself
    permission net.jini.security.AuthenticationPermission
    "javax.security.auth.x500.X500Principal \"${serverRSADN}\" javax.security.auth.x500.X500Principal \"${serverDSADN}\"", "accept";
    // permission to reflect on normally inaccessible fields
    permission java.lang.RuntimePermission "accessDeclaredMembers" ;
    permission java.lang.reflect.ReflectPermission "suppressAccessChecks" ;
    permission java.lang.RuntimePermission "accessClassInPackage.sun.rmi.security" ;

    // permission to get the client subject

    permission net.jini.io.context.ContextPermission "getClientSubject" ;

    permission java.util.PropertyPermission "e2etest.serverProp", "read";
};

// Grant permissions to the sample program when authenticated as the server
grant
    principal javax.security.auth.x500.X500Principal "${serverRSADN}"
    codebase "${serverCodebase}"
{
    // Permission to use the RMI registry on the local machine
    permission java.net.SocketPermission
    "129.148.70.190:1099", "connect,resolve";

    // Permission to communicate use sockets on the local machine -- used to
    // establish RMI socket connections
    permission java.net.SocketPermission
    "129.148.70.190:1024-", "connect,accept,resolve";

    // Permission to read the directory containing the sample program's
    // codebase -- needed by RMI
    permission java.io.FilePermission "${codebaseDirectory}${/}-", "read";

    // Permission for the Server to authenticate itself
    permission net.jini.security.AuthenticationPermission
    "javax.security.auth.x500.X500Principal \"${serverRSADN}\" javax.security.auth.x500.X500Principal \"${serverDSADN}\"", "accept";
    // permission to reflect on normally inaccessible fields
    permission java.lang.RuntimePermission "accessDeclaredMembers" ;
    permission java.lang.reflect.ReflectPermission "suppressAccessChecks" ;
    permission java.lang.RuntimePermission "accessClassInPackage.sun.rmi.security" ;

    // permission to get the client subject

    permission net.jini.io.context.ContextPermission "getClientSubject" ;

    permission java.util.PropertyPermission "e2etest.serverProp", "read";
};

// Grant permissions to the sample program when authenticated as the kerberos server
grant
    principal javax.security.auth.kerberos.KerberosPrincipal "${kerberosServer}",
    codebase "${serverCodebase}"
{
    // Permission to use the RMI registry on the local machine
    permission java.net.SocketPermission
    "129.148.70.190:1099", "connect,resolve";

    // Permission to communicate use sockets on the local machine -- used to
    // establish RMI socket connections
    permission java.net.SocketPermission
    "129.148.70.190:1024-", "connect,accept,resolve";

    // Permission to read the directory containing the sample program's
    // codebase -- needed by RMI
    permission java.io.FilePermission "${codebaseDirectory}${/}-", "read";

    // Permission for the Server to authenticate itself
    permission net.jini.security.AuthenticationPermission
    "javax.security.auth.kerberos.KerberosPrincipal \"${kerberosServer}\"",
     "accept";
    // permission to reflect on normally inaccessible fields
    permission java.lang.RuntimePermission "accessDeclaredMembers" ;
    permission java.lang.reflect.ReflectPermission "suppressAccessChecks" ;
    permission java.lang.RuntimePermission "accessClassInPackage.sun.rmi.security" ;

    // permission to get the client subject

    permission net.jini.io.context.ContextPermission "getClientSubject" ;

    permission java.util.PropertyPermission "e2etest.serverProp", "read";
};

// Grant permissions to the sample program when authenticated as the clientDSA1
// principal.
grant
    principal javax.security.auth.x500.X500Principal "${clientDSA1DN}"
{
    // Permission to use the RMI registry on the local machine.
    permission java.net.SocketPermission
    "129.148.70.190:1099", "connect,resolve";

    // Permission to communicate use sockets on the local machine -- used to
    // establish RMI socket connections.
    permission java.net.SocketPermission
    "129.148.70.190:1024-", "connect,accept,resolve";

    // Permission to read the directory containing the sample program's
    // codebase -- needed by RMI.
    permission java.io.FilePermission "${codebaseDirectory}${/}-", "read";

    // Permission for the client to authenticate itself
    permission net.jini.security.AuthenticationPermission
    "javax.security.auth.x500.X500Principal \"${client1DN}\"", "connect";
    permission net.jini.security.AuthenticationPermission
    "javax.security.auth.x500.X500Principal \"${clientDSA1DN}\"", "connect";
    permission net.jini.security.AuthenticationPermission
    "javax.security.auth.x500.X500Principal \"${clientDSA2DN}\"", "connect";
    permission net.jini.security.AuthenticationPermission
    "javax.security.auth.x500.X500Principal \"${clientRSA1DN}\"", "connect";
    permission net.jini.security.AuthenticationPermission
    "javax.security.auth.x500.X500Principal \"${clientRSA2DN}\"", "connect";

    // Permission to read properties in Utilities
    permission java.util.PropertyPermission "testLevel", "read" ;
    permission java.util.PropertyPermission "firstTest", "read" ;
    permission java.util.PropertyPermission "lastTest", "read" ;
    permission java.util.PropertyPermission "stopOnFail", "read" ;

    // permission to reflect on normally inaccessible fields
    permission java.lang.RuntimePermission "accessDeclaredMembers" ;
    permission java.lang.reflect.ReflectPermission "suppressAccessChecks" ;
    permission java.lang.RuntimePermission "accessClassInPackage.sun.rmi.security" ;

    permission java.util.PropertyPermission "e2etest.clientProp", "read";
};

grant
    principal javax.security.auth.x500.X500Principal "${clientDSA2DN}"
{
    // Permission to use the RMI registry on the local machine.
    permission java.net.SocketPermission
    "129.148.70.190:1099", "connect,resolve";

    // Permission to communicate use sockets on the local machine -- used to
    // establish RMI socket connections.
    permission java.net.SocketPermission
    "129.148.70.190:1024-", "connect,accept,resolve";

    // Permission to read the directory containing the sample program's
    // codebase -- needed by RMI.
    permission java.io.FilePermission "${codebaseDirectory}${/}-", "read";

    // Permission for the client to authenticate itself
    permission net.jini.security.AuthenticationPermission
    "javax.security.auth.x500.X500Principal \"${client1DN}\"", "connect";
    permission net.jini.security.AuthenticationPermission
    "javax.security.auth.x500.X500Principal \"${clientDSA1DN}\"", "connect";
    permission net.jini.security.AuthenticationPermission
    "javax.security.auth.x500.X500Principal \"${clientDSA2DN}\"", "connect";
    permission net.jini.security.AuthenticationPermission
    "javax.security.auth.x500.X500Principal \"${clientRSA1DN}\"", "connect";
    permission net.jini.security.AuthenticationPermission
    "javax.security.auth.x500.X500Principal \"${clientRSA2DN}\"", "connect";

    // Permission to read properties in Utilities
    permission java.util.PropertyPermission "testLevel", "read" ;
    permission java.util.PropertyPermission "firstTest", "read" ;
    permission java.util.PropertyPermission "lastTest", "read" ;
    permission java.util.PropertyPermission "stopOnFail", "read" ;

    // permission to reflect on normally inaccessible fields
    permission java.lang.RuntimePermission "accessDeclaredMembers" ;
    permission java.lang.reflect.ReflectPermission "suppressAccessChecks" ;
    permission java.lang.RuntimePermission "accessClassInPackage.sun.rmi.security" ;

    permission java.util.PropertyPermission "e2etest.clientProp", "read";
};

// Grant permissions to the sample program when authenticated as the client
// principal.
grant
    principal javax.security.auth.x500.X500Principal "${clientRSA1DN}"
{
    // Permission to use the RMI registry on the local machine.
    permission java.net.SocketPermission
    "129.148.70.190:1099", "connect,resolve";

    // Permission to communicate use sockets on the local machine -- used to
    // establish RMI socket connections.
    permission java.net.SocketPermission
    "129.148.70.190:1024-", "connect,accept,resolve";

    // Permission to read the directory containing the sample program's
    // codebase -- needed by RMI.
    permission java.io.FilePermission "${codebaseDirectory}${/}-", "read";

    // Permission for the client to authenticate itself
    permission net.jini.security.AuthenticationPermission
    "javax.security.auth.x500.X500Principal \"${client1DN}\"", "connect";
    permission net.jini.security.AuthenticationPermission
    "javax.security.auth.x500.X500Principal \"${clientDSA1DN}\"", "connect";
    permission net.jini.security.AuthenticationPermission
    "javax.security.auth.x500.X500Principal \"${clientDSA2DN}\"", "connect";
    permission net.jini.security.AuthenticationPermission
    "javax.security.auth.x500.X500Principal \"${clientRSA1DN}\"", "connect";
    permission net.jini.security.AuthenticationPermission
    "javax.security.auth.x500.X500Principal \"${clientRSA2DN}\"", "connect";

    // Permission to read properties in Utilities
    permission java.util.PropertyPermission "testLevel", "read" ;
    permission java.util.PropertyPermission "firstTest", "read" ;
    permission java.util.PropertyPermission "lastTest", "read" ;
    permission java.util.PropertyPermission "stopOnFail", "read" ;

    // permission to reflect on normally inaccessible fields
    permission java.lang.RuntimePermission "accessDeclaredMembers" ;
    permission java.lang.reflect.ReflectPermission "suppressAccessChecks" ;
    permission java.lang.RuntimePermission "accessClassInPackage.sun.rmi.security" ;

    permission java.util.PropertyPermission "e2etest.clientProp", "read";
};

// Grant permissions to the sample program when authenticated as the client
// principal.
grant
    principal javax.security.auth.x500.X500Principal "${clientRSA2DN}"
{
    // Permission to use the RMI registry on the local machine.
    permission java.net.SocketPermission
    "129.148.70.190:1099", "connect,resolve";

    // Permission to communicate use sockets on the local machine -- used to
    // establish RMI socket connections.
    permission java.net.SocketPermission
    "129.148.70.190:1024-", "connect,accept,resolve";

    // Permission to read the directory containing the sample program's
    // codebase -- needed by RMI.
    permission java.io.FilePermission "${codebaseDirectory}${/}-", "read";

    // Permission for the client to authenticate itself
    permission net.jini.security.AuthenticationPermission
    "javax.security.auth.x500.X500Principal \"${client1DN}\"", "connect";
    permission net.jini.security.AuthenticationPermission
    "javax.security.auth.x500.X500Principal \"${clientDSA1DN}\"", "connect";
    permission net.jini.security.AuthenticationPermission
    "javax.security.auth.x500.X500Principal \"${clientDSA2DN}\"", "connect";
    permission net.jini.security.AuthenticationPermission
    "javax.security.auth.x500.X500Principal \"${clientRSA1DN}\"", "connect";
    permission net.jini.security.AuthenticationPermission
    "javax.security.auth.x500.X500Principal \"${clientRSA2DN}\"", "connect";

    // Permission to read properties in Utilities
    permission java.util.PropertyPermission "testLevel", "read" ;
    permission java.util.PropertyPermission "firstTest", "read" ;
    permission java.util.PropertyPermission "lastTest", "read" ;
    permission java.util.PropertyPermission "stopOnFail", "read" ;

    // permission to reflect on normally inaccessible fields
    permission java.lang.RuntimePermission "accessDeclaredMembers" ;
    permission java.lang.reflect.ReflectPermission "suppressAccessChecks" ;
    permission java.lang.RuntimePermission "accessClassInPackage.sun.rmi.security" ;

    permission java.util.PropertyPermission "e2etest.clientProp", "read";
};


// Grant permissions to the sample program when authenticated as the kerberos client
// principal.
grant
    principal javax.security.auth.kerberos.KerberosPrincipal "${kerberosClient}"
{
    // Permission to use the RMI registry on the local machine.
    permission java.net.SocketPermission
    "129.148.70.190:1099", "connect,resolve";

    // Permission to communicate use sockets on the local machine -- used to
    // establish RMI socket connections.
    permission java.net.SocketPermission
    "129.148.70.190:1024-", "connect,accept,resolve";

    // Permission to read the directory containing the sample program's
    // codebase -- needed by RMI.
    permission java.io.FilePermission "${codebaseDirectory}${/}-", "read";

    // Permission for the client to authenticate itself
    permission net.jini.security.AuthenticationPermission
    "javax.security.auth.kerberos.KerberosPrincipal \"${kerberosClient}\"",
    "connect,delegate";
    permission net.jini.security.AuthenticationPermission
    "javax.security.auth.x500.X500Principal \"${clientDSA1DN}\"", "connect";
    permission net.jini.security.AuthenticationPermission
    "javax.security.auth.x500.X500Principal \"${clientDSA2DN}\"", "connect";
    permission net.jini.security.AuthenticationPermission
    "javax.security.auth.x500.X500Principal \"${clientRSA1DN}\"", "connect";
    permission net.jini.security.AuthenticationPermission
    "javax.security.auth.x500.X500Principal \"${clientRSA2DN}\"", "connect";

    // Permission to read properties in Utilities
    permission java.util.PropertyPermission "testLevel", "read" ;
    permission java.util.PropertyPermission "firstTest", "read" ;
    permission java.util.PropertyPermission "lastTest", "read" ;
    permission java.util.PropertyPermission "stopOnFail", "read" ;

    // permission to reflect on normally inaccessible fields
    permission java.lang.RuntimePermission "accessDeclaredMembers" ;
    permission java.lang.reflect.ReflectPermission "suppressAccessChecks" ;
    permission java.lang.RuntimePermission "accessClassInPackage.sun.rmi.security" ;

    permission java.util.PropertyPermission "e2etest.clientProp", "read";
};
/********************************************************************/
