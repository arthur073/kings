import net.jini.discovery.ConstrainableLookupLocator;
import net.jini.activation.ActivationExporter;
import net.jini.jeri.BasicILFactory;
import net.jini.jeri.BasicJeriExporter;
import net.jini.security.BasicProxyPreparer;
import net.jini.jeri.http.HttpServerEndpoint;
import java.rmi.activation.ActivationID;
import net.jini.constraint.BasicMethodConstraints;
import net.jini.constraint.BasicMethodConstraints.MethodDesc;
import net.jini.core.constraint.InvocationConstraint;
import net.jini.core.constraint.InvocationConstraints;
import com.sun.jini.discovery.MulticastTimeToLive;

multicast {
    private ttl = 1;
}

/* Items required by the test harness framework:
 * 
 * - special configuration item used by the test harness
 *   framework to dynamically generate unique directory paths
 *   for the service's persistence directory.
 */

/* Items required by the service */
lookupSimulator {
//  loginContext = null; Not a legal value
    locatorConstraints = discoveryConstraints;
    discoveryConstraints = new BasicMethodConstraints(
        new MethodDesc[] {
            new MethodDesc(new InvocationConstraints(
                new InvocationConstraint[] {
                    new MulticastTimeToLive(multicast.ttl)
                },
                null
            ))
        }
    );
    activationSystemPreparer = new BasicProxyPreparer();
    activationIdPreparer = new BasicProxyPreparer();
}

exporter {
    name = "lookupSimulator.serverExporter";
    activatableExporter = new ActivationExporter(
		      (ActivationID) $data,
		      new BasicJeriExporter(HttpServerEndpoint.getInstance(0),
					    new BasicILFactory(),
					    false,
					    true));
    persistentExporter = new BasicJeriExporter(HttpServerEndpoint.getInstance(0),
				    new BasicILFactory(),
				    false,
				    true);
    transientExporter = persistentExporter;
}
