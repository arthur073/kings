#
# Default values applied to ALL tests
#

# For reggie

net.jini.core.lookup.ServiceRegistrar.type=activatable
net.jini.core.lookup.ServiceRegistrar.impl=com.sun.jini.reggie.PersistentRegistrarImpl
net.jini.core.lookup.ServiceRegistrar.component=com.sun.jini.reggie
net.jini.core.lookup.ServiceRegistrar.classpath=${com.sun.jini.jsk.home}$/lib$/reggie.jar
net.jini.core.lookup.ServiceRegistrar.codebase=http://<gethost>:${com.sun.jini.jsk.port}/reggie-dl.jar http://<gethost>:${com.sun.jini.jsk.port}/jsk-dl.jar
net.jini.core.lookup.ServiceRegistrar.policyfile=<url:harness/policy/defaultreggie.policy>
net.jini.core.lookup.ServiceRegistrar.log=reggie_log
net.jini.core.lookup.ServiceRegistrar.membergroups=QATestDefaultGroup
#net.jini.core.lookup.ServiceRegistrar.port=4160
net.jini.core.lookup.ServiceRegistrar.serviceConfiguration=<url:harness/configs/<config>/reggie/reggie.config>
net.jini.core.lookup.ServiceRegistrar.starterConfiguration=<url:harness/configs/<config>/starter/starter.config>
net.jini.core.lookup.ServiceRegistrar.preparername=test.reggiePreparer
# example type dependent properties
net.jini.core.lookup.ServiceRegistrar.activatable.impl=com.sun.jini.reggie.PersistentRegistrarImpl
net.jini.core.lookup.ServiceRegistrar.persistent.impl=com.sun.jini.reggie.PersistentRegistrarImpl
net.jini.core.lookup.ServiceRegistrar.transient.impl=com.sun.jini.reggie.TransientRegistrarImpl
net.jini.core.lookup.ServiceRegistrar.transient.log=none


#
# For fiddler
#

net.jini.discovery.LookupDiscoveryService.type=activatable
net.jini.discovery.LookupDiscoveryService.impl=com.sun.jini.fiddler.ActivatableFiddlerImpl
net.jini.discovery.LookupDiscoveryService.component=com.sun.jini.fiddler
net.jini.discovery.LookupDiscoveryService.activatable.impl=com.sun.jini.fiddler.ActivatableFiddlerImpl
net.jini.discovery.LookupDiscoveryService.persistent.impl=com.sun.jini.fiddler.NonActivatableFiddlerImpl
net.jini.discovery.LookupDiscoveryService.transient.impl=com.sun.jini.fiddler.TransientFiddlerImpl
net.jini.discovery.LookupDiscoveryService.classpath=${com.sun.jini.jsk.home}$/lib$/fiddler.jar
net.jini.discovery.LookupDiscoveryService.codebase=http://<gethost>:${com.sun.jini.jsk.port}/fiddler-dl.jar http://<gethost>:${com.sun.jini.jsk.port}/jsk-dl.jar
net.jini.discovery.LookupDiscoveryService.policyfile=<url:harness/policy/defaultfiddler.policy>
net.jini.discovery.LookupDiscoveryService.log=fiddler_log
net.jini.discovery.LookupDiscoveryService.tojoin=${net.jini.core.lookup.ServiceRegistrar.membergroups}
net.jini.discovery.LookupDiscoveryService.serviceConfiguration=<url:harness/configs/<config>/fiddler/fiddler.config>
net.jini.discovery.LookupDiscoveryService.starterConfiguration=<url:harness/configs/<config>/starter/starter.config>
net.jini.discovery.LookupDiscoveryService.preparername=test.fiddlerPreparer

#
# For mercury
#

net.jini.event.EventMailbox.type=activatable
net.jini.event.EventMailbox.impl=com.sun.jini.mercury.ActivatableMercuryImpl
net.jini.event.EventMailbox.component=com.sun.jini.mercury
net.jini.event.EventMailbox.activatable.impl=com.sun.jini.mercury.ActivatableMercuryImpl
net.jini.event.EventMailbox.persistent.impl=com.sun.jini.mercury.NonActivatableMercuryImpl
net.jini.event.EventMailbox.transient.impl=com.sun.jini.mercury.TransientMercuryImpl
net.jini.event.EventMailbox.classpath=${com.sun.jini.jsk.home}$/lib$/mercury.jar
net.jini.event.EventMailbox.codebase=http://${HOST}:${com.sun.jini.jsk.port}/mercury-dl.jar http://<gethost>:${com.sun.jini.jsk.port}/jsk-dl.jar
net.jini.event.EventMailbox.policyfile=<url:harness/policy/defaultmercury.policy>
net.jini.event.EventMailbox.log=mercury_log
net.jini.event.EventMailbox.tojoin=${net.jini.core.lookup.ServiceRegistrar.membergroups}
net.jini.event.EventMailbox.serviceConfiguration=<url:harness/configs/<config>/mercury/mercury.config>
net.jini.event.EventMailbox.starterConfiguration=<url:harness/configs/<config>/starter/starter.config>
net.jini.event.EventMailbox.preparername=test.mercuryPreparer

net.jini.event.PullEventMailbox.type=activatable
net.jini.event.PullEventMailbox.impl=com.sun.jini.mercury.ActivatableMercuryImpl
net.jini.event.PullEventMailbox.component=com.sun.jini.mercury
net.jini.event.PullEventMailbox.activatable.impl=com.sun.jini.mercury.ActivatableMercuryImpl
net.jini.event.PullEventMailbox.persistent.impl=com.sun.jini.mercury.NonActivatableMercuryImpl
net.jini.event.PullEventMailbox.transient.impl=com.sun.jini.mercury.TransientMercuryImpl
net.jini.event.PullEventMailbox.classpath=${com.sun.jini.jsk.home}$/lib$/mercury.jar
net.jini.event.PullEventMailbox.codebase=http://${HOST}:${com.sun.jini.jsk.port}/mercury-dl.jar http://<gethost>:${com.sun.jini.jsk.port}/jsk-dl.jar
net.jini.event.PullEventMailbox.policyfile=<url:harness/policy/defaultmercury.policy>
net.jini.event.PullEventMailbox.log=mercury_log
net.jini.event.PullEventMailbox.tojoin=${net.jini.core.lookup.ServiceRegistrar.membergroups}
net.jini.event.PullEventMailbox.serviceConfiguration=<url:harness/configs/<config>/mercury/mercury.config>
net.jini.event.PullEventMailbox.starterConfiguration=<url:harness/configs/<config>/starter/starter.config>
net.jini.event.PullEventMailbox.preparername=test.mercuryPreparer

#
# For norm
#

net.jini.lease.LeaseRenewalService.type=activatable
net.jini.lease.LeaseRenewalService.impl=com.sun.jini.norm.ActivatableNormServerImpl
net.jini.lease.LeaseRenewalService.component=com.sun.jini.norm
net.jini.lease.LeaseRenewalService.activatable.impl=com.sun.jini.norm.ActivatableNormServerImpl
net.jini.lease.LeaseRenewalService.persistent.impl=com.sun.jini.norm.PersistentNormServerImpl
net.jini.lease.LeaseRenewalService.transient.impl=com.sun.jini.norm.TransientNormServerImpl
net.jini.lease.LeaseRenewalService.classpath=${com.sun.jini.jsk.home}$/lib$/norm.jar
net.jini.lease.LeaseRenewalService.codebase=http://${HOST}:${com.sun.jini.jsk.port}/norm-dl.jar http://<gethost>:${com.sun.jini.jsk.port}/jsk-dl.jar
net.jini.lease.LeaseRenewalService.policyfile=<url:harness/policy/defaultnorm.policy>
net.jini.lease.LeaseRenewalService.log=norm_log
net.jini.lease.LeaseRenewalService.tojoin=${net.jini.core.lookup.ServiceRegistrar.membergroups}
net.jini.lease.LeaseRenewalService.serviceConfiguration=<url:harness/configs/<config>/norm/norm.config>
net.jini.lease.LeaseRenewalService.starterConfiguration=<url:harness/configs/<config>/starter/starter.config>
net.jini.lease.LeaseRenewalService.preparername=test.normPreparer

# for mahalo
net.jini.core.transaction.server.TransactionManager.type=activatable
net.jini.core.transaction.server.TransactionManager.impl=com.sun.jini.mahalo.ActivatableMahaloImpl
net.jini.core.transaction.server.TransactionManager.component=com.sun.jini.mahalo
net.jini.core.transaction.server.TransactionManager.activatable.impl=com.sun.jini.mahalo.ActivatableMahaloImpl
net.jini.core.transaction.server.TransactionManager.persistent.impl=com.sun.jini.mahalo.NonActivatableMahaloImpl
net.jini.core.transaction.server.TransactionManager.transient.impl=com.sun.jini.mahalo.TransientMahaloImpl
net.jini.core.transaction.server.TransactionManager.classpath=${com.sun.jini.jsk.home}$/lib$/mahalo.jar
net.jini.core.transaction.server.TransactionManager.codebase=http://${HOST}:${com.sun.jini.jsk.port}/mahalo-dl.jar http://<gethost>:${com.sun.jini.jsk.port}/jsk-dl.jar
net.jini.core.transaction.server.TransactionManager.policyfile=<url:harness/policy/defaultmahalo.policy>
net.jini.core.transaction.server.TransactionManager.log=mahalo_log
net.jini.core.transaction.server.TransactionManager.tojoin=${net.jini.core.lookup.ServiceRegistrar.membergroups}
net.jini.core.transaction.server.TransactionManager.serviceConfiguration=<url:harness/configs/<config>/mahalo/mahalo.config>
net.jini.core.transaction.server.TransactionManager.starterConfiguration=<url:harness/configs/<config>/starter/starter.config>
net.jini.core.transaction.server.TransactionManager.preparername=test.mahaloPreparer

# for outrigger

net.jini.space.JavaSpace.type=activatable
net.jini.space.JavaSpace.impl=com.sun.jini.outrigger.PersistentOutriggerImpl
net.jini.space.JavaSpace.component=com.sun.jini.outrigger
net.jini.space.JavaSpace.activatable.impl=com.sun.jini.outrigger.PersistentOutriggerImpl
net.jini.space.JavaSpace.persistent.impl=com.sun.jini.outrigger.PersistentOutriggerImpl
net.jini.space.JavaSpace.transient.impl=com.sun.jini.outrigger.TransientOutriggerImpl
net.jini.space.JavaSpace.classpath=${com.sun.jini.jsk.home}$/lib$/outrigger.jar
net.jini.space.JavaSpace.codebase=http://${HOST}:${com.sun.jini.jsk.port}/outrigger-dl.jar http://<gethost>:${com.sun.jini.jsk.port}/jsk-dl.jar
net.jini.space.JavaSpace.policyfile=<url:harness/policy/defaultoutrigger.policy>
net.jini.space.JavaSpace.log=FrontEndSpace_log
net.jini.space.JavaSpace.tojoin=${net.jini.core.lookup.ServiceRegistrar.membergroups}
net.jini.space.JavaSpace.serviceConfiguration=<url:harness/configs/<config>/outrigger/outrigger.config>
net.jini.space.JavaSpace.starterConfiguration=<url:harness/configs/<config>/starter/starter.config>
net.jini.space.JavaSpace.preparername=test.outriggerPreparer

#
# For the shared activation group and its SharedGroupImpl
#
sharedGroup.type=group
sharedGroup.classpath=${com.sun.jini.jsk.home}$/lib$/sharedvm.jar$:${com.sun.jini.jsk.home}$/lib$/reference-collections-1.0.1.jar$:${com.sun.jini.jsk.home}$/lib$/high-scale-lib.jar
sharedGroup.starterConfiguration=<url:harness/configs/<config>/starter/starter.config>
sharedGroup.policyfile=<url:harness/policy/defaultsharedvm.policy>
sharedGroup.implPrefix=sharedGroupImpl
sharedGroup.serverjvmargs=-server,${sharedGroup.serverjvmargs}

sharedGroupImpl.type=activatable
sharedGroupImpl.impl=com.sun.jini.start.SharedGroupImpl
sharedGroupImpl.component=com.sun.jini.start
sharedGroupImpl.classpath=${com.sun.jini.jsk.home}$/lib$/group.jar
sharedGroupImpl.codebase=http://${HOST}:${com.sun.jini.jsk.port}/group-dl.jar
sharedGroupImpl.policyfile=<url:harness/policy/defaultgroup.policy>
sharedGroupImpl.serviceConfiguration=<url:harness/configs/<config>/sharedgroup/sharedgroup.config>
sharedGroupImpl.starterConfiguration=<url:harness/configs/<config>/starter/starter.config>
sharedGroupImpl.preparername=test.groupPreparer

#
# For the shared non-activatable group (component name probably unnecessary)
#
nonActivatableGroup.type=nonactivatablegroup
nonActivatableGroup.impl=com.sun.jini.qa.harness.NonActivatableGroupImpl
nonActivatableGroup.component=nonActivatableGroup
nonActivatableGroup.classpath=${com.sun.jini.qa.home}$/lib$/nonactivatablegroup.jar$:${com.sun.jini.jsk.home}$/lib$/start.jar$:${com.sun.jini.jsk.home}$/lib$/jsk-platform.jar$:${com.sun.jini.jsk.home}$/lib$/reference-collections-1.0.1.jar$:${com.sun.jini.jsk.home}$/lib$/high-scale-lib.jar
nonActivatableGroup.codebase=http://${HOST}:${com.sun.jini.qa.port}/nonactivatablegroup-dl.jar
nonActivatableGroup.policyfile=<url:harness/policy/defaultnonactvm.policy>
nonActivatableGroup.serverjvmargs=-server,${nonActivatableGroup.serverjvmargs}

#
# For the VM killer - no preparer defined, since it always uses jeri - no configuration files needed
#
vmKiller.type=activatable
vmKiller.impl=com.sun.jini.qa.harness.KillerImpl
vmKiller.component=vmkiller
vmKiller.classpath=${com.sun.jini.qa.home}$/lib$/harness-killer.jar
vmKiller.codebase=http://${HOST}:${com.sun.jini.qa.port}/harness-killer-dl.jar
vmKiller.policyfile=<url:harness/policy/all.policy>
vmKiller.serviceConfiguration=-
vmKiller.starterConfiguration=-

#
# For the activation system
#
activationSystem.type=phoenix
activationSystem.policyfile=<url:harness/policy/defaultphoenix.policy>
activationSystem.classpath=${com.sun.jini.jsk.home}$/lib$/phoenix.jar$:${com.sun.jini.jsk.home}$/lib$/high-scale-lib.jar$:${com.sun.jini.jsk.home}$/lib$/reference-collections-1.0.1.jar
activationSystem.codebase=http://${HOST}:${com.sun.jini.jsk.port}/phoenix-dl.jar http://<gethost>:${com.sun.jini.jsk.port}/jsk-dl.jar
activationSystem.serviceConfiguration=<url:harness/configs/<config>/phoenix/phoenix.config>
activationSystem.starterConfiguration=<url:harness/configs/<config>/starter/starter.config>
activationSystem.preparername=test.phoenixPreparer
activationSystem.serverjvmargs=-server,${activationSystem.serverjvmargs}

#
# for the JSK class server
#
jiniClassServer.type=classServer
jiniClassServer.impl=com.sun.jini.tool.ClassServer
jiniClassServer.port=${com.sun.jini.jsk.port}
jiniClassServer.dir=${com.sun.jini.jsk.home}$/lib-dl

#
# for the QA class server
#
qaClassServer.type=classServer
qaClassServer.impl=com.sun.jini.tool.ClassServer
qaClassServer.port=${com.sun.jini.qa.port}
qaClassServer.dir=${com.sun.jini.qa.home}$/lib

#
# delay after activation system shutdown to allow for completion
#
com.sun.jini.qa.harness.actdeathdelay=5

#
# required properties for all VM's - higher level defs should be self-referential
#   note that the logging properties will be resolved from the standard
#   system property if that property is defined. The '-OD' marker flags this
#   property as optional. If the property is not defined as a system property
#   or in any configuration file, then the property will not be set on the VM.
#   
#   You might find the following debugging options useful
#       -Djava.security.debug=access:failure,\
#       -Djava.security.manager=com.sun.jini.tool.ProfilingSecurityManager,\
#       -Djava.security.manager=org.apache.river.api.security.CombinerSecurityManager,\
#       -Dpolicy.provider=net.jini.security.policy.DynamicPolicyProvider,\
#       -Djava.security.manager=java.rmi.RMISecurityManager,\


# no cosmetic whitespace
com.sun.jini.qa.harness.globalvmargs=\
-Djava.ext.dirs=${java.ext.dirs},\
-Dcom.sun.jini.jsk.port=${com.sun.jini.jsk.port},\
-Dcom.sun.jini.qa.port=${com.sun.jini.qa.port},\
-Dcom.sun.jini.jsk.home=${com.sun.jini.jsk.home},\
-Dcom.sun.jini.qa.home=${com.sun.jini.qa.home},\
-Dcom.sun.jini.qa.harness.harnessJar=<harnessJar>,\
-Dcom.sun.jini.qa.harness.testJar=<testJar>,\
-Dcom.sun.jini.qa.harness.runjiniserver=${com.sun.jini.qa.harness.runjiniserver},\
-Dcom.sun.jini.qa.harness.runkitserver=${com.sun.jini.qa.harness.runkitserver},\
-Djava.security.properties=${com.sun.jini.qa.harness.securityproperties},\
-Dcom.sun.jini.qa.harness.testhosts=${com.sun.jini.qa.harness.testhosts},\
-Djava.util.logging.config.file=${java.util.logging.config.file}

com.sun.jini.qa.harness.securityproperties=<url: harness/trust/dynamic-policy.properties>

#
# miscellaneous
#
# do not hang a read on System.in
com.sun.jini.qa.harness.bindInput=false

# The default policy files reflect permissions needed for non-secure configurations.
# For secure configurations, these values should be overridden in the configSet.properties
# file in the appropriate configuration tree. The harness requires this property
# to be defined
#
testPolicyfile=<url:harness/policy/defaulttest.policy>

# The default classpath. This property must be defined, and must include
# all Jini dependencies as components

testClasspath=<harnessJar>$:<testJar>$:${com.sun.jini.jsk.home}$/lib$/jsk-platform.jar$:${com.sun.jini.jsk.home}$/lib$/jsk-lib.jar$:${com.sun.jini.jsk.home}$/lib$/high-scale-lib.jar$:${com.sun.jini.jsk.home}$/lib$/reference-collections-1.0.1.jar

# Alternate test classpath, for tests that don't use <testJar>
#
altClasspath=<harnessJar>$:${com.sun.jini.jsk.home}$/lib$/jsk-platform.jar$:${com.sun.jini.jsk.home}$/lib$/jsk-lib.jar$:${com.sun.jini.jsk.home}$/lib$/high-scale-lib.jar$:${com.sun.jini.jsk.home}$/lib$/reference-collections-1.0.1.jar

#
# Services run with server vm; test runs with client vm
#
# Arguments are comma separated. To embed a comma in
# an argument, use "+,".
#
testjvmargs=-client,${testjvmargs}

#
# defined for historical reasons. 
#
HOST=<gethost>

# the standard, configuration dependent, location of configSet.properties
com.sun.jini.qa.harness.configSet=<url:harness/configs/<config>/configSet.properties>

#the default test configuration
com.sun.jini.qa.harness.defaultTestConfig=<url:harness/configs/<config>/test.config>

# stuff to add to the classpath of every vm, intended for things
# like logger filters. If defined, its value will be appended to
# the classpath of every vm command, preceeded by the appropriate
# pathseparator
#globalclasspath=

# all additional defs should be done self-referentially
testOverrideProviders=com.sun.jini.qa.harness.StoreOverrideProvider
