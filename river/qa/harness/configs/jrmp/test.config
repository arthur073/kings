import net.jini.security.BasicProxyPreparer;
import net.jini.jrmp.JrmpExporter;
import net.jini.constraint.BasicMethodConstraints;
import net.jini.constraint.BasicMethodConstraints.MethodDesc;
import net.jini.core.constraint.InvocationConstraint;
import net.jini.core.constraint.InvocationConstraints;
import com.sun.jini.discovery.MulticastTimeToLive;

multicast {
    private ttl = 1;
}

test {

/* reggie defaults */
    reggiePreparer = new BasicProxyPreparer(); 
    reggieAdminPreparer = new BasicProxyPreparer();
    reggieEventRegistrationPreparer = new BasicProxyPreparer();
    reggieServiceRegistrationPreparer = new BasicProxyPreparer();
    reggieServiceLeasePreparer = new BasicProxyPreparer();
    reggieEventLeasePreparer = new BasicProxyPreparer();
    reggieListenerExporter = new JrmpExporter();

/* fiddler defaults */
    fiddlerPreparer = new BasicProxyPreparer();
    fiddlerRegistrationPreparer = new BasicProxyPreparer();
    fiddlerEventRegistrationPreparer = new BasicProxyPreparer();
    fiddlerListenerExporter = new JrmpExporter();
    fiddlerLeasePreparer = new BasicProxyPreparer();
    fiddlerAdminPreparer = new BasicProxyPreparer();

/* norm defaults */
    normPreparer = new BasicProxyPreparer();
    normAdminPreparer = new BasicProxyPreparer();
    normRenewalSetPreparer = new BasicProxyPreparer();
    normEventRegistrationPreparer = new BasicProxyPreparer();
    normListenerExporter = new JrmpExporter();
    normLeasePreparer = new BasicProxyPreparer();

/* mahalo defaults - not sure the transaction preparer makes sense */
    mahaloPreparer = new BasicProxyPreparer();
    mahaloLeasePreparer = new BasicProxyPreparer();
    mahaloAdminPreparer = new BasicProxyPreparer();

/* outrigger defaults */
    outriggerPreparer = new BasicProxyPreparer();
    outriggerListenerExporter = new JrmpExporter();
    outriggerLeasePreparer = new BasicProxyPreparer();
    outriggerAdminPreparer = new BasicProxyPreparer();
    outriggerEventRegistrationPreparer = new BasicProxyPreparer();

/* mercury defaults */
    mercuryPreparer = new BasicProxyPreparer();
    mercuryAdminPreparer = new BasicProxyPreparer();
    mercuryListenerPreparer = new BasicProxyPreparer(); // on getListener proxy
    mercuryLeasePreparer = new BasicProxyPreparer();
    mercuryRegistrationPreparer = new BasicProxyPreparer();
    mercuryListenerExporter = new JrmpExporter(); // on enable delivery target

/* phoenix defaults */
    phoenixPreparer = new BasicProxyPreparer();

/* shared group defaults */
    groupPreparer = new BasicProxyPreparer();

/* transaction defaults ??? */
    transactionParticipantExporter = new JrmpExporter();

/* test lease defaults */
    leaseExporter = new JrmpExporter();
    
/* discovery constraints for generated locators */
    locatorConstraints = discoveryConstraints;

/* discovery constraints for discovery simulator */
    discoveryConstraints = new BasicMethodConstraints(
        new MethodDesc[] {
            new MethodDesc(new InvocationConstraints(
                new InvocationConstraint[] {
                    new MulticastTimeToLive(multicast.ttl)
                },
                null
            ))
        }
    );
} // test

/*
 * Entries for the LookupDiscovery used by tests
 *
 * Only the entry for the registrarPreparer is defined here.
 * The default for all other LookupDiscovery entries are
 * assumed for all configurations.
 */
net.jini.discovery.LookupDiscovery {
    registrarPreparer = new BasicProxyPreparer();
    discoveryConstraints = test.discoveryConstraints;
}

/*
 * Entries for the LookupLocatorDiscovery used by tests
 *
 * Only the entry for the registrarPreparer is defined here.
 * The default for all other LookupLocatorDiscovery entries are
 * assumed for all configurations.
 */
net.jini.discovery.LookupLocatorDiscovery {
    registrarPreparer = new BasicProxyPreparer();
}

net.jini.lookup.JoinManager {
    registrarPreparer = new BasicProxyPreparer();
}

net.jini.lookup.ServiceDiscoveryManager {
    proxyPreparer = new BasicProxyPreparer();
    eventLeasePreparer = new BasicProxyPreparer();
    eventListenerExporter = new JrmpExporter();
}

