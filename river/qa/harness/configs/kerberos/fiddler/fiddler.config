import com.sun.jini.discovery.DiscoveryProtocolVersion;
import com.sun.jini.discovery.MulticastMaxPacketSize;
import com.sun.jini.discovery.MulticastTimeToLive;
import com.sun.jini.discovery.UnicastSocketTimeout;

import java.util.Collections;

import java.security.Permission;

import java.rmi.activation.ActivationID;

import javax.security.auth.kerberos.KerberosPrincipal;
import javax.security.auth.login.LoginContext;

import net.jini.activation.ActivationExporter;
import net.jini.constraint.BasicMethodConstraints;
import net.jini.constraint.BasicMethodConstraints.MethodDesc;
import net.jini.core.constraint.Integrity;
import net.jini.core.constraint.InvocationConstraint;
import net.jini.core.constraint.InvocationConstraints;
import net.jini.core.constraint.ServerAuthentication;
import net.jini.core.constraint.ServerMinPrincipal;
import net.jini.core.discovery.LookupLocator;
import net.jini.discovery.ConstrainableLookupLocator;
import net.jini.jeri.BasicILFactory;
import net.jini.jeri.BasicJeriExporter;
import net.jini.jeri.kerberos.KerberosServerEndpoint;
import net.jini.jeri.ProxyTrustILFactory;
import net.jini.security.AccessPermission;
import net.jini.security.AuthenticationPermission;
import net.jini.security.BasicProxyPreparer;

multicast {
    private ttl = 1;
}

principal {
    /*
     * JAAS principals
     */
    private static fiddler = new KerberosPrincipal("${fiddler}");
    private static phoenix = new KerberosPrincipal("${phoenix}");
    private static reggie = new KerberosPrincipal("${reggie}");
    private static tester = new KerberosPrincipal("${test}");
}

com.sun.jini.fiddler {
    /*
     * Test or test harness specific entries
     */
    locatorConstraints =
        net.jini.discovery.LookupDiscovery.discoveryConstraints;

    /*
     * JAAS login context
     */
    loginContext = new LoginContext("com.sun.jini.Fiddler");

    private testerConstraints = new BasicMethodConstraints(
        new InvocationConstraints(
            new InvocationConstraint[] {
                Integrity.YES,
                ServerAuthentication.YES,
                new ServerMinPrincipal(principal.tester)
            },
            null
        ));
    private testerPermissions = new Permission[] {
        new AuthenticationPermission(
            Collections.singleton(principal.fiddler),
            Collections.singleton(principal.tester),
            "connect")
        };
    listenerPreparer = new BasicProxyPreparer(
        true,
        testerConstraints,
        testerPermissions);
    recoveredListenerPreparer = new BasicProxyPreparer(
        false,
        testerPermissions);

    /*
     * Values for talking to the lookup service - lots missing
     */
    private static reggieConstraints = new BasicMethodConstraints(
        new InvocationConstraints(
            new InvocationConstraint[] {
                Integrity.YES,
                ServerAuthentication.YES,
                new ServerMinPrincipal(principal.reggie)
            },
            null
        ));
    private reggiePermissions = new Permission[] {
        new AuthenticationPermission(
            Collections.singleton(principal.fiddler),
            Collections.singleton(principal.reggie),
            "connect")
        };
    private reggiePreparer = new BasicProxyPreparer(
        true,
        reggieConstraints,
        reggiePermissions);

    locatorToJoinPreparer = reggiePreparer;
    recoveredLocatorToJoinPreparer = new BasicProxyPreparer(
        false,
        reggiePermissions);

    locatorToDiscoverPreparer          = locatorToJoinPreparer;
    recoveredLocatorToDiscoverPreparer = recoveredLocatorToJoinPreparer;

    /*
     * Values for talking to the activation system
     */
    private static activationSystemConstraints = new BasicMethodConstraints(
        new InvocationConstraints(
            new InvocationConstraint[] {
                Integrity.YES,
                ServerAuthentication.YES,
                new ServerMinPrincipal(principal.phoenix)
            },
            null
        ));
    activationSystemPreparer = new BasicProxyPreparer(
        true,
        activationSystemConstraints,
        new Permission[] {
            new AuthenticationPermission(
                Collections.singleton(principal.fiddler),
                Collections.singleton(principal.phoenix),
                "connect")
            }
        );
    activationIdPreparer = new BasicProxyPreparer(
        true,
        activationSystemConstraints,
        null);
} // com.sun.jini.fiddler

net.jini.lookup.JoinManager {
    registrarPreparer    = com.sun.jini.fiddler.reggiePreparer;
    registrationPreparer = com.sun.jini.fiddler.reggiePreparer;
    serviceLeasePreparer = com.sun.jini.fiddler.reggiePreparer;
}
		       
net.jini.discovery.LookupDiscovery {
    registrarPreparer    = com.sun.jini.fiddler.reggiePreparer;
    discoveryConstraints = new BasicMethodConstraints(
        new MethodDesc[]{
            new MethodDesc("unicastDiscovery", new InvocationConstraints(
                new InvocationConstraint[]{
                    ServerAuthentication.YES,
                    Integrity.YES,
                    new ServerMinPrincipal(principal.reggie),
                    DiscoveryProtocolVersion.TWO,
		    new MulticastMaxPacketSize(1024),
		    new MulticastTimeToLive(multicast.ttl),
		    new UnicastSocketTimeout(120000) // 2*60*1000
                },
                null
	    )),
	    new MethodDesc(new InvocationConstraints(
	        new InvocationConstraint[]{
                    DiscoveryProtocolVersion.TWO,
		    new MulticastMaxPacketSize(1024),
		    new MulticastTimeToLive(multicast.ttl),
		    new UnicastSocketTimeout(120000) // 2*60*1000
		},
		null				  
	    ))
	}
    );
} // net.jini.discovery.LookupDiscovery

net.jini.discovery.LookupLocatorDiscovery {
    registrarPreparer    = com.sun.jini.fiddler.reggiePreparer;
}

exporter {
    name = "com.sun.jini.fiddler.serverExporter";
    persistentExporter = new BasicJeriExporter(
	KerberosServerEndpoint.getInstance(0),
                              new ProxyTrustILFactory(
                                    new BasicMethodConstraints(
                                          new InvocationConstraints(
					      Integrity.YES,
                                              null)),
                                    AccessPermission.class));
    transientExporter = persistentExporter;
    activatableExporter = new ActivationExporter(
	(ActivationID) $data, persistentExporter);
}
