import net.jini.discovery.ConstrainableLookupLocator;
import net.jini.core.discovery.LookupLocator;
import net.jini.activation.ActivationExporter;
import net.jini.jeri.BasicJeriExporter;
import net.jini.jeri.BasicILFactory;
import net.jini.jeri.tcp.*;
import net.jini.security.BasicProxyPreparer;
import java.rmi.activation.ActivationID;
import net.jini.constraint.BasicMethodConstraints;
import net.jini.constraint.BasicMethodConstraints.MethodDesc;
import net.jini.core.constraint.InvocationConstraint;
import net.jini.core.constraint.InvocationConstraints;
import com.sun.jini.discovery.MulticastTimeToLive;

multicast {
    private ttl = 1;
}

com.sun.jini.mercury {
    locatorConstraints = net.jini.discovery.LookupDiscovery.discoveryConstraints;
    activationSystemPreparer=new BasicProxyPreparer();
}

net.jini.lookup.JoinManager {
    registrarPreparer = new BasicProxyPreparer();
    registrationPreparer = new BasicProxyPreparer();
    serviceLeasePreparer = new BasicProxyPreparer();
}

net.jini.discovery.LookupDiscovery {
    registrarPreparer = new BasicProxyPreparer();
    discoveryConstraints = new BasicMethodConstraints(
        new MethodDesc[] {
            new MethodDesc(new InvocationConstraints(
                new InvocationConstraint[] {
                    new MulticastTimeToLive(multicast.ttl)
                },
                null
            ))
        }
    );
}

net.jini.discovery.LookupLocatorDiscovery {
    registrarPreparer = new BasicProxyPreparer();
}

exporter {
    name = "com.sun.jini.mercury.serverExporter";
    private defaultendpoint = TcpServerEndpoint.getInstance(0);
    private defaultfactory = new BasicILFactory();
    activatableExporter = new ActivationExporter(
                        (ActivationID) $data,
                        new BasicJeriExporter(defaultendpoint, 
					      defaultfactory));

    persistentExporter = new BasicJeriExporter(defaultendpoint, defaultfactory);
    transientExporter = new BasicJeriExporter(defaultendpoint, defaultfactory);
}


