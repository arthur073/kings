/* Service configuration file containing entries used to configure
 * Fiddler when that service is started by the ServiceStarter
 * framework; satisfying the following criteria:
 *  - uses JERI for remote invocation
 *  - is activatable
 *  - perists its state
 *
 * Note that each exporter configured here employs an underlying
 * exporter that uses an invocation layer factory to create a
 * compatible proxy and invocation dispatcher for the remote
 * object being exported. That invocation layer factory, used
 * in conjunction with the underlying exporter, allows applications
 * to customize the remote invocation and dispatch behavior of the
 * remote object being exported.
 */
import net.jini.activation.ActivationExporter;
import net.jini.jeri.BasicILFactory;
import net.jini.jeri.BasicJeriExporter;
import net.jini.jeri.tcp.TcpServerEndpoint;
import net.jini.security.BasicProxyPreparer;
import net.jini.core.discovery.LookupLocator;
import java.rmi.activation.ActivationID;

com.sun.jini.fiddler {

    /* Exporter(s) -------------------------------------------------------------- */

    /* Create the exporter to use to export the activatable remote
     * service object.
     * 
     * The exporter configured here will export the service in the
     * following way:
     *  - use JERI for remote communciation
     *  - when accepting network connections, use the default endpoint
     *  - to generate the server-side dispatcher for the service, and
     *    to generate the client-side invocation handler for the service's
     *    dynamic proxy, use the specified invocation layer factory
     *  - disable distributed garbage collection (DGC) to the service
     *    so that the service backend is strongly referenced when it is
     *    exported (the default)
     *  - while the service remains exported via this exporter, keep the
     *    virtual machine alive (the default)
     *  - use a default object identifier
     */
    private invocationLayerFactory = new BasicILFactory();
    private underlyingExporter     = new BasicJeriExporter(TcpServerEndpoint.getInstance(0),
                                                           invocationLayerFactory,
                                                           false,
                                                           true);
    serverExporter = new ActivationExporter((ActivationID)$data, underlyingExporter);

    /* Proxy Preparer(s) -------------------------------------------------------- */

    /* The activatable version of this service interacts with the activation
     * framework through proxies to the activation system and the service's
     * activation ID. As such, the service should prepare those proxies before 
     * attempting to use them. A preparer for each such proxy is specifed below.
     */
    activationSystemPreparer = new BasicProxyPreparer();
    activationIdPreparer = new BasicProxyPreparer();

    /* Application-specific Items ----------------------------------------------- */

    persistenceDirectory = new String("${persistDir}");

    initialLookupGroups = new String[] {"JERI_Group0","JERI_Group1"};
//    initialLookupGroups   = new String[] {""};
//    initialLookupLocators = new LookupLocator[] { new LookupLocator("jini://${serverHost}")};

}//end com.sun.jini.fiddler

/* Configuration block for the lookup discovery utility */
net.jini.discovery.LookupDiscovery {

    /* NICs that initially failed are retried after this number of millisecs. */
//    multicastInterfaceRetryInterval = 30000;
    /* EXAMPLES of how to set the NICs to use. Will use ALL NICs if left unset. */
//  multicastInterfaces = new NetworkInterface[] { };// disables multicast
//  multicastInterfaces = null;                      // use system default interface
    /* Set NICs by specific IP addresses. */
//  multicastInterfaces = new NetworkInterface[] { NetworkInterface.getByInetAddress(InetAddress.getByName("192.168.1.10"),
//                                                 NetworkInterface.getByInetAddress(InetAddress.getByName("10.0.0.1")
//                                               };
    /* Set NICs by mix of (fully-qualified) host name and specific IP address. */
//  multicastInterfaces = new NetworkInterface[] { NetworkInterface.getByInetAddress(InetAddress.getByName("myHost.myCompany.com"),
//                                                 NetworkInterface.getByInetAddress(InetAddress.getByName("10.0.0.1")
//                                               };
    /* Set NICs by the NAME of the interface(s) themselves */
//  multicastInterfaces = new NetworkInterface[] { NetworkInterface.getByName("lo0"), //usually the loopback 127.0.01
//                                                 NetworkInterface.getByName("hme0")
//                                               };

}//end net.jini.discovery.LookupDiscovery
