/* Configuration file containing entries used to configure 
 * the activation group VM that is spawned by Phoenix, and
 * which uses JERI for remote communication.
 *
 * For more information, such as an example command line for
 * starting Phoenix, see the configuration file for the
 * corresponding implementation of Phoenix that specifies
 * this configuration file for its activation group VM.
 *
 * Note that the Phoenix activation group exports one remote
 * object:
 *  - activation instantiator
 * That object is exported using an Exporter obtained from this
 * configuration file. The Phoenix activation group VM provides
 * various classes to facilitate the configuration of that
 * exporter, as shown below.
 */
import com.sun.jini.phoenix.AccessILFactory;
import net.jini.jeri.BasicJeriExporter;
import net.jini.jeri.tcp.TcpServerEndpoint;

com.sun.jini.phoenix {

    /* Exporter(s) -------------------------------------------------------------- */

    /* Create the exporter to use to export the activation instantiator.
     * The exporter configured here employs an underlying exporter that
     * uses an invocation layer factory to create a compatible proxy and
     * invocation dispatcher for the remote object being exported. That
     * invocation layer factory, used in conjunction with the underlying 
     * exporter, allows applications to customize the remote invocation
     * and dispatch behavior of the remote object being exported.
     * 
     * The exporter configured here will export the activation
     * instantiator in the following way:
     *  - use JERI for remote communciation
     *  - when accepting network connections, use the default endpoint
     *  - to generate the server-side dispatcher for the activation
     *    instantiator, and to generate the client-side invocation
     *    handler for the activation instantiator's dynamic proxy,
     *    use the specified invocation layer factory
     *  - disable distributed garbage collection (DGC) to the activation
     *    instantiator so that the activation instantiator backend is
     *    strongly referenced when it is exported (the default)
     *  - while the activation instantiator remains exported via this
     *    exporter, keep the virtual machine alive (the default)
     *  - use a unique object identifier, chosen by the JERI runtime,
     *    for the remote object being exported
     */
    private invocationLayerFactory = new AccessILFactory();
    instantiatorExporter = new BasicJeriExporter(TcpServerEndpoint.getInstance(0),
                                                 invocationLayerFactory,
                                                 false,
                                                 true);

    /* Application-specific Items ----------------------------------------------- */

    /* None */

}//end com.sun.jini.phoenix
