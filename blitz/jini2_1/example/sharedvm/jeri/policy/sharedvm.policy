/* General-purpose security policy file for the shared VM created
 * by the ServiceStarter framework.
 *
 * This policy can be used to establish the actions allowed for
 * code running in the shared VM when any combination of the
 * contributed services is started in that shared VM; where each
 * service started uses JERI for remote communcation, and where
 * each executes under one of the following modes:
 *
 *    activatable/persistent
 *    non-activatable/persistent
 *    transient (non-activatable/non-persistent)
 *
 * Note that the system properties "jiniHome" and "appHome"
 * should be set on the VM that reads this policy file. Their
 * values should be, respectively, the full path to the JSK
 * installation directory, and the example installation directory
 * (no trailing slash required).
 * For example,
 *
 *   -DjiniHome=/vob/jive         (unix file system syntax)
 *   -DjiniHome=c:\\home\\jini2_0 (DOS file system syntax)
 *
 *   -DappHome=/home/tests    (unix file system syntax)
 *   -DappHome=c:\\tests      (DOS file system syntax)
 */

/* Code location = the platform jar file
 * Running under = any principal (or none at all)
 * Purpose       = permissions required by the platform to support
 *                 starting a service in a shared VM. Because this
 *                 is platform code which is not downloaded, ALL
 *                 permissions are granted to this codebase.
 */
grant codebase "file:${jiniHome}${/}lib${/}jsk-platform.jar" {
    permission java.security.AllPermission "", "";
};

grant codeBase "file:${jiniHome}${/}lib${/}jsk-lib.jar" {
    permission java.security.AllPermission;
};

/* Code location = part of the classpath of the shared VM
 * Running under = any principal (or none at all)
 * Purpose       = permissions required by the classes, executing in
 *                 the shared VM, that initiates interaction with
 *                 Phoenix. Because this is platform code which is
 *                 not downloaded, it may be acceptable to grant all
 *                 permissions to this codebase.
 */
grant codebase "file:${jiniHome}${/}lib${/}phoenix-init.jar" {

    permission java.lang.RuntimePermission "accessClassInPackage.sun.util.logging.resources";
    permission java.lang.RuntimePermission "getClassLoader";
    permission java.lang.RuntimePermission "setFactory";

    permission java.io.FilePermission "${jiniHome}${/}lib${/}-", "read";
    permission java.io.FilePermission "${appHome}${/}example${/}phoenix${/}jeri${/}config${/}phoenix-group.config", "read";
    permission java.io.FilePermission "${appHome}${/}example${/}sharedvm${/}jeri${/}config${/}destroyGroup.config", "read";

    permission java.net.SocketPermission "*",   "resolve";
    permission java.net.SocketPermission "*:*", "connect,accept";
};

/* Code location = the classpath of the VM in which the service
 *                 runs (for the case of an activatable service
 *                 started by ServiceStarter, that VM is the
 *                 activation group VM; for the case of a
 *                 non-activatable service, that VM is the setup VM).
 *                 VM). That classpath is, 
 *                 <jsk home lib directory>${/}sharedvm.jar.
 * Running under = any principal (or none at all)
 * Purpose       = permissions required by the classes of the
 *                 shared VM to facilitate the starting of a
 *                 service in that VM
 */
grant codebase "file:${java.class.path}" { 

    permission net.jini.security.GrantPermission "java.security.AllPermission";

    permission java.lang.RuntimePermission "createClassLoader";
    permission java.lang.RuntimePermission "getClassLoader";
    permission java.lang.RuntimePermission "setContextClassLoader";
    permission java.lang.RuntimePermission "accessClassInPackage.sun.util.logging.resources";

    permission java.security.SecurityPermission "getPolicy";
    permission java.security.SecurityPermission "setPolicy";

    permission java.util.PropertyPermission "java.security.policy", "read,write";

    /* For aggregate policy */
    permission java.lang.RuntimePermission "getProtectionDomain";
    permission java.lang.RuntimePermission "accessClassInPackage.sun.security.provider";

    permission java.security.SecurityPermission "getProperty.com.sun.jini.start.servicePolicyProvider";
    permission java.security.SecurityPermission "getProperty.com.sun.jini.start.AggregatePolicyProvider.mainPolicyClass";
    permission java.security.SecurityPermission "getProperty.net.jini.security.policy.DynamicPolicyProvider.basePolicyClass";
    permission java.security.SecurityPermission "getProperty.net.jini.security.policy.PolicyFileProvider.basePolicyClass";
}; 

/* Recall that in any shared or non-shared Activation Group VM in which
 * an activatable service executes, there are two "services": the
 * ActivationGroupImpl and the service's backend Impl (for example,
 * RegistrarImpl, FiddlerImpl, MailboxImpl, etc.). Each of those backend
 * implementations perform operations within the same (Group) VM, spawned
 * by Phoenix, for which permissions must be granted.
 *
 * Whereas the permissions specific to a particular service are granted
 * in that service's policy file, the permissions the ServiceStarter
 * framework needs in the shared group VM to start an activatable service
 * are granted in the section specified below.
 */

/* Code location = phoenix-group.jar
 * Running under = any principal (or none at all)
 * Purpose       = this section grants permissions to the backend impl
 * of the activation instantiator (ActivationGroupImpl).
 *
 * The ActivationGroupImpl must be granted certain permissions not
 * required by the service's backend. For example, in order for the
 * ActivationGroupImpl to interact with the activation system and
 * the activation monitor backends running in the Phoenix VM, it must
 * be allowed to do the following:
 *  - accept connection requests from one (or both) of those backends
 *  - request a direct connection with one (or both) of those backends
 *  - make remote invocation(s) through either of the proxies to
 *    those backends
 *
 * Issues such as these are reflected in the permission grant
 * specifications of this section.
 */
grant codebase "file:${jiniHome}${/}lib${/}phoenix-group.jar" {

    permission java.lang.reflect.ReflectPermission "suppressAccessChecks";

    permission java.lang.RuntimePermission "getClassLoader";
    permission java.lang.RuntimePermission "createClassLoader";
    permission java.lang.RuntimePermission "setContextClassLoader";
    permission java.lang.RuntimePermission "setFactory";
    permission java.lang.RuntimePermission "accessDeclaredMembers";
    permission java.lang.RuntimePermission "accessClassInPackage.sun.util.logging.resources";
    permission java.lang.RuntimePermission "modifyThreadGroup";
    permission java.lang.RuntimePermission "modifyThread";
    permission java.lang.RuntimePermission "exitVM";

    permission java.io.FilePermission "${jiniHome}${/}lib${/}jsk-lib.jar", "read";
    permission java.io.FilePermission "${jiniHome}${/}lib${/}group.jar", "read";
    permission java.io.FilePermission "${appHome}${/}example${/}phoenix${/}jeri${/}config${/}phoenix.config", "read";
    permission java.io.FilePermission "${appHome}${/}example${/}phoenix${/}jeri${/}config${/}phoenix-group.config", "read";
    permission java.io.FilePermission "${appHome}${/}example${/}sharedvm${/}jeri${/}config${/}destroyGroup.config", "read";

    permission java.net.SocketPermission "*",       "resolve";
    permission java.net.SocketPermission "*:1024-", "connect,accept";

    permission java.security.SecurityPermission "getPolicy";
    permission java.security.SecurityPermission "setPolicy";

    permission java.util.PropertyPermission "java.security.policy", "read,write";
    permission java.util.PropertyPermission "jiniHome", "read";
    permission java.util.PropertyPermission "appHome", "read";
    permission java.util.PropertyPermission "persistDir", "read";
    permission java.util.PropertyPermission "com.sun.jini.thread.idleThreadTimeout", "read";

    /* For aggregate policy */
    permission java.lang.RuntimePermission "accessClassInPackage.sun.security.provider";

    permission java.security.SecurityPermission "getProperty.com.sun.jini.start.AggregatePolicyProvider.mainPolicyClass";
    permission java.security.SecurityPermission "getProperty.net.jini.security.policy.DynamicPolicyProvider.basePolicyClass";
    permission java.security.SecurityPermission "getProperty.net.jini.security.policy.PolicyFileProvider.basePolicyClass";

    permission net.jini.discovery.DiscoveryPermission "*"; 
    permission net.jini.export.ExportPermission "exportRemoteInterface.com.sun.jini.start.SharedGroupBackEnd";
    permission net.jini.security.GrantPermission "java.security.AllPermission";
    permission com.sun.jini.thread.ThreadPoolPermission "getSystemThreadPool";

    permission com.sun.jini.phoenix.MonitorPermission "*";

    /* Needed when starting any of the persistent services that default
     * to the system tmp directory for their storage location.
     */
    permission java.io.FilePermission "${persistDir}",      "read,write,delete";
    permission java.io.FilePermission "${persistDir}${/}-", "read,write,delete";
    permission java.util.PropertyPermission "java.io.tmpdir", "read";

    permission java.io.FilePermission "${jiniHome}${/}lib${/}jsk-lib.jar", "read";

    /* Needed when starting Reggie */
    permission java.io.FilePermission "${jiniHome}${/}lib${/}reggie.jar",    "read";
    permission java.net.SocketPermission "224.0.1.84", "connect,accept";
    permission java.net.SocketPermission "224.0.1.85", "connect,accept";
    permission java.util.PropertyPermission "net.jini.discovery.interface", "read";
    permission java.io.FilePermission "${appHome}${/}example${/}reggie${/}jeri${/}config${/}activatable-reggie.config", "read";
    permission java.io.FilePermission "${appHome}${/}example${/}reggie${/}jeri${/}config${/}nonactivatable-reggie.config", "read";
    permission java.io.FilePermission "${appHome}${/}example${/}reggie${/}jeri${/}config${/}transient-reggie.config", "read";
    permission java.io.FilePermission "${java.io.tmpdir}jeri-reggie-log",      "read,write,delete";
    permission java.io.FilePermission "${java.io.tmpdir}jeri-reggie-log${/}-", "read,write,delete";
    permission java.io.FilePermission "${/}tmp${/}jeri-reggie-log",      "read,write,delete";
    permission java.io.FilePermission "${/}tmp${/}jeri-reggie-log${/}-", "read,write,delete";
    permission net.jini.export.ExportPermission "exportRemoteInterface.com.sun.jini.reggie.Registrar";

    /* Needed when starting Mahalo */
    permission java.io.FilePermission "${jiniHome}${/}lib${/}mahalo.jar",    "read";
    permission java.io.FilePermission "${appHome}${/}example${/}mahalo${/}jeri${/}config${/}activatable-mahalo.config", "read";
    permission java.io.FilePermission "${appHome}${/}example${/}mahalo${/}jeri${/}config${/}nonactivatable-mahalo.config", "read";
    permission java.io.FilePermission "${appHome}${/}example${/}mahalo${/}jeri${/}config${/}transient-mahalo.config", "read";
    permission java.io.FilePermission "${java.io.tmpdir}jeri-mahalo-log",      "read,write,delete";
    permission java.io.FilePermission "${java.io.tmpdir}jeri-mahalo-log${/}-", "read,write,delete";
    permission java.io.FilePermission "${/}tmp${/}jeri-mahalo-log",      "read,write,delete";
    permission java.io.FilePermission "${/}tmp${/}jeri-mahalo-log${/}-", "read,write,delete";
    permission net.jini.export.ExportPermission "exportRemoteInterface.com.sun.jini.mahalo.TxnManager";

    /* Needed when starting Fiddler */
    permission java.io.FilePermission "${jiniHome}${/}lib${/}fiddler.jar",   "read";
    permission java.io.FilePermission "${appHome}${/}example${/}fiddler${/}jeri${/}config${/}activatable-fiddler.config", "read";
    permission java.io.FilePermission "${appHome}${/}example${/}fiddler${/}jeri${/}config${/}nonactivatable-fiddler.config", "read";
    permission java.io.FilePermission "${appHome}${/}example${/}fiddler${/}jeri${/}config${/}transient-fiddler.config", "read";
    permission java.io.FilePermission "${java.io.tmpdir}jeri-fiddler-log",      "read,write,delete";
    permission java.io.FilePermission "${java.io.tmpdir}jeri-fiddler-log${/}-", "read,write,delete";
    permission java.io.FilePermission "${/}tmp${/}jeri-fiddler-log",      "read,write,delete";
    permission java.io.FilePermission "${/}tmp${/}jeri-fiddler-log${/}-", "read,write,delete";
    permission net.jini.export.ExportPermission "exportRemoteInterface.com.sun.jini.fiddler.Fiddler";

    /* Needed when starting Norm */
    permission java.io.FilePermission "${jiniHome}${/}lib${/}norm.jar",      "read";
    permission java.io.FilePermission "${appHome}${/}example${/}norm${/}jeri${/}config${/}activatable-norm.config", "read";
    permission java.io.FilePermission "${appHome}${/}example${/}norm${/}jeri${/}config${/}nonactivatable-norm.config", "read";
    permission java.io.FilePermission "${appHome}${/}example${/}norm${/}jeri${/}config${/}transient-norm.config", "read";
    permission java.io.FilePermission "${java.io.tmpdir}jeri-norm-log",      "read,write,delete";
    permission java.io.FilePermission "${java.io.tmpdir}jeri-norm-log${/}-", "read,write,delete";
    permission java.io.FilePermission "${/}tmp${/}jeri-norm-log",      "read,write,delete";
    permission java.io.FilePermission "${/}tmp${/}jeri-norm-log${/}-", "read,write,delete";
    permission net.jini.export.ExportPermission "exportRemoteInterface.com.sun.jini.norm.NormServer";

    /* Needed when starting Mercury */
    permission java.io.FilePermission "${jiniHome}${/}lib${/}mercury.jar",   "read";
    permission java.io.FilePermission "${appHome}${/}example${/}mercury${/}jeri${/}config${/}activatable-mercury.config", "read";
    permission java.io.FilePermission "${appHome}${/}example${/}mercury${/}jeri${/}config${/}nonactivatable-mercury.config", "read";
    permission java.io.FilePermission "${appHome}${/}example${/}mercury${/}jeri${/}config${/}transient-mercury.config", "read";
    permission java.io.FilePermission "${java.io.tmpdir}jeri-mercury-log",      "read,write,delete";
    permission java.io.FilePermission "${java.io.tmpdir}jeri-mercury-log${/}-", "read,write,delete";
    permission java.io.FilePermission "${/}tmp${/}jeri-mercury-log",      "read,write,delete";
    permission java.io.FilePermission "${/}tmp${/}jeri-mercury-log${/}-", "read,write,delete";
    permission net.jini.export.ExportPermission "exportRemoteInterface.com.sun.jini.mercury.MailboxBackEnd";

    /* Needed when starting Outrigger */
    permission java.io.FilePermission "${jiniHome}${/}lib${/}outrigger.jar", "read";
    permission java.io.FilePermission "${jiniHome}${/}lib${/}outrigger-logstore.jar", "read";
    permission java.io.FilePermission "${jiniHome}${/}lib${/}pro.zip", "read";
    permission java.io.FilePermission "${appHome}${/}example${/}outrigger${/}jeri${/}config${/}activatable-outrigger.config", "read";
    permission java.io.FilePermission "${appHome}${/}example${/}outrigger${/}jeri${/}config${/}nonactivatable-outrigger.config", "read";
    permission java.io.FilePermission "${appHome}${/}example${/}outrigger${/}jeri${/}config${/}transient-outrigger.config", "read";
    permission java.io.FilePermission "${java.io.tmpdir}jeri-outrigger-log",      "read,write,delete";
    permission java.io.FilePermission "${java.io.tmpdir}jeri-outrigger-log${/}-", "read,write,delete";
    permission java.io.FilePermission "${/}tmp${/}jeri-outrigger-log",      "read,write,delete";
    permission java.io.FilePermission "${/}tmp${/}jeri-outrigger-log${/}-", "read,write,delete";
    permission net.jini.export.ExportPermission "exportRemoteInterface.com.sun.jini.outrigger.OutriggerServer";
    permission java.util.PropertyPermission "com.sun.jini.outrigger.backend.gcInterval", "read";
    permission java.util.PropertyPermission "*", "read,write";
};

/* Permissions specific to each service that may be started by
 * the ServiceStarter framework. The ServiceStarter framework
 * must be able to access the various permissions reflected in
 * service-specific policy files specified in each section below.
 */
grant codebase "file:${jiniHome}${/}lib${/}reggie.jar" {
    permission com.sun.jini.start.SharedActivationPolicyPermission "${appHome}${/}example${/}reggie${/}jeri${/}policy${/}reggie.policy";
    permission com.sun.jini.start.SharedActivationPolicyPermission "${jiniHome}${/}policy${/}policy.all";
};

grant codebase "file:${jiniHome}${/}lib${/}mahalo.jar" {
    permission com.sun.jini.start.SharedActivationPolicyPermission "${appHome}${/}example${/}mahalo${/}jeri${/}policy${/}mahalo.policy";
    permission com.sun.jini.start.SharedActivationPolicyPermission "${jiniHome}${/}policy${/}policy.all";
};

grant codebase "file:${jiniHome}${/}lib${/}fiddler.jar" {
    permission com.sun.jini.start.SharedActivationPolicyPermission "${appHome}${/}example${/}fiddler${/}jeri${/}policy${/}fiddler.policy";
    permission com.sun.jini.start.SharedActivationPolicyPermission "${jiniHome}${/}policy${/}policy.all";
};

grant codebase "file:${jiniHome}${/}lib${/}norm.jar" {
    permission com.sun.jini.start.SharedActivationPolicyPermission "${appHome}${/}example${/}norm${/}jeri${/}policy${/}norm.policy";
    permission com.sun.jini.start.SharedActivationPolicyPermission "${jiniHome}${/}policy${/}policy.all";
};

grant codebase "file:${jiniHome}${/}lib${/}mercury.jar" {
    permission com.sun.jini.start.SharedActivationPolicyPermission "${appHome}${/}example${/}mercury${/}jeri${/}policy${/}mercury.policy";
    permission com.sun.jini.start.SharedActivationPolicyPermission "${jiniHome}${/}policy${/}policy.all";
};

grant codebase "file:${jiniHome}${/}lib${/}outrigger.jar" {
    permission com.sun.jini.start.SharedActivationPolicyPermission "${appHome}${/}example${/}outrigger${/}jeri${/}policy${/}outrigger.policy";
    permission com.sun.jini.start.SharedActivationPolicyPermission "${jiniHome}${/}policy${/}policy.all";
};

grant codebase "file:${jiniHome}${/}lib${/}group.jar" {

    permission java.lang.RuntimePermission "accessClassInPackage.sun.util.logging.resources";
    permission java.lang.RuntimePermission "exitVM";
    permission java.lang.RuntimePermission "getClassLoader";

    permission java.io.FilePermission "${appHome}${/}example${/}sharedvm${/}jeri${/}config${/}destroyGroup.config", "read";
    permission java.net.SocketPermission "*",       "resolve";
    permission java.net.SocketPermission "*:1024-", "connect,accept";
    permission java.util.PropertyPermission "jiniHome", "read";
    permission java.util.PropertyPermission "appHome", "read";

    permission net.jini.export.ExportPermission "exportRemoteInterface.com.sun.jini.start.SharedGroupBackEnd";

    permission com.sun.jini.start.SharedActivationPolicyPermission "${jiniHome}${/}policy${/}policy.all";
    permission com.sun.jini.start.SharedActivationPolicyPermission "${appHome}${/}example${/}sharedvm${/}jeri${/}policy${/}sharedvm.policy";
};
