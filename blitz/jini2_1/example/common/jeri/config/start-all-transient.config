/* Configuration file containing entries used to configure the
 * ServiceStarter when that ServiceStarter is used to start
 * ALL of the contributed services, where each such service
 * satisfies the following criteria:
 *  - uses JERI for remote invocation
 *  - is NOT activatable
 *  - does NOT persist its state
 *
 * When using this file to configure the ServiceStarter framework,
 * the system properties shown below must be set on the command line.
 *
 *  -Djava.security.manager
 *  -Djava.security.policy
 *  -Djava.util.logging.manager
 *  -Djava.util.logging.config.file
 *  -Djava.security.debug (optional)
 *  -Dconfig       (THIS config file)
 *  -DserverHost   (host running phoenix and/or the service being started)
 *  -DcodebaseHost (host running service's codebase server)
 *  -DcodebasePort (port service's codebase server listens on)
 *  -DjiniHome     (base install directory for Jini, ex. /vob/jive, c:\\jini2_0)
 *  -DappHome      (base install directory for examples, ex. /home/tests, c:\\tests)
 *
 * Below is an example command line on unix. Carriage
 * returns are inserted for readability:
 * 
 * > /export/home/j2sdk1.4.1_01/bin/java
 *    -Djava.security.manager=
 *    -Djava.security.policy=<jini-install-dir>/common/jeri/policy/start-service.policy
 *    -Djava.util.logging.manager=com.sun.jini.logging.LogManager
 *    -Djava.util.logging.config.file=<jini-install-dir>/common/logging/jini.logging
 *    -Dconfig=<jini-install-dir>/common/jeri/config/start-all-transient.config
 *    -DserverHost=<hostname>
 *    -DcodebaseHost=<httpd-hostname>
 *    -DcodebasePort=8080
 *    -DjiniHome=<jini-install-dir>
 *    -DappHome=<example-install-dir>
 *    -jar <jini-install-dir>/lib/start.jar <example-install-dir>/common/jeri/config/start-all-transient.config
 */

/* The following describes what is required in this file by the
 * ServiceStarter:
 *
 *    For each service being started, the associated ServiceDescriptor
 *    contains the following required and optional items:
 *
 *      o NonActivatableServiceDescriptor (because the service
 *        is not activatable)
 *      o required String that specifies the codebase to be used in
 *        the service's VM
 *      o required String that specifies the policy file to be used
 *        in the service's VM
 *      o required String that specifies the classpath to be used
 *        in the service's VM
 *      o required String that specifies the impl class name of
 *        the service to be started
 *      o optional String array that specifies the arguments with 
 *        which to configure the service. Note that the first
 *        element should be the path and filename of the service's
 *        configuration file, and the remaining arguments can be
 *        configuration values that override the values in that
 *        configuration file
 *
 *    Note: the first element of the first optional String argument
 *          of the ServiceDescriptor represents the location of another
 *          configuration file, different from this config file, that the
 *          service uses for its configuration. The service implementation
 *          retrieves the location of that other configuration file from
 *          its argument list and then performs a number of calls to getEntry
 *          during its initialization, to retrieve the values of the
 *          various configuration entries the service expects (refer to the
 *          javadoc of the service for a list of what the service expects). 
 */
import com.sun.jini.start.NonActivatableServiceDescriptor;
import com.sun.jini.start.ServiceDescriptor;

com.sun.jini.start {

    /* Service-related ---------------------------------------------------------- */
    /* Configuration items needed to by the ServiceStarter to start the services  */

    /* For Reggie */
    private static reggieCodebase   = new String("http://${codebaseHost}:${codebasePort}/reggie-dl.jar http://${codebaseHost}:${codebasePort}/jsk-dl.jar");
    private static reggiePolicyFile = new String("${appHome}${/}example${/}reggie${/}jeri${/}policy${/}reggie.policy");
    private static reggieClasspath  = new String("${jiniHome}${/}lib${/}reggie.jar");
    private static reggieImplName   = new String("com.sun.jini.reggie.TransientRegistrarImpl");
    private static reggieConfig     = new String("${appHome}${/}example${/}reggie${/}jeri${/}config${/}transient-reggie.config");
    private static reggieArgsArray  = new String[] { reggieConfig };

    /* For Mahalo */
    private static mahaloCodebase   = new String("http://${codebaseHost}:${codebasePort}/mahalo-dl.jar http://${codebaseHost}:${codebasePort}/jsk-dl.jar");
    private static mahaloPolicyFile = new String("${appHome}${/}example${/}mahalo${/}jeri${/}policy${/}mahalo.policy");
    private static mahaloClasspath  = new String("${jiniHome}${/}lib${/}mahalo.jar");
    private static mahaloImplName   = new String("com.sun.jini.mahalo.TransientMahaloImpl");
    private static mahaloConfig     = new String("${appHome}${/}example${/}mahalo${/}jeri${/}config${/}transient-mahalo.config");
    private static mahaloArgsArray  = new String[] { mahaloConfig };

    /* For Fiddler */
    private static fiddlerCodebase   = new String("http://${codebaseHost}:${codebasePort}/fiddler-dl.jar http://${codebaseHost}:${codebasePort}/jsk-dl.jar");
    private static fiddlerPolicyFile = new String("${appHome}${/}example${/}fiddler${/}jeri${/}policy${/}fiddler.policy");
    private static fiddlerClasspath  = new String("${jiniHome}${/}lib${/}fiddler.jar");
    private static fiddlerImplName   = new String("com.sun.jini.fiddler.TransientFiddlerImpl");
    private static fiddlerConfig     = new String("${appHome}${/}example${/}fiddler${/}jeri${/}config${/}transient-fiddler.config");
    private static fiddlerArgsArray  = new String[] { fiddlerConfig };

    /* For Norm */
    private static normCodebase   = new String("http://${codebaseHost}:${codebasePort}/norm-dl.jar http://${codebaseHost}:${codebasePort}/jsk-dl.jar");
    private static normPolicyFile = new String("${appHome}${/}example${/}norm${/}jeri${/}policy${/}norm.policy");
    private static normClasspath  = new String("${jiniHome}${/}lib${/}norm.jar");
    private static normImplName   = new String("com.sun.jini.norm.TransientNormServerImpl");
    private static normConfig     = new String("${appHome}${/}example${/}norm${/}jeri${/}config${/}transient-norm.config");
    private static normArgsArray  = new String[] { normConfig };

    /* For Mercury */
    private static mercuryCodebase   = new String("http://${codebaseHost}:${codebasePort}/mercury-dl.jar http://${codebaseHost}:${codebasePort}/jsk-dl.jar");
    private static mercuryPolicyFile = new String("${appHome}${/}example${/}mercury${/}jeri${/}policy${/}mercury.policy");
    private static mercuryClasspath  = new String("${jiniHome}${/}lib${/}mercury.jar");
    private static mercuryImplName   = new String("com.sun.jini.mercury.TransientMercuryImpl");
    private static mercuryConfig     = new String("${appHome}${/}example${/}mercury${/}jeri${/}config${/}transient-mercury.config");
    private static mercuryArgsArray  = new String[] { mercuryConfig };

    /* For Outrigger */
    private static outriggerCodebase   = new String("http://${codebaseHost}:${codebasePort}/outrigger-dl.jar http://${codebaseHost}:${codebasePort}/jsk-dl.jar");
    private static outriggerPolicyFile = new String("${appHome}${/}example${/}outrigger${/}jeri${/}policy${/}outrigger.policy");
    private static outriggerClasspath  = new String("${jiniHome}${/}lib${/}outrigger.jar");
    private static outriggerImplName   = new String("com.sun.jini.outrigger.TransientOutriggerImpl");
    private static outriggerConfig     = new String("${appHome}${/}example${/}outrigger${/}jeri${/}config${/}transient-outrigger.config");
    private static outriggerArgsArray  = new String[] { outriggerConfig };

    /* For STARTING Non-activatable (persistent or transient) services */
    private static reggieServiceDescriptor =
                             new NonActivatableServiceDescriptor(reggieCodebase,
                                                                 reggiePolicyFile,
                                                                 reggieClasspath,
                                                                 reggieImplName,
                                                                 reggieArgsArray);
    private static mahaloServiceDescriptor =
                             new NonActivatableServiceDescriptor(mahaloCodebase,
                                                                 mahaloPolicyFile,
                                                                 mahaloClasspath,
                                                                 mahaloImplName,
                                                                 mahaloArgsArray);
    private static fiddlerServiceDescriptor =
                             new NonActivatableServiceDescriptor(fiddlerCodebase,
                                                                 fiddlerPolicyFile,
                                                                 fiddlerClasspath,
                                                                 fiddlerImplName,
                                                                 fiddlerArgsArray);
    private static normServiceDescriptor =
                             new NonActivatableServiceDescriptor(normCodebase,
                                                                 normPolicyFile,
                                                                 normClasspath,
                                                                 normImplName,
                                                                 normArgsArray);
    private static mercuryServiceDescriptor =
                             new NonActivatableServiceDescriptor(mercuryCodebase,
                                                                 mercuryPolicyFile,
                                                                 mercuryClasspath,
                                                                 mercuryImplName,
                                                                 mercuryArgsArray);
    private static outriggerServiceDescriptor =
                             new NonActivatableServiceDescriptor(outriggerCodebase,
                                                                 outriggerPolicyFile,
                                                                 outriggerClasspath,
                                                                 outriggerImplName,
                                                                 outriggerArgsArray);
    /* The services to start */
    static serviceDescriptors =
                             new ServiceDescriptor[] { reggieServiceDescriptor,
                                                       mahaloServiceDescriptor,
                                                       fiddlerServiceDescriptor,
                                                       normServiceDescriptor,
                                                       mercuryServiceDescriptor,
                                                       outriggerServiceDescriptor
                                                     };

}//end com.sun.jini.start

