/* Configuration file containing entries used to configure the
 * ServiceStarter when that ServiceStarter is used to start
 * ONE service satisfying the following criteria:
 *  - uses JERI for remote invocation
 *  - is NOT activatable
 *  - does NOT persist its state
 *
 * Note that the only difference between this config file and
 * the config file used to start the non-activatable/persistent
 * mode of the service is the config file passed to the service
 * through the serviceArgsArray defined below. In the case of 
 * transient mode of the service, there is no persistence 
 * directory specified in the service config file; whereas in
 * the case of the non-activatable/persistent mode, the name
 * of such a directory is specified.
 *
 * When using this file to configure the ServiceStarter framework,
 * the system properties shown below must be set on the command line.
 * Those properties allow this one file to be used as the starter
 * configuration file for each of the contributed service
 * implementations.
 *
 *  -Djava.security.manager
 *  -Djava.security.policy
 *  -Djava.util.logging.manager
 *  -Djava.util.logging.config.file
 *  -Djava.security.debug (optional)
 *  -Dconfig        (THIS config file)
 *  -DserverHost    (host running the service being started)
 *  -DserviceName   (ex. reggie, fiddler, norm, mercury, mahalo, outrigger)
 *  -DinterfaceName (ex. Registrar, Fiddler, NormServer, MailboxBackEnd, etc.)
 *  -DimplName      (ex. TransientRegistrarImpl, TransientFiddlerImpl, TransientNormServerImpl, etc.)
 *  -DcodebaseHost  (host running service's codebase server)
 *  -DcodebasePort  (port service's codebase server listens on)
 *  -DjiniHome      (base install directory for Jini, ex. /vob/jive, c:\\jini2_0)
 *  -DappHome       (base install directory for examples, ex. /home/tests, c:\\tests)
 *
 * Below is an example command line on unix. Carriage
 * returns are inserted for readability:
 * 
 * > /export/home/j2sdk1.4.1_01/bin/java
 *    -Djava.security.manager=
 *    -Djava.security.policy=<jini-install-dir>/common/jeri/policy/start-service.policy
 *    -Djava.util.logging.manager=com.sun.jini.logging.LogManager
 *    -Djava.util.logging.config.file=<jini-install-dir>/common/logging/jini.logging
 *    -Dconfig=<jini-install-dir>/common/jeri/config/start-one-transient.config
 *    -DserverHost=<hostname>
 *    -DserviceName=<serviceName> (ex. reggie)
 *    -DinterfaceName=<interfaceName> (ex. Registrar)
 *    -DimplName=<implName> (ex. PersistentRegistrarImpl)
 *    -DcodebaseHost=<httpd-hostname>
 *    -DcodebasePort=8080
 *    -DjiniHome=<jini-install-dir>
 *    -DappHome=<example-install-dir>
 *    -jar <jini-install-dir>/lib/start.jar <example-install-dir>/common/jeri/config/start-one-transient.config
 */

/* The following describes what is required in this file by the
 * ServiceStarter:
 *
 *  - ServiceDescriptor, either of one of the following types: 
 *
 *    The ServiceDescriptor contains the following required and
 *    optional items:
 *      o NonActivatableServiceDescriptor (because the service
 *        is not activatable)
 *      o required String that specifies the codebase to be used in
 *        the service's VM
 *      o required String that specifies the policy file to be used
 *        in the service's VM
 *      o required String that specifies the classpath to be used
 *        in the service's VM
 *      o required String that specifies the impl class name of
 *        the service to be started
 *      o optional String array that specifies the arguments with 
 *        which to configure the service. Note that the first
 *        element should be the path and filename of the service's
 *        configuration file, and the remaining arguments can be
 *        configuration values that override the values in that
 *        configuration file
 *
 *    Note: the first element of the first optional String argument
 *          of the ServiceDescriptor represents the location of another
 *          configuration file, different from this config file, that the
 *          service uses for its configuration. The service implementation
 *          retrieves the location of that other configuration file from
 *          its argument list and then performs a number of calls to getEntry
 *          during its initialization, to retrieve the values of the
 *          various configuration entries the service expects (refer to the
 *          javadoc of the service for a list of what the service expects). 
 */
import com.sun.jini.start.NonActivatableServiceDescriptor;
import com.sun.jini.start.ServiceDescriptor;

com.sun.jini.start {

    /* Service-related ---------------------------------------------------------- */
    /* Configuration items needed by the ServiceStarter to start the service */

    private static serviceCodebase    = new String("http://${codebaseHost}:${codebasePort}/${serviceName}-dl.jar http://${codebaseHost}:${codebasePort}/jsk-dl.jar");
    private static servicePolicyFile  = new String("${appHome}${/}example${/}${serviceName}${/}jeri${/}policy${/}${serviceName}.policy");
    private static serviceClasspath   = new String("${jiniHome}${/}lib${/}${serviceName}.jar");
    private static serviceImplName    = new String("com.sun.jini.${serviceName}.${implName}");
    private static serviceConfig      = new String("${appHome}${/}example${/}${serviceName}${/}jeri${/}config${/}transient-${serviceName}.config");
    private static serviceArgsArray   = new String[] { serviceConfig };

    /* For STARTING Transient (non-activatable/non-persistent) service */
    private static nonActivatableServiceDescriptor =
                                new NonActivatableServiceDescriptor(serviceCodebase,
                                                                    servicePolicyFile,
                                                                    serviceClasspath,
                                                                    serviceImplName,
                                                                    serviceArgsArray);

    static serviceDescriptors = new ServiceDescriptor[] { nonActivatableServiceDescriptor };

}//end com.sun.jini.start

